// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
ActiveWallElement is ActiveObject

// Brambles, a monster-type wall element, uses code from this file.  If you
//  update this file, double-check the code in Brambles as well.

constants:

   include blakston.khd

resources:

   include wallelem.lkod

   ActiveWallElement_name_rsc = "wall element"
   ActiveWallElement_icon_rsc = poisoncl.bgf
   ActiveWallElement_desc_rsc = "This is a wall spell element."
   
   ActiveWallElement_dissipate_rsc = "The wall element dissipates."
   ActiveWallElement_unaffected_rsc = "You are unaffected by the wall element."

classvars:

   vrName = ActiveWallElement_name_rsc
   vrIcon = ActiveWallElement_icon_rsc
   vrdesc = ActiveWallElement_desc_rsc

   viObject_flags = OF_NOEXAMINE

   viMoveOn_type = MOVEON_NOTIFY

   vrDissipateMessage = ActiveWallElement_dissipate_rsc
   vrUnaffectedMessage = ActiveWallElement_unaffected_rsc

   // Flag to see if the wall element effect is harmful.
   vbIsHarmful = TRUE

   // Does this have a Periodic timer check?
   vbPeriodic = TRUE

   // Do other properties vary based on SP?
   vbFixed = FALSE

   // Does this have a Periodic timer check?
   viEffectInterval = 400

   // Does the element affect the caster?
   vbCanAffectCaster = FALSE
   vbIsAreaEffect = TRUE

   // How much does each element contribute to the summoning limit?
   viLimitCount = 2

   // How many ms should the effect last at max spellpower?
   viEffectDuration = 1000

   // How much damage (10^[-3]) should the effect do per second at max spellpower?
   viEffectDamage = 1000

properties:

   vbSummoned = FALSE

   poCaster = $
   ptExpire = $

   // This is the fine range that the element will affect.
   piRange = FINENESS_HALF

   // This is a periodic timer that triggers periodic effects and
   //  clears the affected list.
   ptPeriodic = $

   // This is a list of objects already affected by the element
   //  this period.
   plAffected = $

   // This is the list of players have been found to be bad targets.
   plInvalidTargets = $

   // The wallelement carries all relevant information in its seed.
   // This allows the element to spawn additional elements that inherit
   // their behavior from the parent. plSeed has the following structure:
   // plSeed = [(1)  caster,
   //           (2)  spellpower,
   //           (3)  duration,
   //           (4)  charges,
   //           (5)  speed,
   //           (6)  direction,
   //           (7)  step,
   //           (8)  noise,
   //           (9)  curve,
   //           (10) secondary seed]
   plSeed = $

   // A wallelement can also carry a secondary seed, allowing itself and
   // each subsequently spawned element to create a branch of secondary
   // elements. For instance, a flame wave consists of two regular seeds
   // that will create elements to the left and right of the caster. Then,
   // each of those will spawn secondary elements that will move forward.
   // plSecondarySeed has the same structure as plSeed minus the 10th node.
   plSecondarySeed = $

   // Timer that spawns the next element upon expiration.
   ptSeed = $

   // Timer that may spawn a secondary seed upon expiration.
   ptSecondarySeed = $

messages:

   Constructor(seed=$)
   {
      local iCharges, iTime, oCaster;

      plSeed = ListCopy(seed);

      // We have to bound SP for calculating time since some spells
      // operate at increased maximum SP. This avoids randomization errors.
      if vbFixed
      {
         iTime = Nth(plSeed,3);
      }
      else
      {
         iTime = Nth(plSeed,3)*Random(Bound(901+Nth(plSeed,2),0,1000),1000)/1000;
      }

      oCaster = First(seed);

      if oCaster <> $
      {
         poCaster = oCaster;
         vbSummoned = IsClass(oCaster,&Player);

         if IsClass(poCaster,&Battler)
            AND viLimitCount
            AND NOT vbFixed
         {
            // If caster was at their limit, reduce duration.
            iTime = Bound(100 * iTime / (100 + Send(poCaster,
               @BeyondSummoningLimit)),1500,$);

            Send(poCaster,@AddActiveSummons,#i=viLimitCount);
         }
      }
      else
      {
         poCaster = self;
      }

      if iTime
      {
         ptExpire = CreateTimer(self,@Expire,iTime);
      }

      // Base the affected radius of our element on step size.
      // To allow full coverage, we need a radius > iStep*0.5*sqrt(2).
      piRange = (Nth(plSeed,7)*71/100) + 1;  // Add one for good measure.

      // If we have a charge left, create a new element after an amount of ms
      // specified in speed.
      iCharges = Nth(plSeed,4);
      if iCharges > 0 
      {
         // Subtract a charge and set a timer to spawn the new element.
         SetNth(plSeed,4,iCharges-1);
         ptSeed = CreateTimer(self,@SpawnNextElement,Nth(plSeed,5));
      }

      // If we have a secondary plSeed, spawn it afer the time specified.
      // The new element's angle is relative to its parent.
      if Length(plSeed) > 9
      {
         plSecondarySeed = ListCopy(Nth(plSeed,10));
         SetNth(plSecondarySeed,6,(Nth(plSeed,6)+Nth(plSecondarySeed,6))
            %MAX_ANGLE);
         ptSecondarySeed = CreateTimer(self,@SpawnSecondaryElement,
            Nth(plSecondarySeed,5));
      }

      propagate;
   }

   SpawnNextElement()
   {
      local iCurveParameters, iCurve, iCurveDelta, bContract, bCW, iAngle,
         iRow, iCol, iFine_Row, iFine_Col, iXFineStep, iYFineStep, oElement,
         oRoom, iStep, iNoise;

      ptSeed = $;

      oRoom = Send(self,@GetOwner);

      // Make sure we aren't going over the hardcap.
      if NOT Send(oRoom,@CanSummon)
      {
         return FALSE;
      }

      iAngle = Nth(plSeed,6);

      //// iCurve is the change in angle that a spawned element experiences
      // compared to its predecessor. This change can be anywhere from 0 to
      // MAX_ANGLE/4 i.e. 1024.
      // -.----.xxxx iCurve is stored in the first 4 digits.
      //// iCurveDelta allows for spiraling patterns, by adjusting iCurve to
      // increase or decrease with each additional step. Again, values between
      // 0 and MAX_ANGLE/4 are valid.
      // -.xxxx.---- iCurveDelta is stored in digits 5 to 8.
      //// bContract can either be 0 or 1 and determines whether the spiral is
      // expanding or contracting. 0 stands for an expanding spiral, 1 for a
      // contracting one.
      // x.----.---- bContract is stored in the 9th digit.
      //// bCW can be TRUE or FALSE. If TRUE, we rotate CW, else CCW.
      // -x.xxxx.xxxx is stored in the sign. - results in CW, + in CCW rotation.

      iCurveParameters = Nth(plSeed,9);
      bCW = FALSE;

      if iCurveParameters < 0
      {
         iCurveParameters = -iCurveParameters;
         bCW = TRUE;
      }

      iCurve = iCurveParameters % 10000;
      iCurveDelta = (iCurveParameters / 10000) % 10000;
      bContract = iCurveParameters / 100000000;

      if iCurveDelta <> 0
      {
         if bContract
         {
            iCurve += (iCurveDelta*(MAX_ANGLE/4 - iCurve)/(MAX_ANGLE/4))*
               (MAX_ANGLE/4 - iCurve)/(MAX_ANGLE/4);
         }
         else
         {
            iCurve -= (iCurveDelta*iCurve/(MAX_ANGLE/4))*iCurve/(MAX_ANGLE/4);
         }
      }

      iCurve = Bound(iCurve,0,MAX_ANGLE/4);

      iCurveParameters = iCurve + iCurveDelta*10000 + bContract*100000000;

      if bCW
      {
         iCurveParameters = -iCurveParameters;
         iAngle += iCurve;
      }
      else
      {
         iAngle += MAX_ANGLE - iCurve;
      }

      iAngle = iAngle % MAX_ANGLE;

      SetNth(plSeed,6,iAngle);
      SetNth(plSeed,9,iCurveParameters);

      // Time to calculate X and Y step from our angle of propagation.
      iXFineStep = Send(oRoom,@GetXFineStep,#angle=iAngle);
      iYFineStep = Send(oRoom,@GetYFineStep,#angle=iAngle);

      // Figure out where to spawn the next element based on our current
      // position, our direction, our stepsize and the randomization factor.
      iFine_Row = Send(self,@GetRow)*FINENESS + Send(self,@GetFineRow);
      iFine_Col = Send(self,@GetCol)*FINENESS + Send(self,@GetFineCol);

      iStep = Nth(plSeed,7);
      iNoise = Nth(plSeed,8);

      iFine_Col += iXFineStep * iStep / FINENESS + Random(-iNoise,iNoise);
      iCol = iFine_Col / FINENESS;
      iFine_Col = iFine_Col % FINENESS;

      iFine_Row += iYFineStep * iStep / FINENESS + Random(-iNoise,iNoise);
      iRow = iFine_Row / FINENESS;
      iFine_Row = iFine_Row % FINENESS;

      oElement = Create(GetClass(self),#seed=plSeed);
      Send(oRoom,@NewHold,#what=oElement,#new_row=iRow,#new_col=iCol,
         #fine_row=iFine_Row,#fine_col=iFine_Col);

      return;
   }

   SpawnSecondaryElement()
   {
      local iAngle, iRow, iCol, iFine_Row, iFine_Col, iXFineStep,
         iYFineStep, oElement, oRoom, iStep, iNoise;

      ptSecondarySeed = $;

      oRoom = Send(self,@GetOwner);

      // Make sure we aren't going over the hardcap.
      if NOT Send(oRoom,@CanSummon)
      {
         return FALSE;
      }

      //Inital spawn of the secondary element means we don't curve.
      iAngle = Nth(plSecondarySeed,6);

      // Time to calculate X and Y step from our angle of propagation.
      iXFineStep = Send(oRoom,@GetXFineStep,#angle=iAngle);
      iYFineStep = Send(oRoom,@GetYFineStep,#angle=iAngle);

      // Figure out where to spawn the next element based on our current
      // position, our direction, our stepsize and the randomization factor.
      iFine_Row = Send(self,@GetRow)*FINENESS + Send(self,@GetFineRow);
      iFine_Col = Send(self,@GetCol)*FINENESS + Send(self,@GetFineCol);

      iStep = Nth(plSecondarySeed,7);
      iNoise = Nth(plSecondarySeed,8);

      iFine_Col += iXFineStep * iStep / FINENESS + Random(-iNoise,iNoise);
      iCol = iFine_Col / FINENESS;
      iFine_Col = iFine_Col % FINENESS;

      iFine_Row += iYFineStep * iStep / FINENESS + Random(-iNoise,iNoise);
      iRow = iFine_Row / FINENESS;
      iFine_Row = iFine_Row % FINENESS;

      oElement = Create(GetClass(self),#seed=plSecondarySeed);
      Send(oRoom,@NewHold,#what=oElement,#new_row=iRow,#new_col=iCol,
         #fine_row=iFine_Row,#fine_col=iFine_Col);

      return;
   }

   SomethingMoved(what = $,new_row = $,new_col = $ ,fine_row = $, fine_col = $,
                  old_row = $, old_col = $, old_finerow = $, old_finecol = $,
                  cause = CAUSE_UNKNOWN)
   {
      // Only want to check players and mobs making manual movements,
      // not teleports etc.
      if (cause <> CAUSE_USER_INPUT AND cause <> CAUSE_MOB_MOVEMENT)
      {
         return;
      }

      if (new_row = $ OR new_col = $ OR fine_row = $ OR fine_col = $
         OR old_row = $ OR old_col = $ OR old_finerow = $ OR old_finecol = $)
      {
         Debug("Missing params in ", GetClass(self), " SomethingMoved");
      }

      // Check for range
      if IsClass(what,&Battler)
         AND NOT (IsClass(what,&Player)
                  AND Send(what,@IsInCannotInteractMode))
         AND IntersectLineCircle(Send(self,@GetRow), Send(self,@GetCol),
                     Send(self,@GetFineRow), Send(self,@GetFineCol),
                     old_row, old_col, old_finerow, old_finecol, new_row,
                     new_col, fine_row, fine_col, piRange)
      {
         Send(self,@CheckForEffect,#what=what,#new_row=new_row,#new_col=new_col);
      }

      return;
   }

   CheckForEffect(what = $,new_row = $,new_col = $)
   "Check for range to see if we apply the effect."
   {
      // Might not affect caster.
      if (NOT IsClass(what,&Battler))
         OR ((NOT vbCanAffectCaster) AND what = poCaster)
      {
         return FALSE;
      }

      // Don't affect them again this cycle.
      if plAffected <> $
         AND FindListElem(plAffected,what) <> 0
      {
         return FALSE;
      }

      // Don't affect people we've already found to be invalid targets.
      if plInvalidTargets <> $
         AND FindListElem(plInvalidTargets,what) <> 0
      {
         return FALSE;
      }

      // Don't affect users that haven't moved yet.
      if IsClass(what,&Player)
      {
         if NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_MOVED_SINCE_ENTRY)
         {
            return FALSE;
         }
      }

      // If this is harmful, and both caster and victim are players, then
      // disallow damage if caster's safety is on or if cannot do attack.
      // AllowBattlerAttack also performs all the other required checks,
      // so they are no longer needed in this class.
      if vbIsHarmful
         AND NOT Send(poCaster,@AllowBattlerAttack,#victim=what,
                        #report=FALSE,#stroke_obj=self)
      {
         // We can't interact with this target. Take note.
         plInvalidTargets = Cons(what,plInvalidTargets);

         if IsClass(what,&Player)
            AND NOT Send(what,@IsInCannotInteractMode)
         {
            Send(what,@MsgSendUser,#message_rsc=vrUnaffectedMessage);
         }

         return FALSE;
      }

      Send(self,@DoEffect,#what=what,#new_row=new_row,#new_col=new_col);

      return TRUE;
   }

   PeriodicEffect()
   "Periodic check. Clears the affected list, does the effect "
   "if the wall is periodic."
   {
      local i, oObject;

      ptPeriodic = $;
      plAffected = $;

      if vbPeriodic
      {
         foreach i in Send(poOwner,@GetHolderActive)
         {
            oObject = Send(poOwner,@HolderExtractObject,#data=i);
            if IsClass(oObject,&Battler)
               AND NOT (IsClass(oObject,&Player)
                  AND Send(oObject,@IsInCannotInteractMode))
               AND Send(self,@InRange,#what=oObject,
                        #iRow=Send(oObject,@GetRow),
                        #iCol=Send(oObject,@GetCol),
                        #iFineRow=Send(oObject,@GetFineRow),
                        #iFineCol=Send(oObject,@GetFineCol))
            {
               Send(self,@CheckForEffect,#what=oObject);
            }
         }
      }

      ptPeriodic = CreateTimer(self,@PeriodicEffect,viEffectInterval);

      return;
   }

   DoEffect(what = $, new_row = $, new_col = $)
   "Apply the wall's effect to 'what'."
   {
      // Keep track that we've affected this object.
      plAffected = Cons(what,plAffected);

      // Event monsters with boosted levels are granted walkthrough walls
      // when a wall element damages or affects them
      if IsClass(what,&Monster)
         AND Send(what,@GetBoostedLevel) > 0
      {
         Send(what,@SetBehaviorFlag,#flag=AI_MOVE_WALKTHROUGH_WALLS);
      }
      
      if IsClass(what,&LupoggKing)
      {
         Send(what,@AngeredByWallElement,#what=self);
      }

      return;
   }

   InRange(what = $, iRow = $, iCol = $, iFineRow = $, iFineCol = $)
   "Checks if we can see the target and if so if they are in range."
   {
      local iFineRow_diff, iFineCol_diff, iDistanceSquared;

      iFineRow += iRow * FINENESS;
      iFineCol += iCol * FINENESS;

      iFineRow_diff = Send(self,@GetRow) * FINENESS +
         Send(self,@GetFineRow) - iFineRow;
      iFineCol_diff = Send(self,@GetCol) * FINENESS +
         Send(self,@GetFineCol) - iFineCol;

      iDistanceSquared = iFineRow_diff * iFineRow_diff +
         iFineCol_diff * iFineCol_diff;

      if (iDistanceSquared <= piRange * piRange)
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=what)
      {
         return TRUE;
      }

      return FALSE;
   }

   Expire()
   {
      ptExpire = $;
      Send(self,@Delete);

      return;
   }

   Delete()
   {
      if IsClass(poCaster,&Battler)
      {
         Send(poCaster,@RemoveActiveSummons,#i=viLimitCount);
      }

      Send(poOwner,@RemoveActiveSummons);

      poCaster = $;
      plAffected = $;
      plInvalidTargets = $;
      plSeed = $;
      plSecondarySeed = $;

      if ptPeriodic <> $
      {
         DeleteTimer(ptPeriodic);
         ptPeriodic = $;
      }

      if ptSeed <> $
      {
         DeleteTimer(ptSeed);
         ptSeed = $;
      }

      if ptSecondarySeed <> $
      {
         DeleteTimer(ptSecondarySeed);
         ptSecondarySeed = $;
      }

      if ptExpire <> $
      {
         DeleteTimer(ptExpire);
         ptExpire = $;
      }

      propagate;
   }

   ReqNewOwner(what = $)
   {
      return IsClass(what,&Room);
   }

   NewOwner(what = $)
   {
      Send(what,@AddActiveSummons);
      Post(self,@LocationCheck,#where=what);

      propagate;
   }

   LocationCheck(where = $)
   {
      local iTime;

      if ((IsClass(where,&GuildHall) AND NOT IsClass(where,&GuildHall15))
            AND Send(where,@InFoyer,#who=poCaster))
         OR (Send(where,@IsArena)
            AND NOT Send(where,@InPlay,#what=self,#bNonPlayerOkay=TRUE))
      {
         if IsClass(poCaster,&Player)
         {
            Send(poCaster,@MsgSendUser,#message_rsc=vrDissipateMessage);
         }

         Post(self,@Delete);
      }
      // We have used up at least half of the rooms total summoning limit.
      // Let's get rid off the wall element after no more than five seconds.
      // If we were at the actual limit, this element wouldn't have been
      // spawned to begin with.
      else
      {
         if NOT Send(where,@CanSummon,#bHalf=TRUE)
         {
            if ptExpire <> $
            {
               iTime = GetTimeRemaining(ptExpire);
               DeleteTimer(ptExpire);
               ptExpire = CreateTimer(self,@Expire,Bound(iTime,0,5000));
            }
            else
            {
               ptExpire = CreateTimer(self,@Expire,5000);
            }
         }

         // Trigger the first periodic effect right after spawn.
         Send(self,@PeriodicEffect);
      }

      return;
   }

   GetCaster()
   {
      return poCaster;
   }

   IsAreaEffect()
   {
      return vbIsAreaEffect;
   }

   IsRangedAttack()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
