// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
MonsterRoom is Room

constants:

   include blakston.khd

   DEFAULT_GEN_TIME = 5000
   DEFAULT_GEN_PERCENT = 100
   
resources:

classvars:

   // If true, reduce monster spawn rate when there are few players in the room
   vbScaleSpawnRateWithPlayers = TRUE
   
properties:

   piGen_time = DEFAULT_GEN_TIME
   ptGen = $

   ptOkay_To_Load = $
   pbOkay_To_Load = TRUE

   // Timer makes 'em wait before new batch loads.

   // This is how long they have to wait before room resets, in ms.
   piReload_Wait_Time = 20000

   // Only loads the first monster in list plMonsters if set to true.
   pbLoad_first_monster_only = FALSE

   // Minimum # of monsters loaded by first_user_enters.
   piInit_count_min = 1

   // Maximum # of monsters loaded by initial load.
   //  Must never be greater than # of available coordinates!
   piInit_count_max = 5

   // percentage chance that you'll get a new monster when timer expires
   piGen_percent = DEFAULT_GEN_PERCENT

   // maximum number of total monsters a room can hold       
   piMonster_count_max = 10

   // maximum number of total monsters adjusted to number of players
   piMonster_adjusted_max = 5

   // Number of monsters currently in room
   piMonster_count = 0

   // Number of heroes currently in room
   piHero_count = 0

   // List of monsters we spawn, if for: [monster class, chance to spawn]
   plMonsters = $

   // Should we generate monsters at all?
   pbGenerateMonsters = TRUE

   // Should we replace killed monsters with new ones after initial generation?
   pbRespawnMonsters = TRUE

   // Is this a room where monsters grow in strength?
   piLevel = 0

   // How far will spawned mobs roam from their spawnpoint?
   piPatrolRadius = 10

   // How far will spawned mobs fight away from their spawn point before they reset?
   piLeashRadius = 0

messages:

   Constructed()
   {
      Send(self,@SetMonsterGenPoints);
      Send(self,@ValidateMonsterGenPoints);

      propagate;
   }

   SetMonsterGenPoints()
   {
      // Default do nothing.
      return;
   }

   ValidateMonsterGenPoints()
   {
      local i, iSectorID, each_obj, iRow, iCol;

      foreach i in plGenerators
      {
         iRow = First(i);
         iCol = Nth(i,2);

         iSectorID = Send(self,@GetSectorIDAtLocation,#row=iRow,#col=iCol,
                           #fine_row=FINENESS_HALF,#fine_col=FINENESS_HALF);
         if (iSectorID = $
            OR iSectorID < 0)
         {
            Debug("Invalid plGenerator coords ", iRow, iCol,
                  " in room ",vrName, GetClass(self));
         }
      }

      return;
   }

   Delete()
   {
      if ptGen <> $
      {
         DeleteTimer(ptGen);
         ptGen = $;
      }

      if ptOkay_To_Load <> $
      {
         DeleteTimer(ptOkay_To_Load);
         ptOkay_To_Load = $;
         pbOkay_To_Load = TRUE;
      }

      plGenerators = $;

      propagate;
   }

   GetMonsterList()
   {
      return plMonsters;
   }

   SetMonsterList(lMonster_List = $)
   {
      if lMonster_List <> $
      {
         plMonsters = lMonster_List;
      }

      return;
   }

   GetMonsterGenTime()
   {
      local iWaitTime, iMaxHeroes;

      iWaitTime = piGen_time * 100 / Send(SETTINGS_OBJECT,@GetSpawnRate);

      iMaxHeroes = 5;

      if vbScaleSpawnRateWithPlayers
      {
         iWaitTime /= Bound(piHero_count,1,iMaxHeroes);
      }
      else
      {
         // Always have max spawn rate
         iWaitTime /= iMaxHeroes;
      }

      return iWaitTime;
   }

   MonsterGenTimer()
   {
      local iAttempts;

      ptGen = $;

      iAttempts = 10;

      while iAttempts > 0
      {
         if Send(self,@TryCreateMonster)
         {
            break;
         }
         else
         {
            --iAttempts;
         }
      }

      ptGen = CreateTimer(self,@MonsterGenTimer,Send(self,@GetMonsterGenTime));

      return;
   }

   SetMonsterGeneration(bValue=TRUE)
   {
      pbGenerateMonsters = bValue;

      if (bValue
         AND ptGen = $
         AND pbUser_in_room)
      {
         ptGen = CreateTimer(self,@MonsterGenTimer,Send(self,@GetMonsterGenTime));
      }

      return;
   }

   CanMonsterGenerate()
   {
      return pbGenerateMonsters;
   }

   TryCreateMonster(initroom = FALSE,loadfirst = FALSE)
   "Will try to create a monster in the room.  Initroom=TRUE means it's"
   "being called when first player enters."
   {
      local oMonster,iRoll,iTotal,lMonster_info,iRow,iCol,lPos,iMax;

      iMax = piMonster_adjusted_max;

      if initroom
      {
         iMax = piMonster_count_max;
      }

      if (piMonster_Count >= iMax) OR NOT pbGenerateMonsters
      {
         return FALSE;
      }

      iRoll = Random(1,100);
      if (iRoll > piGen_percent) AND (initroom=FALSE)
      {
         return FALSE;
      }

      if NOT loadfirst
      {
         iRoll = Random(1,100);
      }
      else
      {
         iRoll = 1;
      }

      // This spawns mobs according to their spawn percentages, which are
      // the second entry of lMonster_info. If a roll doesn't satisfy a
      // percentage, the next percentage is added and the roll now checks
      // against the sum of all previous percentages and so forth.
      iTotal = 0;
      foreach lMonster_info in plMonsters
      {
         iTotal = iTotal + Nth(lMonster_info,2);

         if iRoll <= iTotal
         {
            if IsClass(self,&SurvivalRoom)
            {
               oMonster = Create(First(lMonster_info),#piSurvivalLevel=piLevel);
            }
            else
            {
               oMonster = Create(First(lMonster_info));
            }

            if NOT Send(self,@GenerateMonster,#oMonster=oMonster)
            {
               return FALSE;
            }

            break;
         }
      }

      return TRUE;
   }

   DMBlankToPlain(what=$)
   "Called on a room if a DM goes from blank to plain."
   {
      if Send(what,@CountsAsHero)
      {
         ++piHero_count;
      }

      return;
   }

   DMPlainToBlank(what=$)
   "Called on a room if a DM goes from plain to blank."
   {
      if NOT Send(what,@CountsAsHero)
      {
         --piHero_count;
      }

      return;
   }

   NewHold(what = $)
   {
      if (IsClass(what,&Battler)
         AND Send(what,@IsLegitimateSpawn))
      {
         if Send(what,@CountsAsMonster)
         {
            ++piMonster_Count;
         }
         else if Send(what,@CountsAsHero)
         {
            ++piHero_count;
         }

         Send(self,@AdjustMaxMonsters);
      }

      propagate;
   }

   LeaveHold(what = $)
   {
      if (IsClass(what,&Battler)
         AND Send(what,@IsLegitimateSpawn))
      {
         if Send(what,@CountsAsMonster)
         {
            --piMonster_Count;
         }
         else if Send(what,@CountsAsHero)
         {
            --piHero_count;
         }

         Send(self,@AdjustMaxMonsters);
      }

      propagate;
   }

   UpdateBattlerCount()
   "Updates our count of monsters and heroes (players and their helpers)."
   "Does the same thing as combined CountMonsters and CountHeroes."
   {
      local i, oObject;

      piMonster_Count = 0;
      piHero_count = 0;

      foreach i in plActive
      {
         oObject = First(i);

         if (IsClass(oObject,&Battler)
            AND Send(oObject,@IsLegitimateSpawn))
         {
            // Count monsters, but only if they're meanies.
            if Send(oObject,@CountsAsMonster)
            {
               ++piMonster_Count;
            }
            else if Send(oObject,@CountsAsHero)
            {
               // Count heroes, include friendly monsters.
               ++piHero_count;
            }
         }
      }

      return;
   }

   CountMonsters()
   {
      local i, oObject;

      piMonster_Count = 0;

      foreach i in plActive
      {
         oObject = First(i);

         if IsClass(oObject,&Battler)
         {
            // Count monsters, but only if they're meanies.
            if Send(oObject,@CountsAsMonster)
               AND Send(oObject,@IsLegitimateSpawn)
            {
               ++piMonster_Count;
            }
         }
      }

      return piMonster_Count;
   }

   CountHeroes()
   {
      local i, oObject;

      piHero_count = 0;

      foreach i in plActive
      {
         oObject = First(i);

         if IsClass(oObject,&Battler)
         {
            // Count heroes, include friendly monsters.
            if Send(oObject,@CountsAsHero)
               AND Send(oObject,@IsLegitimateSpawn)
            {
               ++piHero_count;
            }
         }
      }

      return piHero_count;
   }

   AdjustMaxMonsters()
   {
      local iPercentage, iLength;

      iLength = Length(plGenerators);

      if vbScaleSpawnRateWithPlayers
      {
         iPercentage = piHero_count*20;
         iPercentage = Bound(iPercentage + 20,40,100);

         piMonster_adjusted_max = piMonster_count_max * iPercentage / 100;

         if iLength > 0
         {
            piMonster_adjusted_max = Bound(piMonster_adjusted_max,0,iLength);
         }
      }
      else if iLength > 0
      {
         piMonster_adjusted_max = Bound(piMonster_count_max,0,iLength);
      }
      else
      {
         piMonster_adjusted_max = piMonster_count_max;
      }

      return piMonster_adjusted_max;
   }

   FirstUserEntered(what = $)
   "This is run when a player first enters the room.  Loads a random #"
   "of critters to keep things lively.  Loads no monsters if there"
   "are already monsters here or if area cleaned out recently"
   {
      local iSpawnCount, oMonster, iLength, i, bFound;

      if NOT pbGenerateMonsters
      {
         propagate;
      }

      if ptGen <> $
      {
         Debug("Monster room got firstuserentered when apparently that wasn't true");

         propagate;
      }

      // Check if any monsters are present in the room at the time of entry
      // and count their number. The numer is stored in piMonster_Count for
      // later checks. If a monster has been found, bFound is TRUE.
      bFound = Send(self,@CountMonsters);

      // We had some leftover mobs from a previous visit or not enough
      // time has passed since the latest clearing. Start regular spawn timer.
      if (bFound OR NOT pbOkay_To_Load) AND pbRespawnMonsters 
      {
         ptGen = CreateTimer(self,@MonsterGenTimer,Send(self,@GetMonsterGenTime));

         propagate;
      }

      // We actually have a fresh room to repopulate. Acquire population goal.
      // We fill the room up at the start, not adjusting for players.
      iSpawnCount = Random(piInit_count_min,piInit_count_max) * 100;

      // If our spawn failed (for example if a random spawn point was not valid)
      // try again a few times before giving up.
      while iSpawnCount > 0
      {
         if Send(self,@TryCreateMonster,#initroom=TRUE,#loadfirst=pbLoad_First_Monster_Only)
         {
            iSpawnCount -= 100;
         }
         else
         {
            --iSpawnCount;
         }
      }

      // Initial creation process finalized. Initiate sustained generation process.
      // Only if respawns are enabled though.
      if pbRespawnMonsters
      {
         ptGen = CreateTimer(self,@MonsterGenTimer,Send(self,@GetMonsterGenTime));
      }

      propagate;
   }

   OkayToLoadTimer()
   "When a player leaves a room with no monsters in it, this timer starts"
   "to be sure a player doesn't return immediately and trigger a reset."
   {
      ptOkay_To_Load = $;
      pbOkay_To_Load = TRUE;

      return;
   }

   LastUserLeft(what = $)
   "OkaytoloadTimer started if no monsters are left alive, to prevent"
   "Endless exp boosting."
   {
      local iWaitTime;

      if ptGen <> $
      {
         DeleteTimer(ptGen);
         ptGen = $;
      }
      else if pbGenerateMonsters AND pbRespawnMonsters
      {
         Debug("Monster room had $ ptGen timer in LastUserLeft, room ",
               Send(self,@GetName));
      }

      if (ptOkay_To_Load = $) AND (piMonster_count = 0)
      {
         iWaitTime = (piReload_Wait_Time
                        * Send(SETTINGS_OBJECT,@GetSpawnRate)) / 100;
         ptOkay_To_Load = CreateTimer(self,@OkaytoLoadTimer,iWaitTime);
         pbOkay_To_Load = FALSE;
      }

      propagate;
   }

   ActivateAllGenerators(cClass =$)
   "A command to test the room--makes all generators create a monster, so"
   "that one can easily see where the generators are."
   {
      local lPos, iRow, iCol, oMonster, bReqNewHold, bReqSomethingMoved,
            iCount, iLength;

      iCount = 1;  //initialize iCount

      if plGenerators = $
      {
         Debug("There are no generators in this room!");

         return 0;
      }

      iLength = Length(plGenerators);

      while iCount <= iLength
      {
         if cClass = $
         {
            oMonster = Create(&Apple);
         }
         else
         {
            oMonster = Create(cClass);
         }

         lPos = Nth(plGenerators,iCount);
         iRow = First(lPos);
         iCol = Nth(lPos, 2);

         bReqNewHold = Send(self,@ReqNewHold,#what=oMonster,
                              #new_row=iRow,#new_col=iCol);
         bReqSomethingMoved = Send(self,@ReqSomethingMoved,#what=oMonster,
                                    #new_row=iRow,#new_col=iCol);

         if bReqNewHold AND bReqSomethingMoved
         {
            Send(self,@NewHold,#what=oMonster,#new_row=iRow,#new_col=iCol,
                  #fine_row=FINENESS_HALF,#fine_col=FINENESS_HALF);
         }

         iCount = iCount + 1;
      }

      return iCount - 1;
   }

   GetGenerators()
   {
      return plGenerators;
   }

   SetGenerators(generators = $)
   {
      if (generators = $)
      {
         return;
      }

      plGenerators = generators;

      return;
   }

   GetPatrolPaths()
   {
      return plPatrolPaths;
   }

   SetPatrolPaths(patrolPaths = $)
   {
      if (patrolPaths = $)
      {
         return;
      }

      plPatrolPaths = patrolPaths;

      return;
   }

   GetGenTime()
   {
      return piGen_time;
   }

   SetGenTime(time = DEFAULT_GEN_TIME)
   {
      piGen_time = time;

      return;
   }

   GetGenPercent()
   {
      return piGen_Percent;
   }

   SetGenPercent(percent = DEFAULT_GEN_PERCENT)
   {
      piGen_Percent = percent;

      return;
   }

   PrintMobGenerators()
   "Prints out monster spawn % and class name."
   {
      local i;

      if (plMonsters = $)
      {
         return;
      }

      GodLog(Send(self,@GetName),":");

      foreach i in plMonsters
      {
         GodLog(First(i),", ",Nth(i,2),"\%");
      }

      return;
   }

   GetPatrolRadius()
   {
      return piPatrolRadius*piPatrolRadius;
   }

   GetLeashRadius()
   {
      return piLeashRadius*piLeashRadius;
   }

   GetNumGenerators()
   {
      return Length(plGenerators);
   }

   RemoveAllGenerators()
   {
      plGenerators = $;

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
