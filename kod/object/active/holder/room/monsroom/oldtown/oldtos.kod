// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
OldTos is OldTown

constants:

   include blakston.khd

resources:

   include oldtos.lkod

   room_name_OldTos = "Historic Streets of Tos"
   room_OldTos = otos.roo
   OldTos_music = city02.ogg

classvars:

   vrName = room_name_OldTos
   viPermanent_flags = ROOM_LAMPS

   viTeleport_row = 48
   viTeleport_col = 27

   viTerrain_type = TERRAIN_CITY

properties:

   viPermanent_flags = ROOM_NO_PK

   prRoom = room_OldTos
   piRoom_num = RID_OLD_TOS

   prMusic = OldTos_music

   piBaseLight = LIGHT_NICE

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   pbSnowGroundTexture = TRUE

messages:

   CreateStandardExits()
   {
      plExits = $;

      // Fams
      plExits = Cons([ 37, 27, RID_OLD_TOS_INN, 4, 1, ROTATE_NONE ],plExits);
      plExits = Cons([ 41, 32, RID_OLD_TOS_INN, 12, 7, ROTATE_NONE ],plExits);
      plExits = Cons([ 41, 33, RID_OLD_TOS_INN, 12, 7, ROTATE_NONE ],plExits);

      // Friscs
      plExits = Cons([ 20, 27, RID_OLD_TOS_APOTH, 8, 1, ROTATE_NONE ],plExits);
      plExits = Cons([ 20, 28, RID_OLD_TOS_APOTH, 8, 1, ROTATE_NONE ],plExits);

      // Blacksmith
      plExits = Cons([ 44, 8, RID_OLD_TOS_SMITH, 1, 3, ROTATE_NONE ],plExits);

      plEdge_Exits = $;
      plEdge_Exits = Cons([ LEAVE_EAST, RID_OLD_TOS_EAST, 26, 2, ROTATE_NONE ],
                        plEdge_exits);

      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&Fountain),#new_row=44,#new_col=25,
            #fine_row=32,#fine_col=32,#new_angle=ANGLE_EAST);

      // Lighting.
      // MG
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=41,#new_col=6,
            #fine_row=4,#fine_col=8,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=43,#new_col=6,
            #fine_row=60,#fine_col=8,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=43,#new_col=12,
            #fine_row=60,#fine_col=32,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=41,#new_col=12,
            #fine_row=4,#fine_col=32,#new_angle=ANGLE_EAST);
      // Left fountain
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=43,#new_col=20,
            #fine_row=56,#fine_col=12,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=48,#new_col=20,
            #fine_row=16,#fine_col=12,#new_angle=ANGLE_EAST);
      // Right fountain
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=43,#new_col=30,
            #fine_row=56,#fine_col=60,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=48,#new_col=30,
            #fine_row=16,#fine_col=60,#new_angle=ANGLE_EAST);
      // East ende
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=40,#new_col=40,
            #fine_row=18,#fine_col=56,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=44,#new_col=40,
            #fine_row=50,#fine_col=56,#new_angle=ANGLE_EAST);
      // Top fountain
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=39,#new_col=27,
            #fine_row=26,#fine_col=46,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=39,#new_col=23,
            #fine_row=26,#fine_col=12,#new_angle=ANGLE_EAST);
      // Northern part
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=29,#new_col=23,
            #fine_row=32,#fine_col=52,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=29,#new_col=27,
            #fine_row=32,#fine_col=12,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=17,#new_col=23,
            #fine_row=32,#fine_col=52,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=17,#new_col=27,
            #fine_row=32,#fine_col=12,#new_angle=ANGLE_EAST);
      // Dukes
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=6,#new_col=23,
            #fine_row=32,#fine_col=32,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OldLamp),#new_row=6,#new_col=27,
            #fine_row=32,#fine_col=32,#new_angle=ANGLE_EAST);

      // Plants
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=45,#new_col=12,
            #fine_row=22,#fine_col=48,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=48,#new_col=18,
            #fine_row=2,#fine_col=54,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=46,#new_col=31,
            #fine_row=16,#fine_col=48,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=39,#new_col=38,
            #fine_row=52,#fine_col=50,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=39,#new_col=35,
            #fine_row=52,#fine_col=32,#new_angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=44,#new_col=34,
            #fine_row=32,#fine_col=56,#new_angle=ANGLE_EAST);

      propagate;
   }

   RecalcLightAndWeather()
   "Set the flicker sectors appropriately based on time"
   {
      local iHour,iLight_effect;

      iHour = Send(SYS,@GetHour);

      if iHour >= 11 AND iHour <= 17
      {
         iLight_effect = FLICKER_OFF;
      }
      else
      {
         iLight_effect = FLICKER_ON;
      }

      Send(self,@SetSectorLight,#sector=1,#light_effect=iLight_effect);
      Send(self,@SetSectorLight,#sector=2,#light_effect=iLight_effect);

      propagate;
   }

   StartSnow(bOnGround=TRUE)
   {
      // Check if we can have weather effects here.
      if NOT pbWeatherEffects
      {
         return;
      }

      if bOnGround
         AND pbSnowGroundTexture
      {
         Send(self,@ChangeTexture,#id=1,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=2,#new_texture=61016,#flags=CTF_FLOOR);
      }

      propagate;
   }

   EndSnow(override=FALSE)
   "Use override if rooms have manually placed textures."
   {
      if pbSnowGroundTexture
         OR override
      {
         Send(self,@RemoveTextureChange,#id=1);
         Send(self,@RemoveTextureChange,#id=2);
      }

      // Propagate to Room, do the rest there.
      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
