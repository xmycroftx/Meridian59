// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
OrcPitA is MonsterRoom

constants:

   include blakston.khd

   SOLUTIONSECTOR = 1
   DOORSECTOR = 2

resources:

   include orcpita.lkod

   room_OrcPitA = ocpa.roo
   room_name_OrcPitA = "Grog's Antechamber"

   OrcPitA_music = orcpit.ogg

classvars:

   vrName = room_name_OrcPitA

   viTeleport_row = 86
   viTeleport_col = 12

   viTerrain_type = TERRAIN_CAVES

properties:

   prRoom = room_OrcPitA
   piRoom_num = RID_ORC_PIT_A

   piBaseLight = LIGHT_MIN
   piOutside_factor = 0

   piGen_time = 25000
   piGen_percent = 80

   piInit_count_min = 7
   piInit_count_max = 9

   piMonster_count_max = 25

   ptDoor = $

   prMusic = OrcPitA_music

messages:

   Constructed()
   {
      plMonsters = [ [&CaveOrc, 60], [&OrcWizard,40] ];

      propagate;
   }

   SetMonsterGenPoints(bRandomGen = TRUE)
   {
      if (bRandomGen)
      {
         return;
      }

      plGenerators = [[50,43], [36,31], [28,39], [15,35], [21,19], [15,12],
                      [39,17], [44,29], [44,34], [27,8], [36,28], [48,22],
                      [47,23], [45,31], [24,33], [20,39]];

      return;
   }

   CreateStandardExits()
   {
      plEdge_exits = $;
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_ORC_CAVE3, 3, 41, ROTATE_NONE], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_EAST, RID_ORC_PIT, 35, 5, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   SomethingTryGo(What=$,Row=$,Col=$)
   {
      if (Row = 93 AND (Col = 24 OR Col = 25 OR Col = 26))
         OR (Row = 91 AND (Col = 24 OR Col = 25 OR Col = 26))
      {
         Send(self,@SetSector,#sector=DOORSECTOR,#animation=ANIMATE_CEILING_LIFT,
               #height = 600,#speed=50);
         ptDoor = CreateTimer(self,@CloseDoor,60000);

         return TRUE;
      }

      propagate;
   }

   Delete()
   {
      if (ptDoor <> $)
      {
         DeleteTimer(ptDoor);
         ptDoor = $;
      }

      propagate;
   }

   CloseDoor()
   {
      ptDoor = $;

      Send(self,@SetSector,#sector=DOORSECTOR,#animation=ANIMATE_CEILING_LIFT,
            #height = 500,#speed=0);

      return;
   }


//////////////////////////////////
//Puzzle stuff.  More info on puzzle in orcpitb.kod
//

   DoSolution(height=500,Speed=50)
   {
      Send(self,@SetSector,#sector=SOLUTIONSECTOR,#animation=ANIMATE_FLOOR_LIFT,
            #height = height,#speed=Speed);

      return;
   }

   NumInChamber()
   {
      local i, each_obj, count, iRow, iCol;

      count = 0;

      foreach i in plActive
      {
         each_obj = First(i);
         iRow = Send(each_obj,@GetRow);
         iCol = Send(each_obj,@GetCol);
         if iRow > 81
            AND iCol > 20
            AND iRow < 91
            AND iCol < 30
            AND IsClass(each_obj,&User)
         {
            ++count;
         }
      }

      return count;
   }

   AllAUsed()
   {
      local i, each_obj, iRow, iCol, bAOne;

      bAOne = FALSE;

      foreach i in plActive
      {
         each_obj = First(i);
         iRow = Send(each_obj,@GetRow);
         iCol = Send(each_obj,@GetCol);
         if iRow = 83
            AND iCol = 25
            AND IsClass(each_obj,&User)
         {
            bAOne = TRUE;
         }
      }

      return bAOne;
   }

   AllBUsed()
   {
      local i, each_obj, count, iRow, iCol, bBOne, bBTwo;

      bBOne = FALSE;
      bBTwo = FALSE;

      foreach i in plActive
      {
         each_obj = First(i);
         iRow = Send(each_obj,@GetRow);
         iCol = Send(each_obj,@GetCol);
         if (iRow = 86 AND iCol = 22)
            AND IsClass(each_obj,&User)
         {
            bBOne = TRUE;
         }

         if (iRow = 86 AND iCol = 28)
            AND IsClass(each_obj,&User)
         {
            bBTwo = TRUE;
         }
      }

      return (bBOne AND bBTwo);
   }

end
////////////////////////////////////////////////////////////////////////////////
