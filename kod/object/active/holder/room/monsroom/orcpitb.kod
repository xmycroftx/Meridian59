// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
OrcPitB is MonsterRoom

constants:

   DOORSECTOR = 2
   SOLUTIONSECTOR = 1

   SOLUTIONHEIGHTB1 = 0
   SOLUTIONHEIGHTB2 = 100
   SOLUTIONHEIGHTB3 = 250

   REGULARHEIGHTB = 500


   SOLUTIONHEIGHTA1 = 900
   SOLUTIONHEIGHTA2 = 750
   SOLUTIONHEIGHTA3 = 600

   REGULARHEIGHTA = 500

   include blakston.khd

resources:

   include orcpitb.lkod

   room_OrcPitB = ocpb.roo
   room_name_OrcPitB = "Brog's Antechamber"

   OrcPitB_music = orcpit.ogg

classvars:

   vrName = room_name_OrcPitB

   viTeleport_row = 113
   viTeleport_col = 29

   viTerrain_type = TERRAIN_CAVES

properties:

   prRoom = room_OrcPitB
   piRoom_num = RID_ORC_PIT_B

   piBaseLight = LIGHT_MIN
   piOutside_factor = 0

   piGen_time = 25000
   piGen_percent = 80

   piInit_count_min = 7
   piInit_count_max = 9

   piMonster_count_max = 25
   poSwitch = $

   ptDoor = $
   ptPuzzle = $

   prMusic = OrcPitB_music

messages:

   Constructed()
   {
      plMonsters = [ [&CaveOrc, 70], [&GroundwormQueen, 30] ];


      propagate;
   }

   SetMonsterGenPoints(bRandomGen = TRUE)
   {
      if (bRandomGen)
      {
         return;
      }

      plGenerators = [[50,43], [36,31], [28,39], [15,35], [21,19], [15,12],
                      [39,17], [44,29], [44,34], [27,8], [36,28], [48,22],
                      [47,23], [45,31], [24,33], [20,39]];

      return;
   }

   CreateStandardExits()
   {
      plEdge_exits = $;
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_ORC_CAVE2, 2, 14, ROTATE_NONE], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_WEST, RID_ORC_PIT, 35, 67, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   CreateStandardObjects()
   {
      local i, o;

      poSwitch = Create(&Lever);
      Send(self,@NewHold,#what=poSwitch,#new_row=48,#new_col=29);

      // some barriers for the pass tunnel

      foreach i in [

         [ 50, 33, 40, 44, OO_STALACTITE1 ],
         [ 53, 35, 32, 32, OO_STALAGMITE1 ],

         [ 53, 36, 50, 50, OO_STALACTITE2 ],
         [ 53, 38, 50, 14, OO_STALACTITE2 ],

         [ 54, 36, 32, 50, OO_STALAGMITE2 ],
         [ 54, 38, 32, 14, OO_STALAGMITE1 ],

         [ 55, 36, 14, 50, OO_STALACTITE2 ],
         [ 55, 38, 14, 14, OO_STALACTITE2 ],

         [ 55, 39, 40, 44, OO_STALACTITE2 ],
         [ 55, 41, 32, 32, OO_STALAGMITE2 ],

         [ 18, 44, 32, 32, OO_STALACTITE1 ],
         [ 11, 11, 32, 32, OO_STALAGMITE1 ],
         [ 28, 53, 32, 32, OO_STALAGMITE2 ]

      ]
      {
         o = Create(&OrnamentalObject,#type=Nth(i,5));
         Send(o,@SetNoMoveOn);
         Send(self,@NewHold,#what=o,
               #new_row=First(i),#new_col=Nth(i,2),
               #fine_row=Nth(i,3),#fine_col=Nth(i,4));
      }

      propagate;
   }

   Delete()
   {
      if (ptDoor <> $)
      {
         DeleteTimer(ptDoor);
         ptDoor = $;
      }
      if (ptPuzzle <> $)
      {
         DeleteTimer(ptPuzzle);
         ptPuzzle = $;
      }
      poSwitch = $;

      propagate;
   }

   SomethingTryGo(What=$,Row=$,Col=$)
   {
      if (Row >= 53 AND Col >= 28 AND Row <= 55 AND Col <= 30)
      {
         Send(self,@SetSector,#sector=DOORSECTOR,#animation=ANIMATE_CEILING_LIFT,
               #height = 600,#speed=50);
         ptDoor = CreateTimer(self,@CloseDoor,60000);

         return TRUE;
      }

      propagate;
   }

   CloseDoor()
   {
      ptDoor = $;

      Send(self,@setsector,#sector=DOORSECTOR,#animation=ANIMATE_CEILING_LIFT,
            #height = 500,#speed=0);

      return;
   }


//////////////////////////////////
//Puzzle stuff.  More info on puzzle in orcpitb.kod
//
//
// Room "A" is RID_ORC_PIT_A; Room "B" is RID_ORC_PIT_B  (this room)
// This puzzle is solved when there are 1/3, 1/2. or 2/3 as many people
// in the the chamber of room "A" as in room "B"
//
// Different Solutions are possible depending on whether there is someone
// standing on certain squares in either of these rooms.  For example, if
// there is someone on each square 'A' in room "A" and each square 'A' in
// room "B," we do solution 3.
//
//
//

   SomethingChanged(what=$)
   {
      if what = poSwitch
      {
         Send(self,@EvaluatePuzzle);
      }

      propagate;
   }

   EvaluatePuzzle()
   {
      local NumChamberA, NumChamberB, oRoomA, bAllAA, bAllAB, bAllBA, bAllBB;

      oRoomA = Send(SYS,@FindRoombynum,#num=RID_ORC_PIT_A);

      NumChamberA = Send(oRoomA,@NumInChamber);
      NumChamberB = Send(self,@NumInChamber);

      if NumChamberA * 3 = NumChamberB
         OR NumChamberA * 2 = NumChamberB
         OR NumChamberA * 2 = NumChamberB * 3
      {
         bAllAA = Send(oRoomA,@AllAUsed);
         bAllAB = Send(oRoomA,@AllBUsed);
         bAllBA = Send(self,@AllAUsed);
         bAllBB = Send(self,@AllBUsed);
         ptPuzzle = CreateTimer(self,@ResetPuzzle,60000);

         // Person on all "A" and "B" in each room.
         if bAllAA AND bAllAB AND bAllBA AND bAllBB
         {
            Send(oRoomA,@DoSolution,#height=SOLUTIONHEIGHTA1);
            Send(self,@DoSolution,#height=SOLUTIONHEIGHTB1);

            return;
         }

         // Person on all "A" in each room.
         if bAllAA AND bAllBA
         {
            Send(oRoomA,@DoSolution,#height=SOLUTIONHEIGHTA3);
            Send(self,@DoSolution,#height=SOLUTIONHEIGHTB3);

            return;
         }

         // Person on all "B" in each room.
         if bAllAB AND bAllBB
         {
            Send(oRoomA,@DoSolution,#height=SOLUTIONHEIGHTA2);
            Send(self,@DoSolution,#height=SOLUTIONHEIGHTB2);
            return;
         }

         // None of the above
         Send(oRoomA,@DoSolution,#height=SOLUTIONHEIGHTA1);
         Send(self,@DoSolution,#height=SOLUTIONHEIGHTB1);
      }
      return;
   }

   ResetPuzzle()
   {
      ptPuzzle = $;

      Send(Send(SYS,@FindRoomByNum,#num=RID_ORC_PIT_A),@DoSolution,
            #Height=REGULARHEIGHTA,#Speed=50);
      Send(self,@DoSolution,#Height=REGULARHEIGHTB,#Speed=50);
      if Send(poSwitch,@GetState) = LEVER_UP
      {
         Send(poSwitch,@SwitchLever);
      }

      return;
   }

   DoSolution(height=500,speed=50)
   {
      Send(self,@setsector,#sector=SOLUTIONSECTOR,#animation=ANIMATE_FLOOR_LIFT,
            #height = height,#speed=speed);

      return;
   }

   NumInChamber()
   {
      local i, each_obj, count, iRow, iCol;

      count = 0;

      foreach i in plActive
      {
         each_obj = First(i);

         iRow = Send(each_obj,@GetRow);
         iCol = Send(each_obj,@GetCol);

         if iRow > 43
            AND iCol > 24
            AND iRow < 53
            AND iCol < 34
            AND IsClass(each_obj,&User)
         {
            ++count;
         }
      }

      return count;
   }

   AllAUsed()
   {
      local i, each_obj, iRow, iCol, bAOne, bATwo;

      bAOne = FALSE;
      bATwo = FALSE;

      foreach i in plActive
      {
         each_obj = First(i);

         iRow = Send(each_obj,@GetRow);
         iCol = Send(each_obj,@GetCol);

         if iRow = 45
            AND iCol = 29
            AND IsClass(each_obj,&User)
         {
            bAOne = TRUE;
         }

         if iRow = 51
            AND iCol = 29
            AND IsClass(each_obj,&User)
         {
            bATwo = TRUE;
         }
      }

      return (bAOne and bATwo);
   }

   AllBUsed()
   {
      local i, each_obj, count, iRow, iCol, bBOne, bBTwo, bBThree, bBFour;

      bBOne = FALSE;
      bBTwo = FALSE;
      bBThree = FALSE;
      bBFour = FALSE;

      foreach i in plActive
      {
         each_obj = First(i);

         iRow = Send(each_obj,@GetRow);
         iCol = Send(each_obj,@GetCol);

         if (iRow = 46 AND iCol = 28) AND IsClass(each_obj,&User)
         {
            bBOne = TRUE;
         }
         if (iRow = 46 AND iCol = 30) AND IsClass(each_obj,&User)
         {
            bBTwo = TRUE;
         }
         if (iRow = 50 AND iCol = 28) AND IsClass(each_obj,&User)
         {
            bBThree = TRUE;
         }
         if (iRow = 50 AND iCol = 30) AND IsClass(each_obj,&User)
         {
            bBFour = TRUE;
         }
      }

      return (bBOne AND bBTwo AND bBThree AND bBFour);
   }

end
////////////////////////////////////////////////////////////////////////////////
