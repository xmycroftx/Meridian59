// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Kriipa is Monster

constants:

   include blakston.khd

   FRAME_STAND_CANOPY = 1
   FRAME_STAND = 2  
   FRAME_JUMPUP_START = 3
   FRAME_JUMPUP_END = 6
   FRAME_JUMPDOWN_START = 6
   FRAME_JUMPDOWN_END = 10

   FRAME_WALK_START = 11
   FRAME_WALK_END = 15
   FRAME_ATTACK_START = 16
   FRAME_ATTACK_END = 20

   ANIM_JUMPUP = 2
   ANIM_JUMPDOWN = 3

   STATE_JUMPINGDOWN = 0
   STATE_ONROOF = 1
   STATE_READY = 2
   STATE_JUMPINGUP = 3

resources:

   include kriipa.lkod

   Kriipa_name_rsc = "kriipa"
   Kriipa_icon_rsc = kriipa.bgf
   Kriipa_desc_rsc = \
      "This spindly-legged creature scuttles along the jungle canopy in "
      "search of unsuspecting prey, which includes just about everything that "
      "moves. Island travellers are warned to keep careful watch above, for "
      "the deadly grinning lizards have been known to decapitate a grown man "
      "in a single blow with their dagger-sharp claws."

   Kriipa_dead_icon_rsc = kriipaX.bgf
   Kriipa_dead_name_rsc = "slain Kriipa"

   Kriipa_sound_hit = kr_atkm.ogg
   Kriipa_sound_miss = kr_atkm.ogg
   Kriipa_sound_death = kr_dth.ogg
   Kriipa_sound_aware = kr_awr.ogg

   kriipa_cant_attack = "The kriipa is out of your reach!"

classvars:

   vrName = Kriipa_name_rsc
   vrIcon = Kriipa_icon_rsc
   vrDesc = Kriipa_desc_rsc
   vrDead_icon = Kriipa_dead_icon_rsc
   vrDead_name = Kriipa_dead_name_rsc
 
   viTreasure_type = TID_KRIIPA
   viAttack_type = ATK_TYPE_SLASH

   viSpeed = SPEED_FAST
   viDefault_behavior = AI_FIGHT_AGGRESSIVE
   viLevel = 160
   viDifficulty = 6
   viBonusAgility = 20
   viMeleeRange = 128
   viVisionDistance = 20
   viSocial = 1
   viKarma = -50
   viWimpy = 2
   viCashmin = 500
   viCashmax = 1150
   vrSound_hit = Kriipa_sound_hit
   vrSound_miss = Kriipa_sound_miss
   vrSound_aware = Kriipa_sound_aware
   vrSound_death = Kriipa_sound_death

   viBleedChance = 20
   viBleedStrength = 2500
   viBleedDuration = 8000
   vbCanSiphon = FALSE

properties:

   piAnimation = ANIM_NONE
   piRoofState = STATE_ONROOF
   ptCanopy = $

messages:

   Constructed()
   {
      plResistances = [ [-SPL_TYPE_COLD, 30 ],
                        [-SPL_TYPE_SHOCK, -20 ],
                        [-SPL_TYPE_FIRE, 30 ],
                        [ATK_TYPE_SLASH, -25 ],
                        [ATK_TYPE_NERUDITE, -25 ]
                      ];

      propagate;
   }

   GetObjectFlags()
   {
      if (piRoofState = STATE_ONROOF)
      {
         return OF_HANGING | OF_ATTACKABLE;
      }

      propagate;
   }

   GetMoveOnType()
   {
      if (piRoofState = STATE_ONROOF)
      {
         return MOVEON_YES;
      }

      propagate;
   }

   CanMonsterFight(who=$,oStroke=$)
   {
      if piRoofState = STATE_ONROOF
      {
         if (oStroke = $)
            OR NOT (Send(oStroke,@IsRangedAttack)
               OR IsClass(oStroke,&Spell))
         {
            if IsClass(who,&User)
            {
               Send(who,@MsgSendUser,#message_rsc=kriipa_cant_attack);
            }

            return FALSE;
         }
      }

      return TRUE;
   }

   MonsterJumpUp(what = $)
   {
      piAnimation = ANIM_JUMPUP;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   MonsterJumpDown(what = $)
   {
      piAnimation = ANIM_JUMPDOWN;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,200,2,FRAME_WALK_START,2,FRAME_WALK_END);

      return;
   }

   MonsterCombatAction(distance=0,sight=TRUE)
   "Kriipas have special attack patterns, which are handled here."
   {
      local i, iPriority, lActions, lAction, iNum, oSpell, 
         iMana, iVigor, iFactor, iSpellPower, lTargets, iDelay, bStateChange;

      lActions = $;

      // Given distance is 3D, but we can jump down so use 2D distance if
      // we're on the roof.
      if (poTarget <> $
         AND piRoofState = STATE_ONROOF)
      {
         distance = Send(self,@SquaredFineDistanceTo,#what=poTarget);
      }

      // If we have sight, proceed as usual, else, only allow moving.
      if sight
      {
         // Sort out any actions in our action list that can't reach the
         // target or that we don't have the resources for.
         foreach i in plActions
         {
            if Nth(i,2) < piMana
               AND Nth(i,4) > distance
            {
               lActions = Cons(i,lActions);
            }
         }
      }
      else
      {
         // Can't see the target, let's try to move towards it.
         foreach i in plActions
         {
            if First(i) = SKID_MINIMUM
            {
               lActions = Cons(i,lActions);
            }
         }
      }

      // Double check if the monster can perform basic actions.
      foreach i in lActions
      {
         iNum = First(i);

         if iNum = SKID_MINIMUM
         {
            if (piBehavior & AI_NOMOVE) OR (piBehavior & AI_CORNERED)
            {
               lActions = DelListElem(lActions,i);
               Send(self,@SetBehaviorFlag,#flag=AI_CORNERED,#value=FALSE);
            }
         }
         else if (piBehavior & AI_NOFIGHT)
         {
            lActions = DelListElem(lActions,i);
         }
         else if ((iNum = SKID_FIRE) AND (distance <= piMeleeRange*piMeleeRange))
         {
            lActions = DelListElem(lActions,i);
         }
      }

      // If no actions made it through our check, quit here.
      if lActions = $
      {
         return FALSE;
      }

      // Time for an attack check.
      if iNum <> SKID_MINIMUM
         AND NOT Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,#use_weapon=self)
      {
         return FALSE;
      }

      // We are allowed to attack and got a pool of actions.
      // Compare priorities to decide for one.
      iPriority = MIN_KOD_INT;
      foreach i in lActions
      {
         if Nth(i,5) >= iPriority
         {
            lAction = i;
            iPriority = Nth(i,5);
         }
      }

      // We have our action at this point, let's check its ID.
      iNum = First(lAction);

      // If we are on the roof and attacking, jump down.
      // If we are on the ground and moving, jump up.
      bStateChange = FALSE;

      if iNum = SKID_MINIMUM
      {
         if piRoofState = STATE_READY AND ptCanopy = $
         {
            Send(Self,@MonsterJumpUp);
            bStateChange = TRUE;
            ptCanopy = CreateTimer(self,@CanopySwitch,600);
         }
      }
      else
      {
         if piRoofState = STATE_ONROOF
         {
            Send(Self,@MonsterJumpDown);
            bStateChange = TRUE;
            Send(Self,@CanopySwitch);
         }
      }

      // It's clear we will be acting now. Get our action delay.
      iDelay = Send(self,@GetAttackTime);

      // We move. No delay passed on.
      if (iNum = SKID_MINIMUM)
      {
         iDelay = bStateChange * 600;
      }
      // Standard melee attack. Let's initiate the attack.
      else
      {
         if NOT Send(self,@TryAttack,#what=poTarget,#stroke_obj=self,#ambush=bStateChange)
         {
            return FALSE;
         }
         // We actually attack. Do the animation if we're still around.
         else if poOwner <> $
         {
            Send(self,@DoMeleeAnimation);
         }
      }

      // We did something. Pay the cost.
      iVigor = Nth(lAction,3);
      Send(self,@LoseVigor,#amount=iVigor,#precision=TRUE);

      return iDelay;
   }

   CanopySwitch()
   {
      ptCanopy = $;

      if poOwner <> $
      {
         if piRoofState = STATE_ONROOF
         {
            piRoofState = STATE_READY;
            Send(self,@InstantFall);
         }
         else
         {
            piRoofState = STATE_ONROOF;
         }

         Send(poOwner,@SomethingChanged,#what=self);
         Send(self,@UpdateHeight);
      }

      return;
   }

   ////  State Transition Functions
   
   EnterStateLimbo()
   {
      if piRoofState = STATE_READY AND ptCanopy = $
      {
         Send(Self,@MonsterJumpUp);
         ptCanopy = CreateTimer(self,@CanopySwitch,600);
      }

      propagate;
   }

   EnterStateWait()
   {
      if piRoofState = STATE_READY AND ptCanopy = $
      {
         Send(Self,@MonsterJumpUp);
         ptCanopy = CreateTimer(self,@CanopySwitch,600);
      }

      propagate;
   }

   EnterStateMove()
   {
      if piRoofState = STATE_READY AND ptCanopy = $
      {
         Send(Self,@MonsterJumpUp);
         ptCanopy = CreateTimer(self,@CanopySwitch,600);
      }

      propagate;
   }

   EnterStateRest()
   {
      if piRoofState = STATE_READY AND ptCanopy = $
      {
         Send(Self,@MonsterJumpUp);
         ptCanopy = CreateTimer(self,@CanopySwitch,600);
      }

      propagate;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK 
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,FRAME_ATTACK_START,2,
                   FRAME_ATTACK_END,2,FRAME_STAND);

         return;
      }

      if piAnimation = ANIM_JUMPUP
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,FRAME_JUMPUP_START,2,
                   FRAME_JUMPUP_END,2,FRAME_STAND_CANOPY);

         return;
      }

      if piAnimation = ANIM_JUMPDOWN
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,FRAME_JUMPDOWN_START,2,
                   FRAME_JUMPDOWN_END,2,FRAME_STAND);

         return;
      }

      // if no body animation
      if piRoofState = STATE_ONROOF
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_STAND_CANOPY);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_STAND);
      }

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   Delete()
   {
      if ptCanopy <> $
      {
         DeleteTimer(ptCanopy);
         ptCanopy = $;
      }

      propagate;
   }

   CanBeWebbed()
   {
      return FALSE;
   }

   CanBeTangled()
   {
      return FALSE;
   }

   IsArenaMonster()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
