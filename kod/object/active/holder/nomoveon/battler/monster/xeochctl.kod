// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Xeochicatl is Monster

constants:

   include blakston.khd

   // Percent chance to drain mana with an attack.
   DRAIN_CHANCE = 50
   // Percent chance to resist a spell
   MAGIC_RESIST = 30

   // Cast spell animation.
   ANIM_CAST = 2

   FRAME_STAND = 1
   FRAME_FLY = 2
   FRAME_ATTACK_START = 3
   FRAME_ATTACK_END = 6
   FRAME_CAST_START = 7
   FRAME_CAST_END = 10

   // What's the maximum number of walls allowed?
   MAX_WALLS = 2

resources:

   include xeochctl.lkod

   Xeochicatl_name_rsc = "Xeochicatl"
   Xeochicatl_koc_name_rsc = "Xeo'chicatl"
   Xeochicatl_icon_rsc = Xeo.bgf
   Xeochicatl_desc_rsc = \
      "Before you is a Xeochicatl, a fearsome monster given life by the "
      "chaotic magic of the Meridian.  The Xeochicatl is the embodiment of "
      "destruction, a violent monster that seems uncontrollable.  These "
      "monsters feed off of the magic of the lands which makes them very "
      "powerful.  Rumors abound about the origin of these monsters, but you "
      "have little time to contemplate these rumors in the presence of such "
      "destructive power!"

   Xeochicatl_dead_icon_rsc = XeoX.bgf
   Xeochicatl_dead_name_rsc = "slain xeochicatl"

   Xeochicatl_sound_attack = xeoatk.ogg  
   Xeochicatl_sound_death = xeodie.ogg  
   Xeochicatl_sound_aware = xeo1awr.ogg

   Xeochicatl_drain_rsc = "The %s drains your mana!"

classvars:

   vrName = Xeochicatl_name_rsc
   vrDesc = Xeochicatl_desc_rsc
   vrKocName = Xeochicatl_koc_name_rsc
   vrIcon = Xeochicatl_icon_rsc
   vrDead_icon = Xeochicatl_dead_icon_rsc
   vrDead_name = Xeochicatl_dead_name_rsc

   viTreasure_type = TID_NONE
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_SWITCHALOT | AI_MOVE_WALKTHROUGH_WALLS
   viAttack_type = ATK_TYPE_MAGIC
   viLevel = 150
   viDifficulty = 8
   viVisionDistance = 60
   // Attack range of 192, or 3 row/col.
   viMeleeRange = 3 * FINENESS
   viSpeed = SPEED_FASTER
   viKarma = 0

   viSiphonChance = 50
   viSiphonStrength = 4000
   viSiphonDuration = 5000

   vbCanPoison = FALSE
   vbCanBleed = FALSE
   vbCanFatigue = FALSE
   vbCanBurn = TRUE

   vrSound_hit = Xeochicatl_sound_attack
   vrSound_miss = Xeochicatl_sound_attack
   vrSound_aware = Xeochicatl_sound_aware
   vrSound_death = Xeochicatl_sound_death

   viCashMin = 0
   viCashMax = 0

   viAttributes = MOB_ONE_TREASURE

   viBonusXP = 100
   viBonusTP = 5

properties:

   piAnimation = ANIM_NONE
   piMax_Mana = 60

   piSpellPower = 99

   // is this Xeochicatl part of a node attack?
   pbNodeAttack = FALSE

   piColor_Translation = 0

   piReputationGroup = REP_HERETIC

messages:

   Constructor(InAttack=FALSE)
   {
      pbNodeAttack = InAttack;
      // This makes the Xeos not affect Karma if set to true.
      pbDontDispose = InAttack;

      propagate;
   }

   SendMoveAnimation()
   {
      if (piColor_Translation <> 0)
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piColor_Translation);
      }

      AddPacket(1,ANIMATE_NONE,2,FRAME_FLY);

      return;
   }

   SendAnimation()
   {
      if (piColor_Translation <> 0)
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piColor_Translation);
      }

      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,150, 2,FRAME_ATTACK_START,
                   2,FRAME_ATTACK_END, 2,FRAME_FLY);
                   
         return;
      }

      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE, 4,150, 2,FRAME_CAST_START,
                   2,FRAME_CAST_END, 2,FRAME_FLY);
                   
         return;
      }

      // If no body animation
      AddPacket(1,ANIMATE_NONE, 2,FRAME_FLY);

      return;
   }

   EndAttack()
   {
      pbNodeAttack = FALSE;

      return;
   }

   IsAlliedClass(what=$)
   {
      if IsClass(what,&Xeochicatl)
      {
         return TRUE;
      }

      propagate;
   }

   Killed()
   {
      if pbNodeAttack
      {
         Post(Send(SYS,@GetNodeAttack),@XeoKilled);

         // So we don't double send to NodeAttack in Delete().
         // Probably safe to just call XeoKilled from Delete?
         // In any case, pbNodeAttack isn't used for anything
         // else after this.
         pbNodeAttack = FALSE;
      }

      propagate;
   }

   // If we delete a xeo accidentally during a node attack
   // we need to make sure the attack records it as dying
   Delete()
   {
      if pbNodeAttack
      {
         Post(Send(SYS,@GetNodeAttack),@XeoKilled);
      }

      propagate;
   }

   MonsterCastAnimation(oSpell=$)
   "If a monster has a special cast animation, call this."
   {
      piAnimation = ANIM_CAST;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   CanBeSilenced()
   "Xeochicatl cannot be silenced by the room enchantment."
   {
      return FALSE;
   }

   SpellResist(oSpell=$,who=$,iSpellpower=$)
   {
      local iResistChance;

      if IsClass(who,&DM)
      {
         return FALSE;
      }

      if Send(oSpell,@IsHarmful)
      {
         iResistChance = MAGIC_RESIST;
         if IsClass(oSpell,&Dazzle)
            OR IsClass(oSpell,&Blind)
            OR IsClass(oSpell,&Hold)
         {
            // 3 times the chance to resist.  Brings 30// up to 90//
            iResistChance = (iResistChance * 3);
         }

         if iSpellPower < 40
            OR Random(0,100) < iResistChance
         {
            return TRUE;
         }
      }

      propagate;
   }

   CanBeWebbed()
   {
      return FALSE;
   }

   IsArenaMonster()
   {
      return FALSE;
   }
   
end
////////////////////////////////////////////////////////////////////////////////
