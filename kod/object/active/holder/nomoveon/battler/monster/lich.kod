// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Lich is Monster

constants:

   include blakston.khd
   include protocol.khd

   LICH_ILLUSION_TIME = 5 * 60 * 1000  // five minutes
   MAGIC_RESIST = 60

resources:

   include lich.lkod

   lich_pretty_name_rsc = "Queen Venya'cyr"
   lich_pretty_icon_rsc = licha.bgf
   lich_pretty_desc_rsc = \
      "A noble woman of stunning beauty, Queen Venya'cyr carries herself with "
      "a refined demeanor hardly still seen in this day and age.  You can't "
      "help but marvel at how she has managed to keep her beautiful face so "
      "young and vibrant through all of these centuries."
   lich_name_rsc = "Queen Venya'cyr"
   lich_icon_rsc = lichb.bgf
   lich_desc_rsc = \
      "Through some dark pact made ages ago, Queen Venya'cyr's ghastly corpse "
      "has been kept alive by dark magicks.  Sheer power emanates forcibly "
      "from her eyes, an intense gaze which strikes fear into your heart.  "
      "The centuries have apparently taken their toll on her physical form, "
      "however, as her skin is a mess of rotting flesh writhing with worms.  "

   lich_dispel = \
      "The foul lich queen's ghastly appearance is revealed for all to see!"
   lich_respel = \
      "The lich queen's ghastly appearance is once more cloaked in illusion."

   lich_dead_icon_rsc = lichbx.bgf
   lich_dead_name_rsc = "The ghost of Queen Venya'cyr"

   lich_sound_miss = lich_atk.ogg
   lich_sound_death = lich_dth.ogg
   lich_sound_aware = lich_awr.ogg

   lich_cast_sound = necro01.ogg

   lich_death_blow = \
      "Your final blow has banished the foul Queen Venya'cyr from this "
      "plane of reality!"
   lich_single_killer = \
      "You have personally banished the foul Queen Venya'cyr from this "
      "plane of reality!"
   lich_double_killer = \
      "The foul Lich Queen has been driven from this plane of reality, "
      "thanks to you and your comrade!"
   lich_helper_killer = \
      "The foul Lich Queen has been driven from this plane of reality, "
      "thanks to you and your comrades!"

   lich_blank = ""
   lich_comma = ", "
   lich_and = " and "
   lich_has = "has"
   lich_have = "have"
   lich_killed_world_saved = \
      "~B%s has struck down the Dark Queen Venya'cyr, ridding Meridian of "
      "the evil Order of Necromancers!\nThanks to %q%s%q, the good citizens "
      "of Meridian can walk the land in safety once again, knowing that "
      "%q%s%q %s perished along with the undead queen."
   lich_killed_world_saved_nolich = \
      "~B%s has struck down the last of the Order of Necromancers, "
      "ridding Meridian of their evil!"

   lich_spit = lightnin.bgf

   lich_tribute_trigger = "tribute"
   lich_hunger_trigger = "hunger"

   lich_hunger_5 = \
      "~rMy hunger is a burning coal within my breast!  Feed me at once!"
   lich_hunger_4 = \
      "~rI hunger very greatly!  The Order has been negligent in its duties "
      "to me.  Feed me at once!"
   lich_hunger_3 = \
      "~rI am very hungry.  Feed me, my minion."
   lich_hunger_2 = \
      "~rI am hungry.  I would like to feed soon."
   lich_hunger_1 = \
      "~rI am only slightly hungry at present."
   lich_hunger_0 = \
      "~rI am satisfied.  The Order serves me well."

   lich_not_powerful = \
      "~kQueen Venya'cyr says, \"~rYour feeble mind is incapable of learning "
      "such powerful magics.\""
   lich_not_order = \
      "~kQueen Venya'cyr says, \"~rOnly my servants are granted this "
      "mighty boon.\""

   lich_darkbolt = gob_low.bgf

classvars:

   vrName = lich_pretty_name_rsc
   vrIcon = lich_pretty_icon_rsc
   vrDesc = lich_pretty_desc_rsc
   vrName2 = lich_name_rsc
   vrIcon2 = lich_icon_rsc
   vrDesc2 = lich_desc_rsc
   vrDead_icon = lich_dead_icon_rsc
   vrDead_name = lich_dead_name_rsc
   viDefinite = ARTICLE_NONE
   viIndefinite = ARTICLE_NONE
   viGender = GENDER_FEMALE

   viTreasure_type = TID_LICH
   viSpeed = SPEED_FAST
   viSpell_type = SPL_TYPE_UNHOLY
   viLevel = 200
   viDifficulty = 9
   viVisionDistance = 60
   // Attack range of 192, or 3 row/col.
   viMeleeRange = 128
   viFireRange = 320
   vbSpin = TRUE
   viSpinAnimationTime = 200
   viKarma = -100
   vbIsUndead = TRUE
   viDefault_behavior = \
      AI_FIGHT_AGGRESSIVE | AI_FIGHT_HYPERAGGRESSIVE \
      | AI_MOVE_FLEE_FRIGHTENERS | AI_FIGHT_THROUGH_WALLS | AI_FIGHT_SWITCHALOT

   viAttributes = MOB_LISTEN | MOB_RECEIVE | MOB_TEACHER
   viOccupation = MOB_ROLE_SCHOLAR

   vrSound_miss = lich_sound_miss
   vrSound_aware = lich_sound_aware
   vrSound_death = lich_sound_death

   vrTributeTrigger = lich_tribute_trigger
   vrHungerTrigger = lich_hunger_trigger

   // Some monster classes may cause drain effects or poison their enemy.
   viPoisonChance = 5
   viPoisonStrength = 1000
   viPoisonDuration = 3600000
   // Percentage of poison strength affecting each resource.
   viPoisonHealth = 100
   viPoisonVigor = 20
   viBleedChance = 20
   viBleedStrength = 4000
   viBleedDuration = 4000
   viMovePriority = 300
   viPowerLevel = 200

   vbCanPoison = FALSE
   vbCanBleed = FALSE

   // Very, very used to dark places.
   viNightVision = 255

properties:

   piAnimation = ANIM_NONE
   plAttackers = $  // [player,player....]

   plTempRoster = $
   
   pbIllusioned = TRUE
   ptGoIllusioned = $

   ptDeathSequence = $
   piDeathSequenceTimestep = 200  // milliseconds

   piReputationGroup = REP_LICH

   piSkeleton = 0

messages:

   Constructed()
   {
      // Keep the scenario deactivated for now.
      //Send(Send(SYS,@GetNecromancerBalance),@ActivateScenario);

      piMax_Health = piMax_Health * 2;
      piHealth = piMax_Health * 100;

      plResistances = [ [-SPL_TYPE_ALL, 60],
                        [ATK_TYPE_ALL, 60],
                        [ATK_TYPE_NERUDITE, -20 ],
                        [ATK_TYPE_BLUDGEON, -20 ],
                        [ATK_TYPE_SILVER, -60 ],
                        [-SPL_TYPE_COLD, 90],
                        [-SPL_TYPE_UNHOLY, 90 ],
                        [-SPL_TYPE_ACID, 30 ],
                        [-SPL_TYPE_SHOCK, -20],
                        [-SPL_TYPE_FIRE, -20 ],
                        [-SPL_TYPE_HOLY, -40 ],
                        [-SPL_TYPE_HUNTERSWORD, -90 ]
                      ];

      plReputationEnemies = [REP_FAROL];

      plActions =  [ [SID_VAMPIRIC_DRAIN,100,0,65536,0,200,99,COMBAT_ACTION_HARM],
                     [SID_HOLD,100,0,16384,0,600,99,COMBAT_ACTION_HARM],
                     [SID_BLIND,500,0,MAX_KOD_INT,0,1200,99,COMBAT_ACTION_HARM],
                     [SID_CURSE_WEAPON,200,0,16384,0,600,99,COMBAT_ACTION_HARM],
                     [SID_DARKNESS,0,0,MAX_KOD_INT,1000,0,99,COMBAT_ACTION_NEUTRAL] ];

      propagate;
   }

   SetForSale()
   {
      plFor_sale = [ $, $, $, $ ];

      return;
   }

   GetIcon()
   {
      if pbIllusioned
      {
         return vrIcon;
      }

      return vrIcon2;
   }

   GetName()
   {
      if pbIllusioned
      {
         return vrName;
      }

      return vrName2;
   }

   GetApparentName()
   {
      if pbIllusioned
      {
         return vrName;
      }

      return vrName2;
   }

   ShowDesc()
   {
      if pbIllusioned
      {
         AddPacket(4,vrDesc);

         return;
      }

      AddPacket(4,vrDesc2);

      return;
   }

   DispelIllusionEnchantments()
   {
      if NOT pbIllusioned
      {
         return;
      }

      Post(poOwner,@SomeoneSaid,#what=self,#string=lich_dispel,
            #type=SAY_MESSAGE);

      pbIllusioned = FALSE;
      Send(poOwner,@SomethingChanged,#what=self);

      if ptGoIllusioned <> $
      {
         DeleteTimer(ptGoIllusioned);
         ptGoIllusioned = $;
      }

      ptGoIllusioned = CreateTimer(self,@ReplaceIllusions,LICH_ILLUSION_TIME);

      return;
   }

   ReplaceIllusions()
   {
      ptGoIllusioned = $;

      if pbIllusioned
      {
         return;
      }

      Post(poOwner,@SomeoneSaid,#what=self,#string=lich_respel,
            #type=SAY_MESSAGE);

      pbIllusioned = TRUE;
      Send(poOwner,@SomethingChanged,#what=self);

      return;
   }

   Delete()
   {
      plAttackers = $;

      if ptGoIllusioned <> $
      {
         DeleteTimer(ptGoIllusioned);
         ptGoIllusioned = $;
      }

      if ptDeathSequence <> $
      {
         DeleteTimer(ptDeathSequence);
         ptDeathSequence = $;
         Send(self,@DeathSequence2);
      }

      propagate;
   }

   AssessDamage(what = $,damage = $,atype = 0, stype= 0,bonus = 0)
   "This is called when something causes damage to us."
   {
      if (NOT FindListElem(plAttackers,what))
      {
         plAttackers = Cons(what,plAttackers);
      }

      propagate;
   }

   SomethingMoved()
   "Delete walls around us."
   {
      if poOwner <> $
      {
         Send(poOwner,@DeleteWallsAroundBattler,#who=self);
      }

      propagate;
   }

   MonsterCombatAction(distance=0,sight=TRUE)
   "Figure out what the monster is going to attack with."
   "Depending on our action, return an appropriate delay."
   {
      local i, iPriority, lActions, lAction, iNum, oSpell, iAttacks,
         iMana, iVigor, iFactor, iSpellPower, lTargets, iDelay, iPowerLevel,
         oTarget, iAction;

      // If we have sight, proceed as usual, else, only allow moving.
      if sight
      {
         // Sort out any actions in our action list that can't reach the
         // target or that we don't have the resources for.
         foreach i in plActions
         {
            if Nth(i,2) < piMana
               AND Nth(i,4) > distance
            {
               lActions = Cons(i,lActions);
            }
         }
      }
      else
      {
         // Can't see the target, let's try to move towards it.
         foreach i in plActions
         {
            if First(i) = SKID_MINIMUM
            {
               lActions = Cons(i,lActions);
            }
         }
      }

      // Double check if the monster can perform basic actions.
      foreach i in lActions
      {
         iNum = First(i);

         if iNum = SKID_MINIMUM
         {
            if (piBehavior & AI_NOMOVE) OR (piBehavior & AI_CORNERED)
            {
               lActions = DelListElem(lActions,i);
               Send(self,@SetBehaviorFlag,#flag=AI_CORNERED,#value=FALSE);
            }
         }
         else if (piBehavior & AI_NOFIGHT)
         {
            lActions = DelListElem(lActions,i);
         }
         else if ((iNum = SKID_FIRE) AND (distance <= piMeleeRange*piMeleeRange))
         {
            lActions = DelListElem(lActions,i);
         }
         else if ((iNum = SKID_SPIN) AND (Length(Send(self,@GetTargetsInRange)) < 2))
         {
            lActions = DelListElem(lActions,i);
         }
      }

      // Check the actual spells in our action list for castability.
      foreach i in lActions
      {
         iNum = First(i);
         if iNum < SKID_MINIMUM
         {
            oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
            lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=[poTarget]);
            if NOT Send(oSpell,@CanPayMonsterCosts,#who=self,#lTargets=lTargets,
                        #iSpellPower=iSpellPower)
               OR NOT Send(poOwner,@ReqSpellCast,#who=self,#oSpell=oSpell,
                           #lItems=lTargets)
            {
               lActions = DelListElem(lActions,i);
            }
         }
      }

      // If no actions made it through our check, quit here.
      if lActions = $
      {
         return FALSE;
      }

      // Time for an attack check.
      if iNum <> SKID_MINIMUM
         AND NOT Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,
                     #use_weapon=self)
      {
         return FALSE;
      }

      // We are allowed to attack and got a pool of actions.
      // Compare priorities to decide for one.
      iPriority = MIN_KOD_INT;
      foreach i in lActions
      {
         if Nth(i,5) >= iPriority
         {
            lAction = i;
            iPriority = Nth(i,5);
         }
      }

      // We have our action at this point, let's check its ID.
      iNum = First(lAction);

      // It's clear we will be acting now. Get our action delay.
      iDelay = Send(self,@GetAttackTime);

      // Standard melee attack. Let's initiate the attack.
      if (iNum = SKID_SLASH) OR (iNum = SKID_PUNCH)
      {
         iAttacks = 100 + viBonusSwing;
         i = 0;

         while (iAttacks > 0)
            AND poTarget <> $
            AND Send(poTarget,@GetOwner) <> $
         {
            if (Random(1,100) <= iAttacks)
               AND Send(self,@TryAttack,#what=poTarget,#stroke_obj=self,
                        #factor=Nth(lAction,7))
            {
               ++i;
            }

            iAttacks -= 100;
         }

         if i = 0
         {
            return FALSE;
         }
         else if poOwner <> $
         {
            // We actually attack. Do the animation if we're still around.
            Send(self,@DoMeleeAttack,#swings=i);
         }
      }
      // If we are a ranged attack, shoot something.
      else if (iNum = SKID_FIRE)
      {
         iAttacks = 100 + viBonusShot;
         i = 0;

         while (iAttacks > 0)
            AND poTarget <> $
            AND Send(poTarget,@GetOwner) <> $
         {
            if (Random(1,100) <= iAttacks)
               AND Send(self,@TryAttack,#what=poTarget,#stroke_obj=self,
                        #factor=Nth(lAction,7))
            {
               ++i;
            }

            iAttacks -= 100;
         }

         if i = 0
         {
            return FALSE;
         }
         else if poOwner <> $
         {
            // We actually attack. Do the animation if we're still around.
            Send(self,@DoMissileAttack,#shots=i);
         }
      }
      // We're doing a spinning area effect attack! Fancy!
      else if (iNum = SKID_SPIN)
      {
         iAttacks = 100 + viBonusSpin;
         i = 0;
         lTargets = Send(self,@GetTargetsInRange);

         while (iAttacks > 0)
         {
            if (Random(1,100) <= iAttacks)
            {
               Send(poOwner,@SomeoneSaid,#what=self,#string=Lm_monster_spin,
                  #type=SAY_MESSAGE,#parm1=Send(self,@GetCapDef),
                  #parm2=Send(self,@GetName));

               foreach oTarget in lTargets
               {
                  if oTarget <> $ AND Send(oTarget,@GetOwner) <> $
                  {
                     Send(self,@TryAttack,#what=oTarget,#stroke_obj=self,
                           #factor=Nth(lAction,7));
                  }
               }

               ++i;
            }

            iAttacks -= 100;
         }

         if poOwner <> $
         {
            // We spun around i times. Let's animate it.
            Send(self,@DoSpinAttack,#spins=i);
         }

         iDelay *= 2;
      }
      // Looks like we are casting something. How exciting!
      // Time to set our local variables.
      else if iNum < 400
      {
         oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
         lTargets = [poTarget];
         lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=lTargets);
         iSpellPower = piSpellPower + Nth(lAction,7);

         // Do any special cast animations; send spell for specific ones.
         // Also, make sure we're still around.
         if poOwner <> $
         {
            // Not facing the target when casting at them is rude. Let's be polite.
            Send(self,@MonsterOrient,#new_row=Send(poTarget,@GetRow),
                  #new_col=Send(poTarget,@GetCol),#new_finerow=Send(poTarget,@GetFineRow),
                  #new_finecol=Send(poTarget,@GetFineCol),#face_target=TRUE);
            Send(self,@MonsterCastAnimation,#iSpellNum=iNum);
         }

         // We are almost ready to cast the spell, only a spell resist can
         // save the victim now.
         if (Length(lTargets) = 1)
            AND NOT Send(poTarget,@SpellResist,#oSpell=oSpell,#who=self,
                        #iSpellpower=iSpellPower)
         {
            // Monsters don't necessarily cast at the same power level as
            // players. Calculate power percentage here.
            if viPowerLevel <> $
            {
               iPowerLevel = viPowerLevel;
            }
            else
            {
               iPowerLevel = Bound(piMysticism + piIntellect + viLevel,$,300) / 3;
            }

            // Cast the spell.
            Send(oSpell,@CastSpell,#who=self,#lTargets=lTargets,
               #iSpellPower=iSpellPower,#iPowerLevel=iPowerLevel);
         }

         // Speed caster!
         iDelay = 1500;

         // We cast something. Let's check if we want to switch targets.
         if poTarget <> $
         {
            Send(self,@FindNewTarget);
         }
      }
      // If none of the above was true, we simply moved.
      else
      {
         iDelay = FALSE;
      }

      // We did something. Pay the cost.
      iMana = Nth(lAction,2);
      iVigor = Nth(lAction,3);
      Send(self,@LoseMana,#amount=iMana,#precision=TRUE);
      Send(self,@LoseVigor,#amount=iVigor,#precision=TRUE);

      // If we made it this far, we acted in some way. Adjust our priorities.
      iFactor = Nth(lAction,6);

      foreach i in plActions
      {
         iAction = First(i);

         // Spells lose priorty when cast and gain priority
         // when another action is taken. Amount of priority
         // lost is unique to each spell, amount of priority
         // gained depends on mysticism.
         if iAction < 400
         {
            if iAction = iNum
            {
               SetNth(i,5,Bound(iPriority - iFactor,-10000,$));
            }
            else
            {
               SetNth(i,5,Bound(Nth(i,5)+(iDelay/50)+(distance/1000),$,1000));
            }
         }
      }

      return iDelay;
   }

   ////  Action Routines
   EngageTimer( timer = $ )
   "We're trying to engage our target, so either we keep"
   "chasing, or we attack. Note that even if we can't move,"
   "we can still be 'engaging'...."
   {
      local i,oVictim, iDistance, iChaseRange, iDelay, bSight;
      oVictim = poTarget;

      Send(self,@ClearBehavior,#timer=timer);

      // Sanity checks
      if poOwner = $
      {
         Debug("Unreachable. Null owner.");
         Send(self,@EnterStateLimbo);

         return;
      }

      // If target left, we should already know
      if oVictim = $
      {
         //Debug("Unreachable. Null victim.");
         Send(self,@EnterStateWait);

         return;
      }

      // Victim phased out or is now in spectator mode, break aggro.
      if IsClass(oVictim,&User)
         AND Send(oVictim,@IsInCannotInteractMode)
      {
         Send(self,@EnterStateMove);

         return;
      }

      // Get distance to target.
      iDistance = Send(self,@SquaredFineDistanceTo3D,#what=oVictim);
      bSight = Send(poOwner,@LineOfSight,#obj1=self,#obj2=oVictim);
      iChaseRange =  20 * FINENESS;
      iChaseRange = iChaseRange * Random(40,50) / 100;
      if NOT bSight
      {
         iChaseRange /= 5;
      }
      iChaseRange *= iChaseRange;

      // Mobs may lose interest if the target is too far away or out of sight.
      if (NOT (piBehavior & AI_FIGHT_SINGLEMINDED)) AND (iDistance > iChaseRange)
      {
         Send(self,@EnterStateMove);

         return;
      }

      if Send(self,@MonsterCombatCheck)
      {
         iDelay = Send(self,@MonsterCombatAction,#distance=iDistance,#sight=bSight);
      }
      else
      {
         iDelay = 0;
      }

      // Got gassed after acting and is currently resting. Quit.
      if (piState & STATE_REST)
      {
         return;
      }

      // If we can move, we physically try to get closer.
      if iDelay = 0
      {
         Send(poBrain,@GetEngageBehavior,#mob=self,#target=poTarget,#behavior=piBehavior);
      }

      // 50% chance to move away from the target.
      Send(self,@RandomCombatMove,#direction=-5);

      // Monster acted. Pass on the appriopriate delay.
      if poTarget <> $
      {
         Send(poBrain,@PostEngageTimer,#mob=self,#delay=Abs(iDelay));
      }
      else
      {
         // Target died. Move on.
         Send(self,@EnterStateMove);
      }

      return;
   }

   MonsterCastAnimation(iSpellNum=$)
   "Give ghost a chance to create fog and zombies on spell cast."
   {
      local i, iRandom, iPick, oElement, iMRow, iMCol, iMRowFine, iMColFine;

      iRandom = Random(10,20);
      i = 0;

      while i < iRandom
      {
         if GetRandomPointBSP(Send(poOwner,@GetRoomData), 15, 24, *iMRow, *iMCol,
                  *iMRowFine, *iMColFine)
         {
            if iMRow < 4 OR iMRow > 19 OR iMCol < 7 OR iMCol > 20
               AND NOT (iMRow <= 14 AND iMRow >= 12 AND iMCol <= 29 AND iMCol >= 20)
            {
               ++i;
               continue;
            }

            iPick = Random (1,iRandom);

            if iPick = 1
            {
               if Send(poOwner,@CountHoldingHowMany,#class=&Skeleton) < 3
               {
                  ++piSkeleton;

                  if piSkeleton < 9
                  {
                     oElement = Create(&DaemonSkeleton,#DropsTreasure=FALSE,#Level=100);
                  }
                  else
                  {
                     piSkeleton = 0;

                     oElement = Create(&GiantDaemonSkeleton,#DropsTreasure=FALSE,#Level=300);
                  }

                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);

                  Send(oElement,@SetMaster,#oMaster=self);

                  if poTarget <> $
                  {
                     Post(oElement,@TargetSwitch,#what=poTarget,#iHatred=100);
                     Post(oElement,@EnterStateEngage,#target=poTarget,#actnow=TRUE);
                  }
               }
            }
            else if Send(poOwner,@CountHoldingSummoned) < 50
            {
               if iPick < 4
               {
                  // [(1)caster,(2)spellpower,(3)duration,(4)charges,(5)speed,(6)direction,(7)step,(8)noise,(9)curve]
                  oElement = Create(&Web,#seed=[self,99,15000,0,0,0,0,0,0]);
                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);
               }
               else if iPick < 8
               {
                  oElement = Create(&WallofFire,#seed=[self,99,15000,0,0,0,0,0,0]);
                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);
               }
               else if iPick < 10
               {
                  oElement = Create(&WallofLightning,#seed=[self,99,15000,0,0,0,0,0,0]);
                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);
               }
               else if iPick < 11
               {
                  oElement = Create(&PoisonFogCloud,#seed=[self,99,15000,0,0,0,0,0,0]);
                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);
               }
               else if iPick < 12
               {
                  oElement = Create(&ActiveSporeCloud,#seed=[self,99,15000,0,0,0,0,0,0]);
                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);
               }
               else
               {
                  oElement = Create(&FogCloud,#seed=[self,99,15000,0,0,0,0,0,0]);
                  Send(poOwner,@NewHold,#what=oElement,#new_row=iMRow,#new_col=iMCol,
                       #fine_row=iMRowFine,#fine_col=iMColFine);
               }
            }
         }

         ++i;
      }

      propagate;
   }

   GetProjectileIcon()
   {
      return lich_darkbolt;
   }

   GetProjectileSpeed()
   {
      return 8;
   }

   SendProjectileAnimation()
   {
      AddPacket(1,ANIMATE_TRANSLATION,1,PT_GRAY_TO_BLACK);
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 1, 2, 5);   // 40ms between animations

      return;
   }

   GetProjectileLightFlags()
   {
      // No lighting information.
      // There probably should be ligthing information, since it's magical-type.
      return LIGHT_FLAG_NONE;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,80,2,2,2,5);

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,200,2,2,2,3);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,6,2,9,2,1);

         return;
      }

      propagate;
   }

   FindNewTarget()
   {
      local oBlind, lActive, iRandom, iDistance, iBestDistance, i, each_obj;

      // Only one in three people are considered eligible
      // targets.  The closest is targeted.  Held people
      // aren't considered - she deals with her current
      // target first.  Only people in view are considered.
   
      oBlind = Send(SYS,@FindSpellByNum,#num=SID_BLIND);
      lActive = Send(poOwner,@GetHolderActive);
      iRandom = Random(1,30);
      iBestDistance = 10000;

      if poTarget = $ OR Send(poTarget,@IsEnchanted,#what=oBlind)
      {
         foreach i in lActive
         {
            each_obj = Send(poOwner,@HolderExtractObject,#data=i);
            iDistance = Send(self,@SquaredDistanceTo,#what=each_obj);

            if IsClass(each_obj,&User)
               AND Send(self,@CanSee,#what=each_obj)
               AND NOT Send(each_obj,@IsEnchanted,#what=oBlind)
               AND (iRandom < 10 OR iDistance < iBestDistance)
               AND NOT Send(self,@isAlly,#target=each_obj)
            {
               Debug("Lich target change:",each_obj);
               iBestDistance = iDistance;
               Send(self,@TargetSwitch,#what=each_obj,#iHatred=60);

               if iRandom < 5
               {
                  return TRUE;
               }
            }
         }
      }

      return FALSE;
   }

   Killed(what=$, resetScenario=TRUE, guildDisbandDeath=FALSE)
   {
      local oSpell, oRoom, NumAttackers, i, lichActivated, oNecBal, oNecGuild;

      oNecBal = Send(SYS,@GetNecromancerBalance);
      oNecGuild = Send(oNecBal,@GetNecroGuild);

      NumAttackers = Length(plAttackers);

      foreach i in plAttackers
      {
         if i = what
         {
            Send(i,@MsgSendUser,#message_rsc=lich_death_blow);
         }

         if NumAttackers = 2
            AND i <> what
         {
            Send(i,@MsgSendUser,#message_rsc=lich_double_killer);
         }

         if NumAttackers > 2
            AND i <> what
         {
            Send(i,@MsgSendUser,#message_rsc=lich_helper_killer);
         }
      }

      lichActivated = FALSE;
      if plAttackers <> $
         AND oNecGuild <> $
         AND Send(oNecGuild,@GetMemberList) <> $
      {
         lichActivated = TRUE;
      }

      // Disband the guild.
      if NOT guildDisbandDeath
      {
         Send(oNecBal,@ClearNecromancerGuild);
      }

      Send(Send(SYS,@FindRoomByNum,#num=RID_LICH_MAZE),@RandomizeLeverEffects);
      Send(Send(SYS,@FindRoomByNum,#num=RID_G9),@RandomizeLeverEffects);

      if what <> $
         AND NOT guildDisbandDeath
      {
         Post(self,@BroadcastLichDeathMessage,#what=what,#Attackers=plAttackers,
               #lichActivated=lichActivated,#resetScenario=resetScenario);
      }

      if resetScenario
         AND ptDeathSequence = $
         AND NOT guildDisbandDeath
      {
         ptDeathSequence = CreateTimer(self,@DeathSequence2,piDeathSequenceTimestep);
      }

      propagate;
   }

   BroadcastLichDeathMessage(what=$, Attackers=$, resetScenario=TRUE,
                              lichActivated=TRUE)
   {
      local i, iLength;

      AddPacket(1,BP_MESSAGE);

      if lichActivated
      {
         // Send a message to the world.
         AddPacket(4,lich_killed_world_saved, 4,Send(what,@GetTrueName));

         ClearTempString();

         iLength = Length(Attackers);
         foreach i in Attackers
         {
            if iLength > 1
               AND i = Last(Attackers)
            {
               AddPacket(4,GetTempString(), 4,lich_and,
                         STRING_RESOURCE,Send(i,@GetTrueName));

               break;
            }

            AppendTempString(Send(i,@GetTrueName));

            if iLength > 2
            {
               AppendTempString(lich_comma);
            }
            else if iLength = 1
            {
               AddPacket(4,GetTempString(), 4,lich_blank);
               ClearTempString();
               AddPacket(4,GetTempString());

               break;
            }
         }

         Send(self,@AddNecromancerRoster);
         Send(SYS,@SystemSendCopyPacketAll);
      }
      else
      {
         // Send a message to the world.
         AddPacket(4,lich_killed_world_saved_nolich,
                   4,Send(what,@GetTrueName));
         Send(SYS,@SystemSendCopyPacketAll);
      }

      return;
   }

   DeathSequence2()
   {
      ptDeathSequence = $;
      ptDeathSequence = CreateTimer(self,@DeathSequence3,piDeathSequenceTimestep);

      // Tell all amulets and swords the bad/good news.
      Send(&NecromancerAmulet,@LichKilled);

      return;
   }

   DeathSequence3()
   {
      ptDeathSequence = $;
      Send(&HunterSword,@LichKilled,#oLich=self);

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   SpellResist(oSpell=$,who=$,iSpellpower=$)
   {
      local iResistChance;

      if IsClass(who,&DM)
      {
         return FALSE;
      }

      if Send(oSpell,@IsHarmful)
      {
         // Unaffected by Qor spells.  Period.
         if Send(oSpell,@GetSchool) = SS_QOR
         {
            return TRUE;
         }

         iResistChance = MAGIC_RESIST;
         if IsClass(oSpell,&Dazzle)
         {
            // Extra 50// chance to resist.
            iResistChance = (iResistChance * 150) / 100;
         }

         if iSpellPower < 30
            OR Random(0,100) < iResistChance
         {
            // Unsuccessful spells make the Queen more likely to cast.
            if IsClass(oSpell,&Dazzle)
            {
               Send(self,@AdjustActionPriority,#num=SID_BLIND,#amount=1000);
            }
            else if IsClass(oSpell,&AttackSpell)
            {
               Send(self,@AdjustActionPriority,#num=SID_VAMPIRIC_DRAIN,#amount=1000);
            }
            else if Send(oSpell,@GetSchool) = SS_KRAANAN
            {
               Send(self,@AdjustActionPriority,#num=SID_CURSE_WEAPON,#amount=1000);
            }
            else if Send(oSpell,@GetSchool) = SS_SHALILLE
            {
               Send(self,@AdjustActionPriority,#num=SID_HOLD,#amount=1000);
            }

            // Unsuccessful spells may incur the Queen's wrath.
            if Random(1,3) = 1
            {
               Send(self,@TargetSwitch,#what=who,#iHatred=10);
            }

            return TRUE;
         }
         else
         {
            // Successful spells will definitely incur the Queen's wrath.
            Send(self,@TargetSwitch,#what=who,#iHatred=100);
         }
      }

      return FALSE;
   }

/////////////////
// Special code //
/////////////////
//

   SomeoneSaid(what = $,type = $,string = $)
   {
      local oAmulet, iAmountDrained, iHunger, rHungerSpiel, oNecGuild;

      oNecGuild = Send(Send(SYS,@GetNecromancerBalance),@GetNecroGuild);

      if IsClass(what,&User)
         AND Send(what,@GetGuild) <> $
         AND Send(what,@GetGuild) = oNecGuild
      {
         if StringContain(string,vrTributeTrigger)
         {
            // Tell the amulet to pay up, find out how much we sucked out.
            oAmulet = $;
            foreach oAmulet in Send(what,@GetPlayerUsing)
            {
               if IsClass(oAmulet,&NecromancerAmulet)
               {
                  break;
               }
            }

            if oAmulet = $
               OR (NOT IsClass(oAmulet,&NecromancerAmulet))
            {
               propagate;
            }

            iAmountDrained = Send(oAmulet,@LichTributeDrain);

            // Tell the guild object how much was paid.
            if iAmountDrained = 0
            {
               propagate;
            }
            Send(oNecGuild,@PayRent,#amount=iAmountDrained*10000);
         }

         if StringContain(string,vrHungerTrigger)
         {
            iHunger = Send(oNecGuild,@GetRentDue);
            rHungerSpiel = lich_hunger_0;
            if iHunger > 4
            {
               rHungerSpiel = lich_hunger_5;
            }
            if iHunger = 4
            {
               rHungerSpiel = lich_hunger_4;
            }
            if iHunger = 3
            {
               rHungerSpiel = lich_hunger_3;
            }
            if iHunger = 2
            {
               rHungerSpiel = lich_hunger_2;
            }
            if iHunger = 1
            {
               rHungerSpiel = lich_hunger_1;
            }
            Post(what,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
                  #string=rHungerSpiel);
         }
      }

      propagate;
   }

   AddNecromancerRoster()
   {
      local i, iLength;

      Send(&NecromancerAmulet,@NecromancerRosterRequest,#oLich=self);

      iLength = Length(plTempRoster);

      ClearTempString();

      foreach i in plTempRoster
      {
         if iLength > 1
            AND i = Last(plTempRoster)
         {
            AddPacket(4,GetTempString(), 4,lich_and,
                      STRING_RESOURCE,Send(i,@GetTrueName), 4,lich_have);

            break;
         }

         AppendTempString(Send(i,@GetTrueName));

         if iLength > 2
         {
            AppendTempString(lich_comma);
         }
         else if iLength = 1
         {
            AddPacket(4,GetTempString(), 4,lich_blank, 4,0, 4,lich_has);

            break;
         }
      }

      plTempRoster = $;

      return;
   }

   NecromancerRosterReply(oNecro = $)
   {
      if oNecro <> $
      {
         plTempRoster = Cons(oNecro,plTempRoster);
      }

      return;
   }

   IsAlly(target = $)
   {
      if NOT IsClass(target,&Battler)
      {
         return FALSE;
      }

      if IsClass(target,&User)
         AND Send(target,@IsUsingA,#class=&NecromancerAmulet)
      {
         return TRUE;
      }

      propagate;
   }

   IsAlliedClass(what=$)
   {
      if IsClass(what,&DarkAngel)
         OR Send(what,@IsUndead)
      {
         return TRUE;
      }

      propagate;
   }

   SpecialHatredBehavior(what=$)
   {
      local i;

      // She hates anyone with a hunter sword, and goody-goodies too.
      // But she REALLY hates backstabbers.
      if IsClass(what,&User)
      {
         if Send(what,@FindHoldingActive,#class=&HunterSword) <> $
         {
            if poOwner <> $
            {
               return 850;
            }
         }

         if Send(what,@GetKarma) > 30
         {
            return Send(what,@GetKarma);
         }

         if Send(what,@IsUsingA,#class=&NecromancerAmulet)
         {
            foreach i in plAttackers
            {
               if i = what
               {
                  return 1000;
               }
            }
         }
      }

      return 0;
   }

   CreateDeadBody(killer=$)
   {
      local oBody, iQNTindex, oQE, oQ;

      oBody = Create(&DeadLich,#Attackers=plAttackers);
      oQE = Send(SYS,@GetQuestEngine);

      // Get rid of any active quests so any new ones get scheduled with the
      // body instead.
      foreach oQ in Nth(Send(oQE,@GetQuestTemplate,#index=QST_ID_ESTABLISH_NECROGUILD)
                     ,QT_ACTIVE_QUESTS)
      {
         Send(oQ,@DeadlineExpired);
      }

      iQNTindex = First(Nth(Send(oQE,@GetQuestTemplate,#index=QST_ID_ESTABLISH_NECROGUILD),
                        QT_QUEST_NODES));
      Send(oQE,@SetQuestNodeNPCList,#index=iQNTindex,#new_NPC_list=[oBody]);

      return oBody;
   }

   DMCanArmageddon()
   {
      return FALSE;
   }

   NewOwner(what=$)
   {
      // This should never happen, but if it does...
      if what <> $
         AND NOT IsClass(what,&GuildHall15)
      {
         Debug("Bad Lich!  Go to your room!");
         Post(self,@GoBackToGuildhall);
      }

      propagate;
   }

   LastUserLeft(what = $)
   {
      Post(self,@GoBackToGuildhall);

      propagate;
   }

   GoBackToGuildhall()
   {
      local oGuildh15;

      if poOwner = $
      {
         return;
      }

      oGuildh15 = Send(SYS,@FindRoomByNum,#num=RID_GUILDH15);

      if poOwner = oGuildh15
      {
         Send(SYS,@UtilGoNearSquare,#what=self,#where=poOwner,
               #new_row=13,#new_col=49,#fine_row=16,#fine_col=00,
               #new_angle=ANGLE_WEST);

         return;
      }

      Send(oGuildh15,@NewHold,#what=self,#new_row=13,#new_col=49,
            #fine_row=16,#fine_col=00,#new_angle=ANGLE_WEST);

      if Send(oGuildh15,@CountHoldingHowMany,#class=&Lich) > 1
      {
         Debug("More than one lich in the guild hall!!");
      }

      if Send(oGuildh15,@CountHoldingHowMany,#class=&DeadLich) > 0
         AND Send(oGuildh15,@CountHoldingHowMany,#class=&Lich) > 0
      {
         Debug("Both a lich and a dead lich in the guild hall!!");
      }

      return;
   }

   CanEvilTwin()
   {
      return FALSE;
   }

   MoveTimer( timer = $ )
   "Queen mercilessly chases targets when any are around."
   {
      // Sanity checks
      if poOwner = $
      {
         Send(self,@EnterStateLimbo);

         return;
      }

      if Send(self,@FindNewTarget)
      {
         Send(self,@ClearBehavior,#timer=timer);
         Send(self,@EnterStateEngage,#target=poTarget,#actnow=TRUE);

         return;
      }

      propagate;
   }

   ReqMonsterMove(new_row = $,new_col = $)
   "Called by monster moving code to check if we really want to go"
   "to <new_row>,<new_col>."
   {
      if poOwner <> $
         AND Send(poOwner,@GetRoomNum) = RID_GUILDH15
         AND (new_col > 28 OR new_col < 8)
      {
         if NOT (piCol > 28 OR piCol < 8)
         {
            return FALSE;
         }
      }

      propagate;
   }

   CanBeWebbed()
   {
      return FALSE;
   }
   
   IsArenaMonster()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
