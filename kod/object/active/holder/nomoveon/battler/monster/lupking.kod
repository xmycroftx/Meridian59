// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
LupoggKing is Monster

constants:

   include blakston.khd
   

   ANIM_BREATH = 1
   ANIM_BITE = 2
   ANIM_SPIT = 3

   SPIT_COLOR = 82

resources:

   include lupking.lkod

   lupoggking_name_rsc = "lupogg king"
   lupoggking_icon_rsc = lupking.bgf
   lupoggking_desc_rsc = \
      "The ancient King of the Lupoggs lords over these dark caves, knowing "
      "no creature to be its equal.  The rock walls rumble and shake whenever "
      "this monstrosity wails.  You feel as though you have already outlived "
      "most people who encounter the Lupogg King, but that thought does not "
      "comfort you any."


   lupoggking_dead_icon_rsc = lupkingx.bgf
   lupoggking_dead_name_rsc = "dead lupogg king"

   lupoggking_sound_hit = lup_atkm.ogg
   lupoggking_sound_miss = lup_atkm.ogg
   lupoggking_sound_death = lup_dth.ogg
   lupoggking_sound_aware = lup_awr.ogg
   lupoggking_cast_sound = bsp_dth.ogg
   lupoggking_spit = gob.bgf

   lupoggking_cast_spell = \
      "The lupogg king covers you in a foul paralyzing slime!"
   lupoggking_death_blow = \
      "Your last attack ends the lupogg king's reign!"
   lupoggking_single_killer = \
      "You have personally slain the mighty lupogg king all by your lonesome!"
   lupoggking_double_killer = \
      "The lupogg king is dead, thanks to you and your comrade!"
   lupoggking_helper_killer = \
      "The lupogg king is dead, thanks to you and your comrades!"
   angered_by_wall_element_msg = \
      "Enraged by %s%s, the lupogg king stomps down hard!"

classvars:
   vrName = lupoggking_name_rsc
   vrIcon = lupoggking_icon_rsc
   vrDesc = lupoggking_desc_rsc
   vrDead_icon = lupoggking_dead_icon_rsc
   vrDead_name = lupoggking_dead_name_rsc

   viTreasure_type = TID_LUPOGG_KING
   viSpeed = SPEED_SLOW
   viAttack_type = ATK_TYPE_CLAW
   viLevel = 200
   viDifficulty = 9
   viVisionDistance = 40
   // Attack range of 256, or 4 row/col.
   viMeleeRange = 256
   viFireRange = 512
   viKarma = 100
   viDefault_behavior = \
      AI_FIGHT_AGGRESSIVE | AI_FIGHT_HYPERAGGRESSIVE
   viAttributes = MOB_SPASM
   viGender = GENDER_MALE
   viCashmin = 20000
   viCashmax = 50000
   vrSound_hit = lupoggking_sound_hit
   vrSound_miss = lupoggking_sound_miss
   vrSound_aware = lupoggking_sound_aware
   vrSound_death = lupoggking_sound_death

   viMeleePriority = 600
   viFirePriority = 400
   viMovePriority = 300

   viFatigueStrength = 2000
   viFatigueDuration = 5000

   vbCanBleed = FALSE
   vbCanBurn = FALSE

   vbAquatic = TRUE

   // Very used to dark places.
   viNightVision = 200

   viBonusXP = 500
   viBonusTP = 30

properties:

   piAnimation = ANIM_NONE
   plAttackers = $  // [player,player....]

messages:

   Constructed()
   {
      // Give lupogg king more HP.
      piMax_Health = piMax_Health * 3;
      // piHealth uses high-precision numbers, so multiply by 100.
      piHealth = piMax_Health * 100;

      plResistances = [ [ATK_TYPE_ALL, 40 ],
                        [ATK_TYPE_PIERCE, 90 ],
                        [-SPL_TYPE_COLD, 90 ],
                        [-SPL_TYPE_SHOCK, 90],
                        [-SPL_TYPE_ACID, -20 ],
                        [-SPL_TYPE_FIRE, -20 ],
                        [-SPL_TYPE_QUAKE, 100 ],
                        [ATK_TYPE_NERUDITE, -40 ]
                      ];

      plActions =  [ [SID_HOLD,0,0,147456,500,0,99,COMBAT_ACTION_HARM],
                     [SID_POISON_FOG,0,0,16384,700,1000,99,COMBAT_ACTION_NEUTRAL] ];

      propagate;
   }

   Delete()
   {
      plAttackers = $;

      propagate;
   }

   AssessDamage(what = $,damage = $,atype = 0, stype= 0,bonus = 0)
   "This is called when something causes damage to us"
   {
      local i;

      foreach i in plAttackers
      {
         if i = what
         {
            propagate;
         }
      }

      if what <> $
         AND IsClass(what,&Battler)
      {
         plAttackers = Cons(what,plAttackers);
      }

      propagate;
   }

   DoSpasm()
   {
      Send(self,@DoBreath);

      propagate;
   }

   DoMeleeAnimation(what = $)
   {
      piAnimation = ANIM_BITE;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SomethingMoved(what=$)
   {
      local oTrance, oActive, lActive, i;

      if what <> self OR poOwner = $
      {
         propagate;
      }

      // Shake the ground when I take a step.
      // Small chance each person might lose any active trance.

      Send(poOwner,@Rumble,#duration=250,#disruption=50);
      
      propagate;
   }

   DoCast()
   {
      piAnimation = ANIM_SPIT;
      Send(poOwner,@SomethingChanged,#what=self);
      Send(poOwner,@SomethingShot,#who=self,#target=poTarget,
            #projectile=self);
      piAnimation = ANIM_NONE;

      return;
   }

   GetProjectileIcon()
   {
      return lupoggking_spit;
   }

   GetProjectileSpeed()
   {
      return 8;
   }
   
   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 1, 2, 5);   // 40ms between animations

      return;
   }

   GetProjectileLightFlags()
   {
      // No lighting information.
      return LIGHT_FLAG_NONE;
   }

   DoBreath()
   {
      piAnimation = ANIM_BREATH;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,200, 2,7, 2,11);

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,200, 2,2, 2,21);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_BITE
      {
         AddPacket(1,ANIMATE_ONCE, 4,200, 2,12, 2,16, 2,1);

         return;
      }

      if piAnimation = ANIM_SPIT
      {
         AddPacket(1,ANIMATE_ONCE, 4,200, 2,17, 2,21, 2,1);

         return;
      }

      if piAnimation = ANIM_BREATH
      {
         AddPacket(1,ANIMATE_ONCE, 4,200, 2,2, 2,6, 2,1);

         return;
      }

      propagate;
   }

   MonsterCombatAction(distance=0,sight=TRUE)
   "Figure out what the monster is going to attack with."
   "Depending on our action, return an appropriate delay."
   {
      local i, iPriority, lActions, lAction, iNum, oSpell, iAttacks,
         iMana, iVigor, iFactor, iSpellPower, lTargets, iDelay, iPowerLevel,
         iAction;

      lActions = $;

      // If we have sight, proceed as usual, else, only allow moving.
      if sight
      {
         // Sort out any actions in our action list that can't reach the
         // target or that we don't have the resources for.
         foreach i in plActions
         {
            if Nth(i,2) < piMana
               AND Nth(i,4) > distance
            {
               lActions = Cons(i,lActions);
            }
         }
      }
      else
      {
         // Can't see the target, let's try to move towards it.
         foreach i in plActions
         {
            if First(i) = SKID_MINIMUM
            {
               lActions = Cons(i,lActions);
            }
         }
      }

      // Double check if the monster can perform basic actions.
      foreach i in lActions
      {
         iNum = First(i);

         if iNum = SKID_MINIMUM
         {
            if (piBehavior & AI_NOMOVE) OR (piBehavior & AI_CORNERED)
            {
               lActions = DelListElem(lActions,i);
               Send(self,@SetBehaviorFlag,#flag=AI_CORNERED,#value=FALSE);
            }
         }
         else if (piBehavior & AI_NOFIGHT)
         {
            lActions = DelListElem(lActions,i);
         }
         else if ((iNum = SKID_FIRE) AND (distance <= 147456))
         {
            lActions = DelListElem(lActions,i);
         }
      }

      // Check the actual spells in our action list for castability.
      foreach i in lActions
      {
         iNum = First(i);
         if iNum < 400
         {
            oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
            lTargets = [poTarget];
            lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=lTargets);
            if NOT Send(oSpell,@CanPayMonsterCosts,#who=self,#lTargets=lTargets,#iSpellPower=iSpellPower)
               OR NOT Send(poOwner,@ReqSpellCast,#who=self,#oSpell=oSpell,#lItems=lTargets)
            {
               lActions = DelListElem(lActions,i);
            }
         }
      }

      // If no actions made it through our check, quit here.
      if lActions = $
      {
         return FALSE;
      }

      // Time for an attack check.
      if iNum <> SKID_MINIMUM
         AND NOT Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,#use_weapon=self)
      {
         return FALSE;
      }

      // We have sight, are allowed to attack and got a pool of actions.
      // Compare priorities to decide for one.
      iPriority = MIN_KOD_INT;
      foreach i in lActions
      {
         if Nth(i,5) >= iPriority
         {
            lAction = i;
            iPriority = Nth(i,5);
         }
      }

      // We have our action at this point, let's check its ID.
      iNum = First(lAction);

      // It's clear we will be acting now. Get our action delay.
      iDelay = Send(self,@GetAttackTime);

      // Standard melee attack. Let's initiate the attack.
      if (iNum = SKID_SLASH) OR (iNum = SKID_PUNCH)
      {
         iAttacks = 100 + viBonusSwing;
         i = 0;

         while (iAttacks > 0) AND poTarget <> $ AND Send(poTarget,@GetOwner) <> $
         {
            if (Random(1,100) <= iAttacks)
               AND Send(self,@TryAttack,#what=poTarget,#stroke_obj=self,#factor=Nth(lAction,7))
            {
               ++i;
            }

            iAttacks -= 100;
         }

         if i = 0
         {
            return FALSE;
         }
         else if poOwner <> $
         {
            // We actually attack. Do the animation if we're still around.
            Send(self,@DoMeleeAttack,#swings=i);
         }
      }
      // If we are a ranged attack, shoot something.
      else if (iNum = SKID_FIRE)
      {
         iAttacks = 100 + viBonusShot;
         i = 0;

         while (iAttacks > 0) AND poTarget <> $ AND Send(poTarget,@GetOwner) <> $
         {
            if (Random(1,100) <= iAttacks)
               AND Send(self,@TryAttack,#what=poTarget,#stroke_obj=self,#factor=Nth(lAction,7))
            {
               ++i;

               Send(Send(SYS,@FindSpellByNum,#num=SID_FATIGUE),@StartFatigue,
                  #who=poTarget,#source=self,#strength=viFatigueStrength,
                  #duration=viFatigueDuration);
            }

            iAttacks -= 100;
         }

         if i = 0
         {
            return FALSE;
         }
         else if poOwner <> $
         {
            // We actually attack. Do the animation if we're still around.
            Send(self,@DoMissileAttack,#shots=i);
         }
      }
      // Looks like we are casting something. How exciting!
      // Time to set our local variables.
      else if iNum < 400
      {
         oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
         lTargets = [poTarget];
         lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=lTargets);
         iSpellPower = piSpellPower + Nth(lAction,7);

         // Do any special cast animations; send spell for specific ones.
         // Also, make sure we're still around.
         if poOwner <> $
         {
            // Not facing the target when casting at them is rude. Let's be polite.
            Send(self,@MonsterOrient,#new_row=Send(poTarget,@GetRow),
                  #new_col=Send(poTarget,@GetCol),#new_finerow=Send(poTarget,@GetFineRow),
                  #new_finecol=Send(poTarget,@GetFineCol),#face_target=TRUE);
            Send(self,@MonsterCastAnimation,#iSpellNum=iNum);
         }

         // Monsters don't necessarily cast at the same power level as
         // players. Calculate power percentage here.

         if viPowerLevel <> $
         {
            iPowerLevel = viPowerLevel;
         }
         else
         {
            iPowerLevel = bound(piMysticism + piIntellect + viLevel,$,300) / 3;
         }

         Send(poOwner,@SomethingWaveRoom,#what=self,#wave_rsc=lupoggking_cast_sound);

         if iNum = SID_POISON_FOG
         {
            // Cloud spell is centered around the king.
            Send(oSpell,@CastSpell,#who=self,#lTargets=lTargets,
               #iSpellPower=iSpellPower,#iPowerLevel=iPowerLevel,
               #bRing=TRUE,#bStun=TRUE);

            if poOwner <> $
            {
               Send(self,@DoBreath);
            }

            iDelay = 2000;
         }
         else if iNum = SID_HOLD
         {
            Send(self,@DoCast);

            if IsClass(poTarget,&User)
            {
               Send(poTarget,@MsgSendUser,#message_rsc=lupoggking_cast_spell);
               Send(poTarget,@EffectSendUserDurationAndXlat,#effect=EFFECT_FLASHXLAT,
               #duration=5000,#xlat=SPIT_COLOR);
            }

            Send(oSpell,@DoSpellEffects,#who=self,#lTargets=[poTarget],
                  #iDuration=8000);

            iDelay = 500;
         }

         // We cast something. Let's check if we want to switch targets.
         if poTarget <> $
         {
            Send(self,@FindNewTarget);
         }
      }
      // If none of the above was true, we simply moved.
      else
      {
         iDelay = FALSE;
      }

      // We did something. Pay the cost.
      iMana = Nth(lAction,2);
      iVigor = Nth(lAction,3);
      Send(self,@LoseMana,#amount=iMana,#precision=TRUE);
      Send(self,@LoseVigor,#amount=iVigor,#precision=TRUE);

      // If we made it this far, we acted in some way. Adjust our priorities.
      iFactor = Nth(lAction,6);

      foreach i in plActions
      {
         iAction = First(i);

         // Spells lose priorty when cast and gain priority
         // when another action is taken. Amount of priority
         // lost is unique to each spell, amount of priority
         // gained depends on mysticism.
         if iAction = SID_POISON_FOG
         {
            if iAction = iNum
            {
               SetNth(i,5,Bound(iPriority - iFactor,-10000,$));
            }
            else
            {
               SetNth(i,5,Bound(Nth(i,5)+100,$,1000));
            }
         }
      }

      // Standing too close. Pass on a negative delay which
      // allows the monster to take a free side step.
      if distance < 2500
      {
         return -iDelay;
      }

      return iDelay;
   }

   HitSideEffect()
   "Handled differently for this boss monster."
   {
      return;
   }

   ////  Action Routines
   EngageTimer( timer = $ )
   "We're trying to engage our target, so either we keep"
   "chasing, or we attack. Note that even if we can't move,"
   "we can still be 'engaging'...."
   {
      local i,oVictim, iDistance, iChaseRange, iDelay, bSight;
      oVictim = poTarget;

      Send(self,@ClearBehavior,#timer=timer);

      // Sanity checks
      if poOwner = $
      {
         Debug("Unreachable. Null owner.");
         Send(self,@EnterStateLimbo);

         return;
      }

      // If target left, we should already know
      if oVictim = $
      {
         //Debug("Unreachable. Null victim.");
         Send(self,@EnterStateWait);

         return;
      }

      // Victim phased out or is now in spectator mode, break aggro.
      if IsClass(oVictim,&User)
         AND Send(oVictim,@IsInCannotInteractMode)
      {
         Send(self,@EnterStateMove);

         return;
      }

      // Get distance to target.
      iDistance = Send(self,@SquaredFineDistanceTo3D,#what=oVictim);
      bSight = Send(poOwner,@LineOfSight,#obj1=self,#obj2=oVictim);
      iChaseRange =  piVisionDistance * FINENESS;
      iChaseRange = iChaseRange * Random(40,50) / 100;
      if NOT bSight
      {
         iChaseRange /= 5;
      }
      iChaseRange *= iChaseRange;

      // Mobs may lose interest if the target is too far away or out of sight.
      if (NOT (piBehavior & AI_FIGHT_SINGLEMINDED)) AND (iDistance > iChaseRange)
      {
         Send(self,@EnterStateMove);

         return;
      }

      if Send(self,@MonsterCombatCheck)
      {
         iDelay = Send(self,@MonsterCombatAction,#distance=iDistance,#sight=bSight);
      }
      else
      {
         iDelay = 0;
      }

      // Got gassed after acting and is currently resting. Quit.
      if (piState & STATE_REST)
      {
         return;
      }

      // If we can move, we physically try to get closer.
      if iDelay = 0
      {
         Send(poBrain,@GetEngageBehavior,#mob=self,#target=poTarget,#behavior=piBehavior);
      }

      // A negative delay means that we are too close to our target. Move away.
      // Else, do a random move with a one in three chance to move towards our
      // target.
      if iDelay < 0
      {
         Send(self,@MoveAway,#oTarget=poTarget,#face_target=TRUE);
      }
      else
      {
         Send(self,@MoveTowards,#oTarget=poTarget,#face_target=TRUE);
      }

      // Monster acted. Pass on the appriopriate delay.
      if poTarget <> $
      {
         Send(poBrain,@PostEngageTimer,#mob=self,#delay=Abs(iDelay));
      }
      else
      {
         // Target died. Move on.
         Send(self,@EnterStateMove);
      }

      return;
   }

   ReqMonsterMove(new_row = $,new_col = $)
   "Called by monster moving code to check if we really want to go"
   "to <new_row>,<new_col>."
   {
      if poOwner <> $
         AND Send(poOwner,@GetRoomNum) = RID_SEWER_KING
         AND (new_row > 14 OR new_col > 42 OR new_row < 4 OR new_col < 23)
      {
         if NOT (piRow > 14 OR piCol > 42 OR piRow < 4 OR piCol < 23)
         {
            return FALSE;
         }
      }

      propagate;
   }

   CanSee(what=$)
   {
      local iRow, iCol;

      if poOwner <> $
         AND Send(poOwner,@GetRoomNum) = RID_SEWER_KING
         AND what <> $
      {
         iRow = Send(what,@GetRow);
         iCol = Send(what,@GetCol);

         if iRow > 16 OR iRow < 2 OR iCol > 44 OR iCol < 23
         {
            return FALSE;
         }
      }

      propagate;
   }

   FindNewTarget()
   {
      local oHold, lActive, iRandom, iDistance, iBestDistance, i, each_obj;

      // Only one in three people are considered eligible
      // targets.  The closest is targeted.  Held people
      // aren't considered - he deals with his current
      // target first.  Only people in view are considered.

      oHold = Send(SYS,@FindSpellByNum,#num=SID_HOLD);
      lActive = Send(poOwner,@GetHolderActive);
      iRandom = Random(1,30);
      iBestDistance = 10000;

      if Send(poTarget,@IsEnchanted,#what=oHold)
      {
         foreach i in lActive
         {
            each_obj = Send(poOwner,@HolderExtractObject,#data=i);
            iDistance = Send(self,@SquaredDistanceTo,#what=each_obj);

            if IsClass(each_obj,&User)
               AND Send(self,@CanSee,#what=each_obj)
               AND NOT Send(each_obj,@IsEnchanted,#what=oHold)
               AND (iRandom < 10 OR iDistance < iBestDistance)
            {
               iBestDistance = iDistance;
               Send(self,@TargetSwitch,#what=each_obj,#iHatred=100);
               if iRandom < 5
               {
                  return;
               }
            }
         }
      }

      return;
   }

   Killed(what=$)
   {
      local oSpell, oRoom, NumAttackers, i, lFinalTargets;

      NumAttackers = length(plAttackers);

      foreach i in plAttackers
      {
         if i = what
         {
            Send(i,@MsgSendUser,#message_rsc=lupoggking_death_blow );
         }

         if NumAttackers = 1
         {
            Send(i,@MsgSendUser,#message_rsc=lupoggking_single_killer );
         }

         if NumAttackers = 2
         {
            Send(i,@MsgSendUser,#message_rsc=lupoggking_double_killer );
         }

         if NumAttackers > 2
         {
            Send(i,@MsgSendUser,#message_rsc=lupoggking_helper_killer );
         }

      }

      oSpell = Send(SYS,@FindSpellByNum,#num=SID_EARTHQUAKE);
      lFinalTargets = Send(oSpell,@GetTargets,#who=poOwner);
      Post(oSpell,@CastSpell,#who=poOwner,#iSpellPower=40,
            #lTargets=lFinalTargets);

      propagate;
   }

   CreateTreasure(who=$,corpse=$)
   {
      local oTreasure, iNumber;

      oTreasure = Create(&BlueDragonScale,#corpse=corpse);
      iNumber = Random(3,8);
      Send(oTreasure,@AddNumber,#number=iNumber);

      if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
      {
         Send(poOwner,@NewHold,#what=oTreasure,
               #new_row=piRow,#new_col=piCol,
               #fine_row=piFine_row,#fine_col=piFine_col);
      }
      else
      {
         Send(oTreasure,@Delete);
      }

      propagate;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   DMCanArmageddon()
   {
      // Can't destroy the lupogg king in his home.
      if poOwner <> $
         AND Send(poOwner,@GetRoomNum) = RID_SEWER_KING
      {
         return FALSE;
      }

      propagate;
   }

   CanEvilTwin()
   {
      return FALSE;
   }
   
   AngeredByWallElement(what=$)
   {
      local i, oSpell, lFinalTargets;
      
      foreach i in plAttackers
      {
         Send(i,@MsgSendUser,#message_rsc=angered_by_wall_element_msg,
                             #parm1=Send(what,@GetDef),
                             #parm2=Send(what,@GetName));
      }
      
      Send(poOwner,@DeleteWallsAroundBattler,#who=self);
      
      oSpell = Send(SYS,@FindSpellByNum,#num=SID_EARTHQUAKE);
      lFinalTargets = Send(oSpell,@GetTargets,#who=poOwner);
      Post(oSpell,@CastSpell,#who=poOwner,#iSpellPower=40,
            #lTargets=lFinalTargets);

      return;
   }

   // The lupogg king has legendary powers of recovery and
   // is unaffected by health curses.
   CalculateHealthPerTick()
   {
      local iHealthPerTick, iBoost, i;

      // Health regeneration starts out as 2 percent of our health
      // pool per second at max vigor.
      iHealthPerTick = (piVigor/100) * piMax_health / 10;

      // Additional effects may cause our health to regenerate or decay.
      iHealthPerTick += piHealth_Rate;

      // Disable regeneration when sitting at or above max health.
      if piHealth >= 100*piMax_health
      {
         iHealthPerTick = Bound(iHealthPerTick,$,0);
      }

      // Add a decay of 1 point per 5 seconds if sitting above the max.
      if piHealth > 100*piMax_health
      {
         iHealthPerTick -= 200;
      }

      // Stop any decay if we are already sitting at 0 health.
      if piHealth = 0
      {
         iHealthPerTick = Bound(iHealthPerTick,0,$);
      }

      return iHealthPerTick;
   }

   IsAlliedClass(what=$)
   {
      if IsClass(what,&Lupogg)
      {
         return TRUE;
      }

      return FALSE;
   }

   CanBeWebbed()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
