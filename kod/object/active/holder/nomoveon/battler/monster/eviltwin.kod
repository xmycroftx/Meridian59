// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
EvilTwin is Monster

constants:

   include blakston.khd

resources:

   include eviltwin.lkod

   EvilTwin_name_rsc = "evil twin"

   EvilTwin_male_icon_rsc = btg.bgf
   EvilTwin_female_icon_rsc = bth.bgf

   EvilTwin_dead_icon_rsc = amoebaX.bgf
   EvilTwin_dead_name_rsc = "dead evil twin"

   EvilTwin_sound_hit = orc_atkh.ogg
   EvilTwin_sound_miss = orc_atkm.ogg
   EvilTwin_sound_death = orc_dth.ogg
   EvilTwin_sound_aware = orc_awr.ogg

   EvilTwin_delete =  "%s%s disappears into a puff of smoke."

   EvilTwin_trouble = \
      "You sense that a evil twin you summoned has gotten you "
      "into some trouble..."

classvars:

   // Defaults if we don't have an original.
   viIndefinite = ARTICLE_AN
   viDefinite = ARTICLE_THE
   viGender = GENDER_NEUTER

   vrDead_icon = EvilTwin_dead_icon_rsc
   vrDead_name = EvilTwin_dead_name_rsc

   viTreasure_type = TID_NONE

   viSpeed = SPEED_FAST
   viAttack_type = ATK_TYPE_SLASH
   viAttributes = 0
   viLevel = 20
   viDifficulty = 8
   viDamagePercent = 75

   // Can't escape this monster's vision range.
   viVisionDistance = 100
   viKarma = 0
   viCashmin = 0
   viCashmax = 0
   vrSound_hit = EvilTwin_sound_hit
   vrSound_miss = EvilTwin_sound_miss
   vrSound_aware = EvilTwin_sound_aware
   vrSound_death = EvilTwin_sound_death
   vrMinion_trouble = EvilTwin_trouble

   viDefault_behavior = AI_FIGHT_SINGLEMINDED | AI_FIGHT_NEWBIESAFE | AI_FIGHT_AGGRESSIVE

   vbCanPoison = FALSE
   vbCanBleed = FALSE
   vbCanSiphon = FALSE
   vbCanFatigue = FALSE
   vbCanBurn = FALSE

properties:

   vrName = EvilTwin_name_rsc
   piDrawfx = 4
   vrIcon = EvilTwin_male_icon_rsc
   piAnimation = PANM_NONE
   poCaster = $
   poOriginal = $         // Who the EvilTwin is of.
   piGender = GENDER_MALE
   pbIllusion = TRUE
   piDamagePercent
   piSpellpower = 1
   poArrow = $

messages:

   Constructor(iSpellPower=1,oMaster=$,oTarget=$)
   {
      if oMaster <> $
      {
         poCaster = oMaster;
         poMaster = oMaster;
      }

      if oTarget <> $
      {
         poOriginal = oTarget;
      }

      piDamagePercent = viDamagePercent;
      piSpellpower = iSpellpower;
      poArrow = Create(&Arrow);

      propagate;
   }

   Constructed()
   {
      Post(self,@SomethingChanged,#what=poOriginal);

      propagate;
   }

   PlaceEvilTwin(who=$)
   "Places the ET at the location of 'who'."
   {
      local oTarget, oDestObj, oRoom, i, each_obj;

      if (who = $)
      {
         return;
      }

      Send(self,@SetOriginal,#who=who);

      // Placement can have an edge case - if ET is seduced and the original
      // logs off/on, the ET should teleport to the current master instead of
      // to the original. This accounts for original being the new master.
      if (poMaster <> poCaster)
      {
         oRoom = Send(poMaster,@GetOwner);
         oDestObj = poMaster;
      }
      else
      {
         oRoom = Send(who,@GetOwner);
         oDestObj = who;
      }

      // Attempt to place the ET near but not on top of the target/master.
      if (NOT Send(SYS,@UtilGoRandomNear,#what=self,#where=oRoom,
            #new_row=Send(oDestObj,@GetRow),#new_col=Send(oDestObj,@GetCol),
            #fine_row=Send(oDestObj,@GetFineRow),#fine_col=Send(oDestObj,@GetFineCol),
            #iMinDist=32))
      {
         // Random placement failed, place on top of target/master.
         Send(oRoom,@NewHold,#what=self,#new_row=Send(oDestObj,@GetRow),
               #new_col=Send(oDestObj,@GetCol),#fine_row=Send(oDestObj,@GetFineRow),
               #fine_col=Send(oDestObj,@GetFineCol));
      }

      // Do nothing further if original captured us.
      if (poMaster = poOriginal)
      {
         return;
      }

      oTarget = who;

      foreach i in Send(oRoom,@GetHolderActive)
      {
         each_obj = First(i);

         if (IsClass(each_obj,&Reflection) OR IsClass(each_obj,&EvilTwin))
            AND Send(each_obj,@GetMaster) = who
            AND Random(1,2) = 1
            AND each_obj <> self
         {
            oTarget = each_obj;
         }
      }

      // Post so it happens last (after entering room).
      Post(self,@TargetSwitch,#what=oTarget,#iHatred=1000);
      Post(self,@EnterStateEngage,#actnow=TRUE);

      return;
   }

   Delete()
   {
      if poOriginal <> $
      {
         // Clear the original's chasing evil twin property.
         Send(poOriginal,@ClearEvilTwin);
      }

      if poCaster <> $
      {
         // Let the caster know to remove us from their list of
         // created ETs.
         Send(poCaster,@RemoveCreatedEvilTwin,#what=self);
      }

      if (poOwner <> $)
         AND (IsClass(poOriginal,&Monster)
            OR Send(poOriginal,@IsLoggedOn))
      {
         Send(poOwner,@SomeoneSaid,#type=SAY_MESSAGE,#string=EvilTwin_delete,
               #what=self,#parm1=Send(self,@GetCapDef),
               #parm2=Send(self,@GetName,#cap=FALSE));
      }

      Post(self,@RemoveOriginal);
      poCaster = $;
      if poArrow <> $
      {
         Send(poArrow,@Delete);
      }
      poArrow = $;

      propagate;
   }

   RemoveOriginal()
   {
      poOriginal = $;

      // Switch to defaults if we lose original.
      // Can happen if something posts a MsgSendUser call that gets
      // executed after this message.
      piGender = GENDER_NEUTER;
      vrName = EvilTwin_name_rsc;

      return;
   }

   SomethingKilled(what=$,victim=$)
   {
      // Delete the evil twin if the original dies.
      if victim = poOriginal
         OR (poCaster <> $
            AND victim = poCaster)
      {
         Send(self,@Delete);
      }

      return;
   }

   GetApparentName()
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetApparentName);
      }

      propagate;
   }

   GetName(cap=FALSE)
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetName,#cap=cap);
      }

      propagate;
   }

   GetDef()
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetDef);
      }

      propagate;
   }

   GetCapDef()
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetCapDef);
      }

      propagate;
   }

   GetIndef()
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetIndef);
      }

      propagate;
   }

   GetCapIndef()
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetCapIndef);
      }

      propagate;
   }

   GetHisHer(cap=FALSE)
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetHisHer,#cap=cap);
      }

      propagate;
   }

   GetHeShe(cap=FALSE)
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetHeShe,#cap=cap);
      }

      propagate;
   }

   GetLordLady(cap=FALSE)
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetLordLady,#cap=cap);
      }

      propagate;
   }

   GetHisHers(cap=FALSE)
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetHisHers,#cap=cap);
      }

      propagate;
   }

   GetHimHer(cap=FALSE)
   {
      if (poOriginal <> $)
      {
         return Send(poOriginal,@GetHimHer,#cap=cap);
      }

      propagate;
   }

   ReqSomethingEntered(what=$)
   {
      if (poOriginal = $
         OR (IsClass(poOriginal,&User)
            AND NOT Send(poOriginal,@IsLoggedOn)))
      {
         return TRUE;
      }

      propagate;
   }

   OriginalPhased()
   "If the original phases out, set the ET to behave like a NPC."
   {
      if (poMaster = poCaster)
      {
         Send(self,@EnterStateWait,#actnow=TRUE);
         piBehavior |= AI_NPC | AI_NOMOVE;
         if (poOwner <> $)
         {
            Send(poOwner,@SomethingChangedFlags,#what=self);
         }
      }

      return;
   }

   OriginalUnphased(who = $)
   "If original phases back in, unset the NPC flag and alert us to their entry."
   {
      piBehavior &= ~(AI_NPC | AI_NOMOVE);

      if (poOwner <> $)
      {
         Send(poOwner,@SomethingChangedFlags,#what=self);
      }

      if (poMaster = poCaster)
      {
         // Go get original target!
         Post(self,@GotoOriginal);
      }

      return;
   }

   SomethingLeft(what=$)
   {
      local oRoom;

      if (poOriginal = $
         OR poOwner = $)
      {
         return;
      }

      oRoom = Send(poOriginal,@GetOwner);

      if (what = poOriginal)
      {
         if (oRoom = $
            OR (IsClass(poOriginal,&User)
               AND Send(poOriginal,@CheckPlayerFlag,#flag=PFLAG_SPECTATOR)))
         {
            // If the original logs off, we go to 'limbo' and await their
            // return. Check spectator flag here also, since SomethingLeft
            // can be used to limbo the ET.
            Send(self,@EnterStateLimbo);
            Send(self,@NewOwner,#what=$);
            // Reset our AI flag, in case owner was phased then spectated.
            piBehavior &= ~(AI_NPC | AI_NOMOVE);

            return;
         }

         // If target leaves room, hunt them down.
         if IsClass(oRoom,&UnderWorld)
         {
            Send(self,@Delete);

            return;
         }
         else if (poMaster = poCaster)
         {
            Post(self,@GotoOriginal);
         }
      }

      propagate;
   }

   ReturnToCommander()
   {
      // Don't return to caster.
      if (poMaster = poCaster)
      {
         return FALSE;
      }

      propagate;
   }

   GotoOriginal()
   {
      local oRoom;

      if (poOriginal = $
         OR poMaster = $
         OR poCaster = $)
      {
         return;
      }

      oRoom = Send(poOriginal,@GetOwner);
      if (oRoom = $)
      {
         return;
      }

      // Don't teleport if already close.
      if (oRoom <> poOwner
         OR Send(self,@SquaredDistanceTo,#what=poOriginal) > 25)
      {
         Send(SYS,@UtilGoNearSquare,#what=self,#where=oRoom,
               #new_row=Send(poOriginal,@GetRow),
               #new_col=Send(poOriginal,@GetCol));
      }

      // Edge case where the ET is seduced and the original target phases out
      // after the ET is captured (ET won't phase) and then returns to attack
      // the original target. ET should phase out near target.
      if (poMaster = poCaster
         AND IsClass(poOriginal,&User)
         AND Send(poOriginal,@IsInCannotInteractMode))
      {
         Post(self,@OriginalPhased);
      }
      else if poOriginal <> poMaster
      {
         Send(self,@AttackOriginal);
      }

      return;
   }

   AttackOriginal()
   {
      if poOriginal <> poMaster
      {
         Post(self,@TargetSwitch,#what=poOriginal,#iHatred=1000);
         Post(self,@EnterStateEngage,#actnow=TRUE);
      }

      return;
   }

   SetMaster(oMaster=$)
   {
      // Remove minion from old master.
      if (poMaster <> $)
      {
         Send(poMaster,@RemoveControlledMinion,#what=self);
      }

      // If there's no caster object, we likely just died.
      if (poCaster = $)
      {
         return;
      }

      if (oMaster = $)
      {
         // Evil twins will go after the original target.
         poMaster = poCaster;
         Send(self,@GoToOriginal);
      }
      else
      {
         poMaster = oMaster;

         if poMaster <> poCaster
         {
            // We've been captured, break target in case the new master
            // doesn't want to attack them.
            Send(oMaster,@NewControlledMinion,#minion=self);
            Send(self,@EnterStateWait);
         }
         else
         {
            // Original caster captured us back. Go kill the original target.
            if poTarget <> poOriginal
            {
               Send(self,@EnterStateWait);
               Send(self,@GoToOriginal);
            }
         }
      }

      Send(self,@ResetBehaviorFlags);

      if poOwner <> $
      {
         Post(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   TweakBehavior()
   {
      if (poMaster = $
         OR poCaster = $
         OR poOriginal = $)
      {
         return;
      }

      // Original might be phased or spectated.
      if (IsClass(poOriginal,&User)
         AND poCaster = poMaster
         AND Send(poOriginal,@IsInCannotInteractMode))
      {
         piBehavior |= AI_NPC | AI_NOMOVE;
         if (poOwner <> $)
         {
            Send(poOwner,@SomethingChangedFlags,#what=self);
         }
      }

      return;
   }

   GetOriginalInfo()
   {
      if poOriginal = $
      {
         return;
      }

      if IsClass(poOriginal,&Player)
      {
         vrIcon = Send(poOriginal,@GetPlayerIcon);
         piDrawfx = Send(self,@GetDrawingEffects);
         vrName = Send(poOriginal,@GetTrueName);
      }
      else
      {
         vrIcon = Send(poOriginal,@GetIcon);
         piDrawfx = Send(self,@GetDrawingEffects);
         vrName = Send(poOriginal,@GetName);
      }

      piGender = Send(poOriginal,@GetGender);

      return;
   }

   GetMoveOnType()
   {
      if (piBehavior & AI_NPC)
      {
         return MOVEON_YES;
      }

      propagate;
   }

   GetObjectFlags(what = $)
   {
      if poOriginal = $
      {
         return 0;
      }

      // Special case if target is phased and ET is not owned by caster.
      // ET shouldn't display the phased object flags since it will
      // still be active.
      if (poCaster <> poMaster
         AND poMaster <> poOriginal
         AND IsClass(poOriginal,&User)
         AND Send(poOriginal,@IsInCannotInteractMode))
      {
         return Send(poOriginal,@GetObjectFlagsNoPhase);
      }

      return Send(poOriginal,@GetObjectFlags,#what=what);
   }

   GetDrawingEffects()
   {
      if poOriginal = $
      {
         return 0;
      }

      // Special case if target is phased and ET is not owned by caster.
      // ET shouldn't display the phased drawing flags since it will
      // still be active. If the original has captured the ET, it should
      // display the phased effect.
      if (poCaster <> poMaster
         AND poMaster <> poOriginal
         AND IsClass(poOriginal,&User)
         AND Send(poOriginal,@IsInCannotInteractMode))
      {
         return Send(poOriginal,@GetDrawingEffectsNoPhase);
      }

      return Send(poOriginal,@GetDrawingEffects);
   }

   GetPlayerNameColor()
   {
      if poOriginal = $
      {
         return 0;
      }

      return Send(poOriginal,@GetPlayerNameColor);
   }

   GetClientObjectType()
   {
      if poOriginal = $
      {
         return 0;
      }

      return Send(poOriginal,@GetClientObjectType);
   }

   GetOptimalRange()
   {
      return Send(self,@GetAttackRange);
   }

   GetAttackRange()
   {
      local iWeapon;

      if poOriginal = $
      {
         return 0;
      }

      if IsClass(poOriginal,&User)
      {
         iWeapon = Send(poOriginal,@GetWeapon);

         if iWeapon <> $
         {
            return Send(iWeapon,@GetRange);
         }
      }
      else
      {
         return Send(poOriginal,@GetAttackRange);
      }

      return 64;
   }

   // This returns the battler's ability to-hit.
   GetOffense(what = $, stroke_obj=$)
   {
      return Send(poOriginal,@GetOffense,#what=what,#stroke_obj=stroke_obj);
   }

   // This returns the battler's ability to avoid being hit.
   GetDefense(what = $, stroke_obj=$)
   {
      return Send(poOriginal,@GetDefense,#what=what,#stroke_obj=stroke_obj);
   }

   GetDamage(what=$,stroke_obj=$)
   {
      local oStroke, iDamage;

      if poOriginal = $
      {
         return 0;
      }

      oStroke = stroke_obj;
      if IsClass(poOriginal,&Player)
      {
         oStroke = $;
      }
      iDamage = Send(poOriginal,@GetDamage,#what=what,#stroke_obj=oStroke);

      return iDamage * piDamagePercent / 100;
   }

   GetAttackType(what=$,use_weapon=$)
   {
      if poOriginal = $
      {
         return viAttack_type;
      }

      return Send(poOriginal,@GetAttackType,#what=what,#use_weapon=use_weapon);
   }

   GetSpellType(what=$,use_weapon=$)
   {
      if poOriginal = $
      {
         return viSpell_type;
      }

      return Send(poOriginal,@GetSpellType,#what=what,#use_weapon=use_weapon);
   }

   GetKarma(detect=FALSE)
   {
      if detect
      {
         return Send(poOriginal,@GetKarma);
      }

      propagate;
   }

   SomethingChangedFlags(what=$)
   {
      if (what = poOriginal)
      {
         piDrawfx = Send(self,@GetDrawingEffects);

         if poOwner <> $
         {
            Send(poOwner,@SomethingChangedFlags,#what=self);
         }
      }

      propagate;
   }

   SomethingChanged(what=$)
   {
      local oWeapon, iRange, i;

      if what = poOriginal
      {
         piDrawfx = Send(self,@GetDrawingEffects);

         // Reset plActions.
         plActions = [[SKID_MINIMUM,0,0,MAX_KOD_INT,50,1,99,COMBAT_ACTION_NEUTRAL]];

         // Gotta get the evil twin's correct action list.
         if IsClass(poOriginal,&User)
         {
            oWeapon = Send(poOriginal,@GetWeapon);

            if oWeapon <> $
            {
               iRange = Send(oWeapon,@GetRange);
               iRange *= iRange;

               if IsClass(oWeapon,&RangedWeapon)
                  OR IsClass(oWeapon,&ThrownWeapon)
               {
                  plActions = Cons([SKID_FIRE,0,0,iRange,100,1,99,COMBAT_ACTION_HARM],plActions);
               }
               else
               {
                  plActions = Cons([SKID_SLASH,0,0,iRange,100,1,99,COMBAT_ACTION_HARM],plActions);
               }
            }
            else
            {
               plActions = Cons([SKID_SLASH,0,0,4096,100,1,99,COMBAT_ACTION_HARM],plActions);
            }
         }
         else
         {
            iRange = Send(poOriginal,@GetMeleeRange);
            iRange *= iRange;
            plActions = Cons([SKID_SLASH,0,0,iRange,100,1,99,COMBAT_ACTION_HARM],plActions);

            iRange = Send(poOriginal,@GetFireRange);
            iRange *= iRange;
            plActions = Cons([SKID_FIRE,0,0,iRange,100,1,99,COMBAT_ACTION_HARM],plActions);
         }

         if poOwner <> $
         {
            Send(poOwner,@SomethingChanged,#what=self);
         }
      }

      propagate;
   }

   DoWave()
   "Causes the EvilTwin to wave."
   {
      Send(self,@GetOriginalInfo);
      piAnimation = PANM_WAVE;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   DoPoint()
   {
      Send(self,@GetOriginalInfo);
      piAnimation = PANM_POINT;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   DoDance()
   {
      Send(self,@GetOriginalInfo);
      piAnimation = PANM_DANCE;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   SetOriginal(who=$)
   {
      if who = $
      {
         Post(self,@Delete);

         return;
      }

      poOriginal = who;
      Send(self,@GetOriginalInfo);

      return;
   }

   GetIcon()
   {
      return Send(poOriginal,@GetIcon);
   }

   DoMeleeAnimation()
   "Handles melee attack animation."
   {
      local oWeapon, oAmmo, i;

      Send(self,@GetOriginalInfo);

      if IsClass(poOriginal,&User)
      {
         oWeapon = Send(poOriginal,@GetWeapon);

         if oWeapon <> $
         {
            if IsClass(oWeapon,&TouchAttackSpell)
            {
               piAnimation = PANM_CAST;
            }
            else
            {
               piAnimation = PANM_WEAPON_ATTACK;
            }
         }
         else
         {
            piAnimation = PANM_FIST_ATTACK;
         }
      }
      else
      {
         piAnimation = Send(poOriginal,@GetMeleeAnimation);
      }

      Send(poOwner,@SomethingChanged,#what=self);

      if IsClass(poOriginal,&User)
      {
         piAnimation = PANM_NONE;
      }
      else
      {
         piAnimation = ANIM_NONE;
      }

      return;
   }

   DoMissileAnimation()
   "Handles ranged attack animation. Default is same as melee."
   {
      local oWeapon, oAmmo, i;

      Send(self,@GetOriginalInfo);

      if IsClass(poOriginal,&User)
      {
         oWeapon = Send(poOriginal,@GetWeapon);

         // Default.
         oAmmo = poArrow;

         if IsClass(oWeapon,&Bow)
         {
            piAnimation = PANM_BOW_FIRE;

            foreach i in Send(poOriginal,@GetPlayerUsing)
            {
               if Send(i,@GetItemUseType) = ITEM_USE_QUIVER
               {
                  oAmmo = i;
               }
            }

            Send(poOwner,@SomethingShot,#who=self,#target=poTarget,
                  #projectile=oAmmo,#flags=PROJ_FLAG_LIGHT_SOURCE);
         }
         else if IsClass(oWeapon,&ThrownWeapon)
         {
            piAnimation = PANM_WEAPON_ATTACK;
            Send(poOwner,@SomethingShot,#who=self,#target=poTarget,
                  #projectile=oWeapon,#flags=PROJ_FLAG_LIGHT_SOURCE);
         }
         else
         {
            piAnimation = PANM_FIST_ATTACK;
         }
      }
      else
      {
         piAnimation = Send(poOriginal,@GetFireAnimation);

         // If original fires a projectile, we send one too.
         if Send(poOriginal,@GetProjectileIcon) <> $
         {
            Send(poOwner,@SomethingShot,#who=self,#target=poTarget,
                  #projectile=poOriginal,#flags=PROJ_FLAG_LIGHT_SOURCE);
         }
      }

      Send(poOwner,@SomethingChanged,#what=self);

      if IsClass(poOriginal,&User)
      {
         piAnimation = PANM_NONE;
      }
      else
      {
         piAnimation = ANIM_NONE;
      }

      return;
   }

   MonsterCastAnimation(iSpellNum=$)
   "If a monster has a special cast animation, call this."
   {
      local oWeapon, oAmmo, i;

      Send(self,@GetOriginalInfo);

      if IsClass(poOriginal,&User)
      {
         piAnimation = PANM_CAST;
      }
      else
      {
         piAnimation = Send(poOriginal,@GetCastAnimation);
      }

      Send(poOwner,@SomethingChanged,#what=self);

      if IsClass(poOriginal,&User)
      {
         piAnimation = PANM_NONE;
      }
      else
      {
         piAnimation = ANIM_NONE;
      }

      return;
   }

   // The next three messages deal with the three defense skills.
   // These messages return the relative values of the three
   // skills.  Used in player for defense, used in battler for defense messages.
   GetParryAbility(stroke_obj=$)
   {
      return Send(poOriginal,@GetParryAbility,#stroke_obj=stroke_obj);
   }

   GetBlockAbility(stroke_obj=$)
   {
      return Send(poOriginal,@GetBlockAbility,#stroke_obj=stroke_obj);
   }

   GetDodgeAbility(stroke_obj=$)
   {
      return Send(poOriginal,@GetDodgeAbility,#stroke_obj=stroke_obj);
   }

   ShowDesc()
   {
      Send(poOriginal,@ShowDesc);

      return;
   }

   SendMoveAnimation()
   {
      // Make it look like EvilTwin is walking

      Send(poOriginal,@SendMoveAnimation);

      return;
   }

   SendMoveOverlays()
   {
      Send(poOriginal,@SendMoveOverlays);

      return;
   }

   SendAnimation()
   {
      Send(poOriginal,@SendAnimation,#iAnimation=piAnimation);

      return;
   }

   SendOverlays()
   {
      Send(poOriginal,@SendOverlays,#iAnimation=piAnimation);

      return;
   }

   GetIllusionForm()
   {
      return poOriginal;
   }

   TryLook(what=$)
   {
      if what = $
      {
         return;
      }

      if poOriginal = $
      {
         return;
      }

      if IsClass(poOriginal,&User)
      {
         if Send(poOriginal,@CheckPlayerFlag,#flag=PFLAG_INVISIBLE)
            AND (what <> poOriginal)
         {
            return;
         }

         Send(what,@SendLookPlayer,#what=poOriginal);
      }
      else
      {
         Send(poOriginal,@TryLook,#what=what);
      }

      return;
   }

   SpecialHatredBehavior(what=$)
   {
      // Trying to reduce the tendency of reflections to turn on themselves
      //  or their master.
      if IsClass(what,&Revenant)
         OR IsClass(what,&EvilTwin)
      {
         return -20000;
      }

      return 0;
   }

   GetCaster()
   {
      return poCaster;
   }

   CanEvilTwin()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
