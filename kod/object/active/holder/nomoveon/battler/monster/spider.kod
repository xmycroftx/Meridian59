// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Spider is Monster

constants:

   include blakston.khd

resources:

   include spider.lkod

   spider_koc_name_rsc = "teotkauilkinich"
   spider_name_rsc = "spider"
   spider_icon_rsc = spider.bgf
   spider_desc_rsc = \
      "This strangely delicate creature moves with stealth and strikes "
      "with deadly precision."

   spider_dead_icon_rsc = spiderX.bgf
   spider_dead_name_rsc = "dead spider"

   spider_sound_hit = spd_atkh.ogg
   spider_sound_miss = spd_atkm.ogg
   spider_sound_death = spd_dth.ogg
   spider_sound_aware = spd_awr.ogg

classvars:
   vrKocName = spider_koc_name_rsc
   vrName = spider_name_rsc
   vrIcon = spider_icon_rsc
   vrDesc = spider_desc_rsc
   vrDead_icon = spider_dead_icon_rsc
   vrDead_name = spider_dead_name_rsc

   // This monster poisons enemies...
   viPoisonChance = 3
   viPoisonStrength = 1000
   viPoisonDuration = 180000
   viPoisonHealth = 25
   viPoisonVigor = 10

   vbCanSiphon = FALSE

   viTreasure_type = TID_MEDIUM_TOUGH
   viSpeed = SPEED_AVERAGE
   viAttack_type =  ATK_TYPE_BITE
   viAttributes = MOB_SPASM
   viLevel = 50
   viDifficulty = 4
   viVisionDistance = 9
   viKarma = -30
   viDefault_behavior = AI_FIGHT_AGGRESSIVE
   viWimpy = 30
   viCashmin = -100
   viCashmax = 300
   vrSound_hit = spider_sound_hit
   vrSound_miss = spider_sound_miss
   vrSound_aware = spider_sound_aware
   vrSound_death = spider_sound_death

properties:

   piAnimation = ANIM_NONE

   // Counter used for special mob behavior, such as spawning web.
   piCounter = 0

messages:

   Constructed()
   {
      plResistances = [ [-SPL_TYPE_ALL, 50 ],
                        [ATK_TYPE_MAGIC, 50 ],
                        [ATK_TYPE_NONMAGIC, -15 ] ];

      propagate;
   }

   DoSpasm()
   {
      Send(self,@DoLegSpasm);

      propagate;
   }

   DoLegSpasm()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,150,2,1,2,3);

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE);
      AddPacket(4,200,2,1,2,1);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,200,2,1,2,3,2,1);

         return;
      }

      propagate;
   }

   IsAlliedClass(what=$)
   {
      if IsClass(what,&DeathSpider)
         OR IsClass(what,&SpiderBaby)
         OR IsClass(what,&SpiderQueen)
      {
         return TRUE;
      }

      propagate;
   }

   // Spiders leave a trail of webs when fleeing.
   DoFleeingRoutine()
   {
      local oElement;

      if piCounter < 100
      {
         ++piCounter;

         if piCounter % 6 = 0
         {
            // [(1)caster,(2)spellpower,(3)duration,(4)charges,(5)speed,(6)direction,(7)step,(8)noise,(9)curve]
            oElement = Create(&Web,#seed=[self,20,10000,0,0,0,0,0,0]);
            Send(poOwner,@NewHold,#what=oElement,#new_row=piRow,#new_col=piCol,
                 #fine_row=piFine_row,#fine_col=piFine_col);
         }
      }

      return;
   }

   // Recharge glands.
   EnterStateLimbo()
   {
      piCounter = 0;

      propagate;
   }

   CanBeWebbed()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
