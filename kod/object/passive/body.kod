// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
DeadBody is PassiveObject

constants:

   include blakston.khd
   include protocol.khd

resources:

   include body.lkod

   deadbody_desc_rsc = "This is a dead, decomposing %s, slain by %q."
   deadbody_named_mob_rsc = "The dead body of %s, slain by %q."
   deadbody_player_desc_rsc = \
      "The dead body of %q, decomposing quickly in the living air of Meridian."
   deadbody_assassinated_rsc = "Here lies %q, slain by an unknown assassin."
   deadbody_follower_rsc = \
      "This dutiful follower has sustained grave injuries in battle and "
      "temporarily lost consciousness."

classvars:

   vrDesc = deadbody_desc_rsc
   vrPlayer_desc = deadbody_player_desc_rsc
   vrNamed_Mob_Desc = deadbody_named_mob_rsc

   vrAssassinated_desc = deadbody_assassinated_rsc
   vrFollower_desc = deadbody_follower_rsc
   viIndefinite = ARTICLE_A

properties:

   vrName
   vrIcon

   ptDelete = $
   ptNoSteal = $

   prMonster_name = $

   prPlayer_name = $
   pbWas_good_player = FALSE
   pbMob = FALSE
   pbFollower = FALSE
   pbNamedMob = FALSE
   pbAssassinated = FALSE

   piDrawfx = 0

   prPlayerBodyOverlay = $
   piBodyTrans = 0
   piLegsTrans = 0

   poDearlyDeparted = $
   piTimeOfDeath = $

   pbResurrected = FALSE
   poVictim = $

messages:

   Constructor(victim = $,killer = $,oRoom = $, assassinated = FALSE,
         drawfx = 0, BodyTranslation = 0, LegsTranslation = 0,
         PlayerBodyOverlay = $, Decomposes = TRUE, bFollower = FALSE)
   {
      vrName = Send(victim,@GetDeadName);
      vrIcon = Send(victim,@GetDeadIcon);
      poVictim = victim;
      pbMob = IsClass(victim,&Monster);
      pbFollower = bFollower;
      piDrawfx = drawfx;
      pbAssassinated = assassinated;
      prPlayerBodyOverlay = PlayerBodyOverlay;
      piBodyTrans = BodyTranslation;
      piLegsTrans = LegsTranslation;
      piTimeOfDeath = GetTime();

      if Decomposes
      {
         if pbMob
         {
            prPlayer_name = Send(killer,@GetTrueName);
            prmonster_name = Send(victim,@GetName);
            pbNamedMob = Send(victim,@IsNamedMob);
         }
         else
         {
            prPlayer_name = Send(victim,@GetName);
            pbWas_good_player = (Send(victim,@GetKarma) > 0);
            poDearlyDeparted = victim;
         }
      }

      if pbFollower
      {
         ptDelete = CreateTimer(self,@DeleteTimerMessage,
            Send(SETTINGS_OBJECT,@GetFollowerReturnTime));
      }
      else if pbMob
      {
         ptDelete = CreateTimer(self,@DeleteTimerMessage,120000);
      }
      else
      {
         // Make player corpses hang around longer.
         ptDelete = CreateTimer(self,@DeleteTimerMessage,600000);
         Send(Send(SYS,@FindRoomByNum,#num=RID_UNDERWORLD),@NewDeath,
               #what=self,#oRoom=oRoom);
      }

      // Only the killer can pick up things for the first 25 seconds.
      ptNoSteal = CreateTimer(self,@NoStealTimer,25000);

      propagate;
   }

   NoStealTimer()
   {
      ptNoSteal = $;

      return;
   }

   CanGetMe(what=$)
   {
      if ptNoSteal = $
      {
         return TRUE;
      }

      if Send(what,@GetTrueName) = prPlayer_name
      {
         return TRUE;
      }

      return FALSE;
   }

   GetCorpseName()
   {
      return prPlayer_Name;
   }

   Delete()
   {
      if ptDelete <> $
      {
         DeleteTimer(ptDelete);
         ptDelete = $;
      }

      if (NOT pbMob)
      {
         Send(Send(SYS,@FindRoomByNum,#num=RID_UNDERWORLD),@CorpseDecomposed,
               #what=self);
      }

      if ptNoSteal <> $
      {
         DeleteTimer(ptNoSteal);
         ptNoSteal = $;
      }

      if poOwner <> $
      {
         Send(poOwner,@CorpseFading,#corpse=self);
      }

      propagate;
   }

   DeleteTimerMessage(timer = $)
   {
      // In case we want to dispose of the body early.
      if (ptDelete <> $) AND (ptDelete <> timer)
      {
         DeleteTimer(ptDelete);
      }
      else if pbFollower
      {
         Send(poVictim,@FollowerReturn,#oBody=self);
      }

      ptDelete = $;

      Send(self,@Delete);

      return;
   }

   DestroyDisposable()
   {
      return;
   }

   ShowDesc()
   {
      // Need to do STRING_RESOURCE for names because
      // player might not be logged in.
      if pbFollower
      {
         AddPacket(4,vrFollower_desc);

         return;
      }

      if pbMob
      {
         if NOT pbNamedMob
         {
            AddPacket(4,vrDesc, 4,prMonster_name, STRING_RESOURCE,prPlayer_name);
         
            return;
         }
         else
         {
            AddPacket(4,vrNamed_Mob_Desc, 4,prMonster_name,
                      STRING_RESOURCE,prPlayer_name);
         
            return;
         }
      }

      if pbAssassinated
      {
         AddPacket(4,vrAssassinated_desc, STRING_RESOURCE,prPlayer_name);
      }

      AddPacket(4,vrPlayer_desc, STRING_RESOURCE,prPlayer_name);

      return;
   }

   WasGoodPlayer()
   {
      if pbMob
      {
         return TRUE;
      }

      return pbWas_good_player;
   }

   WasPlayer()
   {
      return (NOT pbMob);
   }

   WasIllusion()
   {
      if (poVictim <> $)
      {
         return Send(poVictim,@IsIllusion);
      }

      return FALSE;
   }

   GetVictimName()
   {
      if (poVictim <> $)
      {
         return Send(poVictim,@GetName);
      }

      Debug("Tried to get name from corpse with $ victim! vrName is ", vrName);

      return vrName;
   }

   SendAnimation()
   {
      if piBodyTrans <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piBodyTrans);
      }

      AddPacket(1,ANIMATE_NONE, 2,1);

      return;
   }

   SendOverlays()
   {
      if (prPlayerBodyOverlay <> $)
      {
         // one overlay
         AddPacket(1,1);
         // hotspot = 1
         AddPacket(4,prPlayerBodyOverlay, 1,1);

         if piLegsTrans <> 0
         {
            AddPacket(1,ANIMATE_TRANSLATION, 1,piLegsTrans);
         }

         AddPacket(1,ANIMATE_NONE, 2,1);

         return;
      }

      propagate;
   }

   GetDearlyDeparted()
   {
      return poDearlyDeparted;
   }

   GetTimeOfDeath()
   {
      return piTimeOfDeath;
   }

   UpdateTimeValues()
   {
      piTimeOfDeath = GetTime();

      return;
   }

   // Next two messages are for portal of life.  Checks if the body was
   // resurrected already or not, to prevent multiple castings.
   SetResurrected()
   {
      pbResurrected = TRUE;

      return;
   }

   GetResurrected()
   {
      return pbResurrected;
   }

end
////////////////////////////////////////////////////////////////////////////////
