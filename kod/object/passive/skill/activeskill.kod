// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
ActiveSkill is Skill

constants:
   include blakston.khd

resources:

   include activeskill.lkod

   ActiveSkill_wrong_weapon_rsc = "You are not wielding a suitable weapon for this attack."
   ActiveSkill_no_weapon_rsc = "You can't use this skill with your bare hands!"
   ActiveSkill_no_targets_rsc = "There is nothing to attack within your weapon's range."

classvars:

   viSignatureBuffSID = $
   vbIsRangedAttack = FALSE
   vbIsMeleeAttack = FALSE
   vbIsUnarmedAttack = FALSE

properties:

messages:

   IsActiveSkill()
   "Active skills can be 'performed' by a player or monster, like a spell."
   "Override to return TRUE for active skills."
   {
      return TRUE;
   }

   PerformSkill(who=$,lTargets=$)
   {
      // Check for advancement conditions.
      Send(self,@ImproveAbility,#who=who);

      Send(who,@SetAttackTime,#time=viPostPerform_time);

      Send(self,@PlaySkillSound,#room_obj=Send(who,@GetOwner),#what=who);

      return;
   }

   PerformSecondarySkill(who=$,lTargets=$)
   {
      return;
   }

   CanPayCosts(who=$,lTargets=$)
   {
      local oSpell, oWeapon, bRanged;

      // Check attack timer without setting a timer.
      // Setting the timer is done in PerformSkill().
      if NOT Send(who,@CheckAttackTimer)
      {
         return FALSE;
      }

      // Make sure we are using an appropriate weapon.
      oWeapon = Send(who,@GetWeapon);

      if oWeapon = $
      {
         if NOT vbIsUnarmedAttack
         {
            Send(who,@MsgSendUser,#message_rsc=ActiveSkill_no_weapon_rsc);

            return FALSE;
         }
      }
      else if NOT IsClass(oWeapon,&Weapon)
      {
         Send(who,@MsgSendUser,#message_rsc=ActiveSkill_wrong_weapon_rsc);

         return FALSE;
      }
      // Assume both can use ranged active skills.
      else if IsClass(oWeapon,&RangedWeapon)
         OR IsClass(oWeapon,&ThrownWeapon)
      {
         if NOT vbIsRangedAttack
         {
            Send(who,@MsgSendUser,#message_rsc=ActiveSkill_wrong_weapon_rsc);

            return FALSE;
         }
      }
      else if NOT vbIsMeleeAttack
      {
         Send(who,@MsgSendUser,#message_rsc=ActiveSkill_wrong_weapon_rsc);

         return FALSE;
      }

      // If the skill is an attack, it needs some targets.
      if (vbIsMeleeAttack OR vbIsRangedAttack OR vbIsUnarmedAttack)
         AND (lTargets = $)
      {
         Send(who,@MsgSendUser,#message_rsc=ActiveSkill_no_targets_rsc);
      }

      if viSignatureBuffSID <> $
      {
         oSpell = Send(SYS,@FindSpellByNum,#num=viSignatureBuffSID);

         // Don't perform if the associated skill proc is already active and
         // all charges have been used up.
         if Send(who,@IsEnchanted,#what=oSpell)
            AND NOT (Send(who,@GetEnchantedState,#what=oSpell) / 1000)
         {
            return FALSE;
         }
      }

      propagate;
   }

   SkillFailed(who=$)
   "Active skills will delay actions by their post perform time if they fail."
   {
      Send(who,@SetAttackTime,#time=viPostPerform_time);

      propagate;
   }

end

////////////////////////////////////////////////////////////////////////////////
