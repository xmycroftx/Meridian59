// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
SeraphymQuest is QuestTemplate
// QST_ID_POLISH_SERAPHYM = 32
// Quest nodes 98, 99.
// QNT_ID_POLISHED_SERAPHYM_ONE, QNT_ID_POLISHED_SERAPHYM_TWO

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include seraphymqt.lkod

   // Quest description.
   seraphymquest_icon_rsc = serappol.bgf
   seraphymquest_name_rsc = "Gem Trade"
   seraphymquest_desc_rsc = \
      "%s is looking to hone their jeweling skills, and would like you to "
      "obtain some uncut seraphym for them to practice on.  For a delivery "
      "of three uncut gems, %s will give you one of the resulting polished "
      "gems."

   seraphymquest_deliver_rsc = \
      "%s is honing %s jeweling skills, and has asked if you have any "
      "uncut seraphym to spare.  In return, %s has offered to give you "
      "one of the resulting polished gems."

   seraphymquest_completed_rsc = \
      "You have traded in a few of your rough, uncut seraphym gems for "
      "a shiny new polished seraphym."

   // Quest resources.
   polishquest_assign = \
      "Excuse me.  I’ve been honing my jeweling skills, and I was wondering "
      "if you have any uncut gems of any sort.  If you do, I’d be happy to "
      "polish them and give you one of the result."
   polishquest_success = \
      "Ah, thank you.  Allow me to reward you."
   polishquest_failure = \
      "Subject: Gem polishing\n"
      "Never mind about the uncut gems, I found some from someone else.  "
      "Thanks, though."

classvars:

   vrIcon = seraphymquest_icon_rsc
   vrName = seraphymquest_name_rsc
   vrDesc = seraphymquest_desc_rsc

   vrNodeTwo = seraphymquest_deliver_rsc

   vrCompleted = seraphymquest_completed_rsc

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_POLISH_SERAPHYM

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE
   plSpecialRestrict = $
   piMaxPlayers = 10
   piSchedulePct = 100
   piTimeLimit = 2 * 3600 // 2 hours.

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_POLISHED_SERAPHYM_ONE,
                      QNT_ID_POLISHED_SERAPHYM_TWO];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_POLISHED_SERAPHYM_TWO, vrNodeTwo] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oNPC, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #98 is polish seraphym quest
      // QNT_ID_POLISHED_SERAPHYM_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_SHOWUP,
               #quest_node_index=QNT_ID_POLISHED_SERAPHYM_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TosApothecary)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&MarionElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&KocatanShopkeeper)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueMerchant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_POLISHED_SERAPHYM_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_POLISHED_SERAPHYM_ONE");
      }

      // Template #99 is polish seraphym quest
      // QNT_ID_POLISHED_SERAPHYM_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEMFINDCLASS,
               #NPC_modifier=QN_NPCMOD_SAME,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &UncutSeraphym, 3 ] ],
               #prizelist=[ [ QN_PRIZETYPE_ITEMCLASS, &PolishedSeraphym, 1 ] ],
               #timelimit=12 * 3600,#quest_node_index=QNT_ID_POLISHED_SERAPHYM_TWO)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_POLISHED_SERAPHYM_TWO,
               #new_hint=polishquest_assign);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_POLISHED_SERAPHYM_TWO,
               #new_hint=polishquest_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_POLISHED_SERAPHYM_TWO,
               #new_hint=polishquest_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_POLISHED_SERAPHYM_TWO");
      }

      return;
   }

   ShowQuestUIDescRsc(who = $, oNPC = $)
   {
      local rName;

      if (oNPC = $)
      {
         Debug("Missing NPC while building quest UI description!");
         rName = system_blank_resource;
      }
      else
      {
         rName = Send(oNPC,@GetName);
      }

      AddPacket(4,vrDesc, 4,rName, 4,rName);

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oNPC;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      if index = QNT_ID_POLISHED_SERAPHYM_TWO
      {
         oNPC = Send(oQuestNode,@GetSourceNPC);
         if oNPC = $
         {
            return;
         }

         AddPacket(4,Send(oNPC,@GetName), 4,Send(oNPC,@GetHisHer),
                   4,Send(oNPC,@GetHeShe));
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
