// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Skill is PassiveObject 

constants:

   include blakston.khd

   SKILL_MURMUR_SQUARED = 64

resources:

   include skill.lkod

   skill_name_rsc = "skill"
   skill_icon_rsc = light.bgf
   skill_desc_text_rsc = "This is a skill."
   skill_intro_rsc = "One of several agile skills."

   skill_bad_target = "You can't cast %s on %s%s!"
   skill_out_of_range = "%s%s is out of range."

   skill_too_tired = "You are too tired to use your %s skill!"
   skill_failed_by_chance = "Your %s attempt was unsuccessful."
   
   skill_sound_fail = spelfail.ogg

   skill_desc_school = "SCHOOL : %s"
   skill_desc_level = "LEVEL : %i"
   skill_desc_rsc = "%s%r%r"
   skill_school_weaponcraft = "Weaponcraft"
   skill_school_dm = "DM"

   skill_meditate_ratio_rsc = \
      "\n\nIt will cost you %i training points to improve in this skill."

   skill_nothing = " "

   skill_gesture_third = \
      "%s%s readies %s weapon."
   skill_gesture_third_target = \
      "%s%s readies %s weapon, %s eyes fixed on %s%s."
   skill_you = "you"

   skill_trance_begin = "You focus your whole will on performing %s."

   skill_no_targets = "There are no proper targets for %s."

   skill_trance_break = "Your preparations to perform %s are interrupted."

   skill_no_rest = "You can't perform a skill while resting!"

   skill_trance_complete = "You finish preparing your %s skill!"

   skill_trance_fumble = "You struggle to perform your %s skill!"

   skill_trance_cancel = \
      "You abandon your attempt to perform the %s skill."

   skill_fail_wav = doorlck.ogg

   skill_trance_begin_sound = spell_trance_begin.ogg
   skill_trance_break_sound = spell_trance_break.ogg
   skill_trance_cancel_sound = spell_trance_cancel.ogg

classvars:

   vrName = skill_name_rsc
   vrIcon = skill_icon_rsc
   vrDesc = skill_desc_text_rsc
   vrSkill_intro = skill_intro_rsc

   vrFailed = skill_failed_by_chance
   vrSucceed_wav = $

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = $
   viSchool = $

   viSkill_level = 1

   // Initial chance to increase, modified by Intellect.
   viChance_to_Increase = 25

   // This is NOT the same as the chance to increase. This determines how
   // many training points a player needs to spend per improvement. So it's
   // not x improvements in 100 attempts, but 1 improvement per X points.
   viMeditate_ratio = 100

   viskillExertion = 2
   vbCheck_Exertion = TRUE

   // Similar to cast time for spells.
   viPreperation_time = 0

   // Similar to post cast time for spells.
   viPostPerform_time = 1000

   // Shows up on pull-down menus, if FALSE some skills, like Parry and Dodge,
   //  are solely passive, and are TRUE
   vbAutomatic = FALSE

   // Default animation speed for icon if set to 0, then no animation.
   viAnimationSpeed = 0

   viAnimation_start = 1
   viAnimation_end = 1
   viIcon_animation_start = 2
   viIcon_animation_end = 2

   vbIsAreaEffect = FALSE

   vbReportTrance = TRUE
   vbCanBreakTrance = TRUE

properties:

   plPrerequisites = $
   piMeditate_ratio = 100

messages:

   Constructed()
   {
      piMeditate_ratio = viMeditate_ratio;

      propagate;
   }

   Delete()
   {
      Send(SYS,@Deleteskill,#what=self);

      propagate;
   }

   GetSchoolStr(iSchool=-1)
   {
      local rSchool;

      if iSchool = -1
      {
         iSchool = viSchool;
      }

      if iSchool = SKS_WEAPONCRAFT
      {
         rSchool = skill_school_weaponcraft;
      }
      else if iSchool = SKS_DM
      {
         rSchool = skill_school_dm;
      }

      return rSchool;
   }

   // WARNING: Skills display a custom description, don't override this
   // message unless you are sure you know what the effect will be if a
   // user tries to look at the overridden skill's description.
   ShowDesc(who=$)
   {
      local rSchool;

      if viSchool = SKS_DM
      {
         rSchool = skill_school_dm;
      }
      else
      {
         rSchool = skill_school_weaponcraft;
      }

      // Skill info, then description.
      AddPacket(4,skill_desc_school, 4,rSchool,
                4,skill_desc_level,4,viSkill_level,
                4,skill_desc_rsc, 4,vrDesc);

      // Add time resource if appropriate.
      Send(self,@SendTimeDesc,#who=who);

      // Add meditate ratio.
      if piMeditate_ratio = 0
      {
         AddPacket(4,skill_nothing);
      }
      else
      {
         AddPacket(4,skill_meditate_ratio_rsc,4,piMeditate_ratio);
      }

      return;
   }

   SendTimeDesc()
   {
      AddPacket(4,skill_nothing);

      return;
   }

   GetValue()
   {
      local i, j;

      i = 1;
      j = 2;

      while i++ < viSkill_level
      {
         j *= 2;
      }

      return 250 * j;
   }

   GetSchool()
   {
      return viSchool;
   }

   IsActiveSkill()
   "Active skills can be 'performed' by a player or monster, like a spell."
   "Override to return TRUE for active skills."
   {
      return FALSE;
   }

   GetNumSkillTargets()
   "Most skills are passive and don't require a target."
   {
      return 0;
   }

   KarmaCheck()
   {
      return TRUE;
   }

   GetDivision()
   {
      return LEARN_DIVISION_COMBAT;
   }

   GetDivisionReq(who=$)
   {
      return Send(who,@GetAgility);
   }

   GetPrimaryStat()
   {
      if (viSkill_Num = SKID_DEFAULT)
         OR (viSkill_Num = SKID_BRAWLING)
         OR (viSkill_Num = SKID_PROFICIENCY_MACE)
         OR (viSkill_Num = SKID_PROFICIENCY_HAMMER)
      {
         return STAT_ID_MIGHT;
      }

      if (viSkill_Num = SKID_SECOND_WIND)
      {
         return STAT_ID_STAMINA;
      }

      if (viSkill_Num = SKID_DODGE)
         OR (viSkill_Num = SKID_PARRY)
         OR (viSkill_Num = SKID_ASSESS)
         OR (viSkill_Num = SKID_BLOCK)
         OR (viSkill_Num = SKID_DISARM)
         OR (viSkill_Num = SKID_SLASH)
         OR (viSkill_Num = SKID_THRUST)
         OR (viSkill_Num = SKID_PUNCH)
         OR (viSkill_Num = SKID_KICK)
         OR (viSkill_Num = SKID_PROFICIENCY_SCIMITAR)
         OR (viSkill_Num = SKID_PROFICIENCY_AXE)
      {
         return STAT_ID_AGILITY;
      }

      if (viSkill_Num = SKID_FIRE)
         OR (viSkill_Num = SKID_PROFICIENCY_SWORD)
         OR (viSkill_Num = SKID_PROFICIENCY_BOW)
         OR (viSkill_Num = SKID_PROFICIENCY_SHORT_SWORD)
         OR (viSkill_Num = SKID_PROFICIENCY_SHORTSWORD)
      {
         return STAT_ID_AIM;
      }
      
      return;
   }

   GetSkillNum()
   {
      return viSkill_Num;
   }

   GetAbility(who=$)
   {
      return Send(who,@GetSkillAbility,#skill_num=viSkill_num);
   }

   GetPrerequisites()
   {
      return plPrerequisites;
   }

   InitialAbility(who=$)
   "This is the ability level that the target player starts at."
   {
      local iRequisiteStat;

      iRequisiteStat = Send(self,@GetRequisiteStat,#who=who);

      return Bound(Random(iRequisiteStat/2,iRequisiteStat)/2,1,25);
   }

   GetMeditateRatio()
   {
      return piMeditate_ratio;
   }

   SetMeditateRatio(points=0)
   {
      if points > 0
      {
         piMeditate_ratio = points;
      }

      return;
   }

   ResetMeditateRatio()
   {
      piMeditate_ratio = viMeditate_ratio;

      return;
   }

   CanPayCosts(who=$,lTargets=$)
   "If a skill requires a special cost or requirement of some sort, that"
   "cost goes here.  Example: picking locks may require thieves tools."
   {
      local oTarget, oOwner, i, oSpell;

      oSpell = Send(SYS,@FindSpellByNum,#num=SID_FORGET);
      if Send(oSpell,@HasForgetEnchantment,#who=who,#what=self)
      {
         return FALSE;
      }

      if NOT Send(who,@HasVigor,#precision=TRUE,#amount=viSkillExertion*10)
         AND vbCheck_Exertion
      {
         Send(who,@MsgSendUser,#message_rsc=skill_too_tired,#parm1=vrName);

         return FALSE;
      }

      oOwner = Send(who,@GetOwner);

      if lTargets <> $
      {
         oTarget = First(lTargets);
      }

      if oTarget <> $ AND oOwner <> Send(oTarget,@GetOwner)
      {
         Send(who,@MsgSendUser,#message_rsc=skill_out_of_range, 
               #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

         return FALSE;
      }

      // Used skill flips atrophy flag
      Send(who,@FlipSkillAtrophyFlag,#SKID=viSkill_num);

      return TRUE;
   }

   SkillCanceled(who=$)
   "Canceling a skill will refund half of the skills cost."
   {
      Send(who,@GainVigor,#precision=TRUE,#amount=(10*viSkillExertion)/2);

      return;
   }

   SuccessChance(who=$,modifier=0,lTargets=$)
   "For strokes, this is always true, because stroke success is figured in"
   "other procedures of player kod.  Modifier indicates the plusses "
   "(or minuses, if negative) to apply to the chance"
   {
      local iRequisiteStat,iAbility,num;

      iRequisiteStat = Send(self,@GetRequisiteStat,#who=who);
      iAbility = Send(who,@GetSkillAbility,#skill_num=viSkill_num);
      num = ((100-iRequisiteStat)*iAbility/100) + iRequisiteStat;
      num += modifier;

      if Random(1,100) > num
      {
         return FALSE;
      }

      return TRUE;
   }

   PayCosts(who=$,modifier=0,bSuccess=TRUE)
   "Some skills may require certain stats to be depleted."
   "return TRUE if they were successfully depleted."
   {
      if NOT (bSuccess OR Send(SETTINGS_OBJECT,@NoFizzles))
      {
         Send(self,@SkillFailed,#who=who);

         return FALSE;
      }

      // Unlike spell exertion exertion, which represents whole points of vigor,
      // 1 point of skill exertion translates to 0.1 points of vigor.
      Send(who,@LoseVigor,#precision=TRUE,#amount=10*viSkillExertion);

      return TRUE;
   }

   SkillFailed(who=$)
   "A potent skill could have disastrous side effects if failed."
   {
      Send(who,@LoseVigor,#precision=TRUE,#amount=(10*viSkillExertion)/2);
      Send(who,@MsgSendUser,#message_rsc=vrfailed,#parm1=vrName);
      Send(who,@WaveSendUser,#wave_rsc=skill_fail_wav);

      return;
   }

   DoAnimation(who=$)
   "This is put in so eventually, Chris can put in individual animations for"
   "each skill."
   {
      return;
   }

   DoSkill(who = $, oTarget = $)
   "Note: Strokes do not end up calling this routine!"
   "Anything that must be done by all strokes must be put elsewhere!"
   {
      // Do animation.
      Send(self,@DoAnimation,#who=who);

      // Check for advancement conditions.
      Send(self,@ImproveAbility,#who=who,#target=oTarget);  

      return TRUE;
   }

   GetRequisiteStat(who=$)
   "Varies from skill to skill and spell to spell."
   {
      return Send(who,@GetAgility);
   }

   ImproveAbility(who=$,target=$,bonus=0)
   "Made a seperate area by Damion, 3/24."
   "Put initial random check first to reduce server load."
   "ImproveAbility depends on four factors:  a player's intellect, the"
   "player's primerequisite stat for this spell, the level of the spell"
   "and the level the player has already acquired."
   {
      local difficulty, iability, intellect, requisitestat, increase_chance,
            iInitialChance, oOwner;

      // Monsters can cast spells, can't improve in them
      if NOT IsClass(who,&Player)
      {
         return FALSE;
      }

      // players can't advance on anything they can choose to
      //  generate: revenants and illusions
      if target <> $ AND NOT Send(target,@CanPlayerAdvanceOnMe)
      {
         return FALSE;
      }

      if NOT Send(who,@HasSkill,#num=viskill_num)
      {
         return FALSE;
      }

      // Can advance in real death arenas
      if Send(Send(who,@GetOwner),@CheckRoomFlag,#flag=ROOM_SAFE_DEATH)
         AND NOT Send(Send(who,@GetOwner),@ArenaRealDeath)
      {
         return FALSE;
      }

      iInitialChance = Send(self,@GetInitialChance,#who=who);

      if Random(1,100) > iInitialChance
      {
         return FALSE;
      }

      iAbility = Send(who,@GetSkillAbility,#skill_num=viSkill_num);
      if iAbility >= 99 OR iAbility < 1
      {
         return FALSE;
      }

      increase_chance = Send(self,@GetSecondaryChance,#who=who,#target=target,
                              #bonus=bonus);

      oOwner = Send(who,@GetOwner);
      if oOwner <> $
      {
         increase_chance = Send(oOwner,@ModifyChanceToImprove,#who=who,
                                 #oSpellSkill=self,#chance=increase_chance);
      }

      // For times when it's simply impossible to improve.
      if increase_chance = CANNOT_IMPROVE
      {
         return FALSE;
      }

      RequisiteStat = Send(self,@GetRequisiteStat,#who=who);
      increase_chance = Bound(increase_chance,(1+requisitestat/10),99);

      if Random(0,100) < increase_chance
      {
         Send(who,@ChangeSkillAbility,#skill_num=viskill_Num,#amount=1,#report=TRUE);
         Post(who,@DrawOffense);
         Post(who,@DrawDefense);

         // Special case: Second Wind is so essential to resource generation that we
         // want to keep it as a property in battler to cut down on message calls.
         if viskill_Num = SKID_SECOND_WIND
         {
            Send(who,@SetSecondWind,#i=iAbility+1);
         }

         return TRUE;
      }

      return FALSE;
   }

   GetInitialChance(who=$)
   {
      local iBonus, iFaction;

      // Give up to a 50% bonus to the initial chance to learn for high intellect.
      iBonus = (viChance_to_increase * Send(who,@GetIntellect)) / 100;

      iBonus += Send(Send(SYS,@GetParliament),@GetFactionLearnBonus,
                     #who=who,#theskill=self);

      return (viChance_to_increase + iBonus);
   }

   GetSecondaryChance(who=$,target=$,bonus=0)
   {
      local difficulty, iAbility, iRequisiteStat, increase_chance, factor, final;

      iRequisiteStat = Send(self,@GetRequisiteStat,#who=who);

      // 110% base chance at 1st level for 50 requisite stat
      increase_chance = 60 + iRequisiteStat - (Send(self,@GetLevel) * 10);

      // This is the penalty for generalization
      increase_chance -= Send(who,@GetTotalLearnPoints,#except=SKS_WEAPONCRAFT);

      if target <> $
         AND IsClass(target,&Monster)
      {
         difficulty = Bound(Send(target,@GetLevel),1,150);
      }
      else
      {
         difficulty = 60;
      }

      iAbility = Send(who,@GetSpellAbility,#spell_num=viSkill_num);

      // This decreases the imp chance as we go up in level.  It also gives
      //  a better chance to imp on harder monsters.  Adding 10 to compensate
      //  for losing the "knowing more in the school" bonus.
      factor = ((2*difficulty) - (iAbility) + 10);
      factor = Bound(factor,50,100);

      final = (increase_chance * factor)/100;
      final = Bound(final,5,$);

      // Are we above the spells requisite stat?  Apply the "soft cap".
      if iability > ((2 * iRequisiteStat) - 1)
      {
         final /= Bound(Send(SETTINGS_OBJECT,@GetSkillSoftcapPenalty),1,$);
      }

      final = Bound(final,1,$);

      // The global modifier from system.
      final = (final * Send(SETTINGS_OBJECT, @GetAdvancementRate)) / 100;

      return final;
   }

   GetLevel()
   {
      return viSkill_level;
   }

   GetIntro()
   {
      return vrSkill_intro;
   }

   SendAnimation()
   "Send animation for enchantment icon--default is to cycle through all groups"
   {
      if viAnimationSpeed <> 0
      {
         AddPacket(1,ANIMATE_CYCLE, 4,viAnimationSpeed, 2,viAnimation_start,
                   2,viAnimation_end);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viAnimation_start);
      }

      return;
   }

   SendLookAnimation()
   "Send animation for enchantment icon--default is to cycle through all groups"
   {
      if viAnimationSpeed <> 0
      {
         AddPacket(1,ANIMATE_CYCLE, 4,viAnimationSpeed, 2,viIcon_Animation_start,
                   2,viIcon_Animation_end);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viIcon_Animation_start);
      }

      return;
   }

   IsRangedAttack()
   {
      return FALSE;
   }

   GiveAdvice()
   {
      return TRUE;
   }
   
   IsAccessible()
   {
      return TRUE;
   }

   IsAreaEffect()
   {
      return vbIsAreaEffect;
   }

   IsHarmful()
   {
      return TRUE;
   }

   GetTargets(who=$,lTargets=$)
   "This returns an altered list of targets for the skill if appropriate."
   {
      // No change for most skills.
      return lTargets;
   }

   GetAttackTargets(who=$, lTargets=$, report=TRUE)
   "Returns a list of targets the caster can attack."
   {
      local i, lFinalTargets;

      // Monsters can attack anyone.
      if (NOT IsClass(who,&Player))
         OR lTargets = $
         OR NOT Send(self,@IsHarmful)
      {
         return lTargets;
      }

      lFinalTargets = lTargets;

      foreach i in lFinalTargets
      {
         if (NOT Send(self,@SkillAttackCheck,#who=who,#what=i,#report=report))
         {
            lFinalTargets = DelListElem(lFinalTargets,i);
         }
      }

      return lFinalTargets;
   }

   SkillAttackCheck(who = $, what = $,report = TRUE)
   "Checks if 'who' can attack 'what' with this skill."
   {
      if (who = what
            AND Send(self,@GetNumSkillTargets) <> 1)
         OR NOT IsClass(what,&Battler)
         OR NOT Send(who,@AllowBattlerAttack,#victim=what,#stroke_obj=self,
                     #report=report)
      {
         return FALSE;
      }

      return TRUE;
   }

   GetSkillPower(who=$)
   {
      local iAbility, iStat;

      iStat = Send(self,@GetRequisiteStat,#who=who);

      iAbility = (Send(self,@GetAbility,#who=who)+1)/2;

      return iStat + iAbility;
   }

   BeginPerformPreparation(who=$,lTargets=$,bSuccess=TRUE)
   {
      local oTrance, oObject, oOwner, i, oTarget, lFinalTargets,
         iPreperationTime, iSkillPower;

      oOwner = Send(who,@GetOwner);

      iSkillPower = Send(self,@GetSkillPower,#who=who);

      iPreperationTime = Send(self,@GetTranceTime,#who=who,
         #iSkillPower=iSkillPower);

      //If we fumble, we increase cast time by viPostPerform_time
      if NOT bSuccess
         AND Send(SETTINGS_OBJECT,@NoFizzles)
      {
         iPreperationTime += viPostPerform_time;

         Send(who,@MsgSendUser,#message_rsc=skill_trance_fumble,
            #parm1=Send(self,@GetName));
      }

      // Give casting message to people nearby.
      foreach i in Send(oOwner,@GetHolderActive)
      {
         oObject = Send(oOwner,@HolderExtractObject,#data=i);
         if IsClass(oObject,&Player) 
            AND Send(who,@SquaredDistanceTo,#what=oObject)
                < SKILL_MURMUR_SQUARED
            AND who <> oObject
         {
            oTarget = $;
            if length(lTargets) > 0
            {
               oTarget = First(lTargets);
            }

            Send(self,@SkillPreparationMessage,#who=who,#target=oTarget,
                 #hearer=oObject);
         }
      }

      // Is skill executed instantly?
      if iPreperationTime = 0
      {
         // Double-check to get valid targets.
         lFinalTargets = Send(self,@GetGoodTargets,#who=who,#lTargets=lTargets);

         Send(self,@PerformSkill,#who=who,#lTargets=lFinalTargets);

         return;
      }

      // Do anything we want to do before placing the trance, like Send
      //  explanatory messages.  See rescue for an example.
      Send(self,@DoPreTranceEffects,#who=who,#lTargets=lTargets);

      oTrance = Send(SYS,@FindSpellByNum,#num=SID_TRANCE);

      if vbReportTrance
      {
         Send(who,@MsgSendUser,#message_rsc=skill_trance_begin,
              #parm1=Send(self,@GetName));
         Send(who,@WaveSendUser,#wave_rsc=skill_trance_begin_sound);
      }

      Send(oTrance,@BeginTrance,#what=self,#who=who,#lTargets=lTargets,
           #time=iPreperationTime,#power=iSkillPower);

      return;
   }

   DoPreTranceEffects(who=$,lTargets=$)
   {
      return;
   }

   DoubleCheckAfterTrance(who=$, lTargets = $)
   {
      if IsClass(who,&User) AND Send(who,@IsResting)  
      {
         Send(who,@MsgSendUser,#message_rsc=skill_no_rest);

         return FALSE;
      }

      if (Send(self,@IsHarmful)
            AND IsClass(who,&User)
            AND NOT Send(self,@CheckPlayerPerformAttack,#who=who,#lTargets=lTargets))
      {
         return FALSE;
      }

      if NOT Send(self,@IsHarmful)
         AND NOT Send(self,@CheckPlayerHelp,#who=who,#lTargets=lTargets)
      {
         return FALSE;
      }

      return TRUE;
   }

   CheckPlayerPerformAttack(who=$,lTargets=$)
   "Checks to see if player can attack said targets."
   {
      // Don't perform the ability if there are no valid targets.
      if (lTargets = $ OR Length(lTargets) = 0)
         AND (Send(self,@GetNumSkillTargets) <> 0)
      {
         Send(who,@MsgSendUser,#message_rsc=skill_no_targets,
            #parm1=Send(self,@GetName));

         return FALSE;
      }

      return TRUE;
   }

   CheckPlayerHelp(who=$, lTargets=$)
   "Checks to see if the player can perform the beneficial skill on said targets."
   {
      local oObject, oOwner;

      // Immortal DMs bypass safety checks.
      if (who <> $
         AND IsClass(who,&DM)
         AND Send(who,@PlayerIsImmortal))
      {
         return TRUE;
      }

      // If lTargets is $, then we're performing a room-effect skill, let it go.
      foreach oObject in lTargets
      {
         oOwner = Send(oObject,@GetOwner);
         // If we're in the arena, we can cast it.
         if IsClass(oObject,&Battler)
            AND (oOwner <> $ AND Send(oOwner,@IsArena))
         {
            return TRUE;
         }

         // Check attacker interactions against player targets only.
         if (IsClass(oObject,&Player)
            AND NOT Send(oObject,@CanBeAttackedByAnyHurter,#who=who))
         {
            Send(who,@MsgSendUser,#message_rsc=spell_cant_help,
                  #parm1=Send(oObject,@GetDef),
                  #parm2=Send(oObject,@GetName));

            return FALSE;
         }

         // Ignore: Non-players, ourself, and Players that aren't outlaws or
         //  murderers.
         if (NOT IsClass(oObject,&Player))
            OR oObject = who
            OR NOT (Send(oObject,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
                    OR Send(oObject,@CheckPlayerFlag,#flag=PFLAG_MURDERER))
         {
            continue;
         }

         // Check for angel
         if NOT Send(who,@CanPlayerPvP)
         {
            // No helping the bad guys as an outlaw/murderer!
            Send(who,@MsgSendUser,#message_rsc=spell_angel_no_unlawful,
                 #parm1=Send(oObject,@GetDef),
                 #parm2=Send(oObject,@GetName));
            
            return FALSE;
         }

         // Check for safety
         if NOT Send(who,@CheckPlayerPreference,#flag=CF_SAFETY_OFF)
         {
            // Tell caster the safety caught the possible outlaw act.
            Send(who,@MsgSendUser,#message_rsc=spell_safety_no_unlawful,
                 #parm1=Send(oObject,@GetDef),
                 #parm2=Send(oObject,@GetName));

            return FALSE;
         }
      }

      return TRUE;
   }

   TranceBroken(who=$,state=$,event=$)
   {
      if (event = EVENT_CAST) OR (event = EVENT_ATTACK)
      {
         // Reset attack timer to allow instant switching without recast.
         Send(who,@SetAttackTime);
      }
      else
      {
         Send(who,@SetAttackTime,#time=viPostPerform_time,#bAdd=TRUE);
      }

      Send(who,@MsgSendUser,#message_rsc=skill_trance_break,
           #parm1=Send(self,@GetName));
      Send(who,@WaveSendUser,#wave_rsc=skill_trance_break_sound);

      return;
   }

   TranceCanceled(who=$,state=$)
   {
      Send(who,@MsgSendUser,#message_rsc=skill_trance_cancel,
           #parm1=Send(self,@GetName));
      Send(who,@WaveSendUser,#wave_rsc=skill_trance_cancel_sound);

      if state <> $
         AND NOT Nth(state,5)
      {
         Send(self,@SkillCanceled,#who=who);
      }

      return;
   }

   TranceCompleted(who=$)
   {
      if vbReportTrance
      {
         Send(who,@MsgSendUser,#message_rsc=skill_trance_complete,
            #parm1=Send(self,@GetName));
      }

      return;
   }

   // Determines when a maintained ability (mana focus etc.) can be disrupted.
   BreakTrance(who=$,state=$,event=$)
   {
      if event = EVENT_OOM
      {
         return FALSE;
      }

      Send(self,@TranceEnding,#who=who,#state=state);

      return TRUE;
   }

   // Determines if the preparation trance (&Trance) can be disrupted.
   CanBreakTrance(who=$,state=$,event=1,disruption=0)
   {
      return vbCanBreakTrance;
   }

   TranceEnding()
   {
      return;
   }

   PerformSkill(who=$,lTargets=$)
   {
      return;
   }

   GetTranceTime(who=$,iSkillPower=0)
   {
      local iPercent;

      if viPreperation_time = 0
         OR (IsClass(who,&DM) AND Send(who,@PlayerIsImmortal))
      {
         return 0;
      }

      iPercent = Bound(150 - iSkillPower,50,150);

      return (viPreperation_time*iPercent)/100;
   }

   GetPostPerformDelay()
   {
      return viPostPerform_time;
   }

   GetRawTranceTime(who=$)
   {
      return viPreperation_time;
   }

   SkillPreparationMessage(who=$,target=$,hearer=$)
   {
      if IsClass(who,&DM)
         AND (Send(who,@IsHidden)
            OR Send(who,@IsDMStealthed))
      {
         return;
      }

      if who = hearer
      {
         return;
      }

      if Send(self,@GetNumSkillTargets) <> 1
      {
         Send(hearer,@MsgSendUser,#message_rsc=skill_gesture_third,
              #parm1=Send(who,@GetCapDef),
              #parm2=Send(who,@GetName,#cap=TRUE),
              #parm3=Send(who,@GetHisHer));
      }
      else if hearer = target
      {
         Send(hearer,@MsgSendUser,#message_rsc=skill_gesture_third_target,
              #parm1=Send(who,@GetCapIndef),#parm2=Send(who,@GetName),
              #parm3=Send(who,@GetHisHer),#parm4=Send(who,@GetHisHer),
              #parm5=object_article_none_rsc,#parm6=skill_you);
      }
      else
      {
         Send(hearer,@MsgSendUser,#message_rsc=skill_gesture_third_target,
              #parm1=Send(who,@GetCapIndef),#parm2=Send(who,@GetName),
              #parm3=Send(who,@GetHisHer),#parm4=Send(who,@GetHisHer),
              #parm5=Send(target,@GetIndef),#parm6=Send(target,@GetName));
      }

      return;
   }

   GetGoodTargets(who=$, lTargets=$, report=TRUE)
   {
      local lGoodTargets;
      
      // This gets all targets within range.  Most skills just return the
      //  list back.
      lGoodTargets = Send(self,@GetTargets,#who=who,#lTargets=lTargets);

      // This gets all valid targets, checking for bad targets, safeties, etc.
      lGoodTargets = Send(self,@GetAttackTargets,#who=who,
                          #lTargets=lGoodTargets,#report=report);

      return lGoodTargets;
   }

   PlaySkillSound(room_obj = $,what = $)
   {
      local wave_rsc;

      if room_obj <> $
      {
         wave_rsc = Send(self,@GetSkillSound);

         if wave_rsc <> $
         {
            Send(room_obj,@SomethingWaveRoom,#what=what,#wave_rsc=wave_rsc);
         }
      }

      return;
   }

   GetSkillSound()
   {
      return vrSucceed_wav;
   }

end
////////////////////////////////////////////////////////////////////////////////
