// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Heal is Spell
// Parent class for heal spells. The cast text here is for Minor Heal.

constants:

   include blakston.khd

resources:

   include heal.lkod

   heal_cast_rsc = \
      "%s%s's spell heals some minor injuries, restoring ~g~B%i~B~n hitpoints."
   heal_cast_self = \
      "Shal'ille's holy magic heals some minor injuries, restoring "
      "~g~B%i~B~n hitpoints."
   heal_cast_on_other = "You heal %s%s for ~g~B%i~B~n hitpoints."
   heal_unnecessary_rsc = "%s%s is perfectly healthy."
   heal_slow_bleeding_rsc = "Shal'ille's holy magic has slowed the bleeding."
   heal_slow_bleeding_other_rsc = \
      "Shal'ille's holy magic has slowed %s%s's bleeding."
   heal_stem_bleeding_rsc = "Shal'ille's holy magic has stemmed the bleeding."
   heal_stem_bleeding_other_rsc = \
      "Shal'ille's holy magic has stemmed %s%s's bleeding."

classvars:

   vrUnnecessary = heal_unnecessary_rsc
   vrCastSelf = heal_cast_self
   vrCastOther = heal_cast_rsc
   vrSuccess = heal_cast_on_other

   viFlash = FLASH_GOOD

properties:

messages:

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local oTarget;

      // Skip standard heal code if it's an area effect.
      if vbIsAreaEffect
      {
         propagate;
      }

      // Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      oTarget = First(lTargets);
      if NOT (IsClass(oTarget,&User) OR IsClass(oTarget,&Follower))
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,
                  #parm1=vrName,#parm2=Send(oTarget,@GetDef),
                  #parm3=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      if Send(oTarget,@GetHealth) >= Send(oTarget,@GetMaxHealth)
      AND NOT Send(oTarget,@HasOverTimeEffect,#num=SID_BLEED)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=vrUnnecessary,
                  #parm1=Send(oTarget,@GetCapDef),
                  #parm2=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      propagate;
   }

   DoSpellEffects(who = $, lTargets = $, iSpellPower = 0)
   {
      local i, iHeal, iDamage, iStrength, iTime, oTarget, oEffect;

      // Skip standard heal code if it's an area effect.
      if vbIsAreaEffect
      {
         return TRUE;
      }

      oTarget = First(lTargets);

      if (oTarget = $)
      {
         Debug(who," trying to cast ",Send(self,@GetName)," on $ target!");

         return FALSE;
      }

      iHeal = Send(self,@GetHealAmount,#oTarget=oTarget,
                     #iSpellPower=iSpellPower);

      // A little boost for casting on newbies, even if you're the newbie!
      if IsClass(oTarget,&Player)
         AND NOT Send(oTarget,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         iHeal += Random(200,500);
      }

      // Try to cure bleed effects first.
      if Send(oTarget,@HasOverTimeEffect,#num=SID_BLEED)
      {
         // Heals remove 2 points of over time damage for every point of heal.
         iHeal *= 2;

         foreach i in Send(oTarget,@GetOverTimeEffects)
         {
            oEffect = Nth(i,5);

            if (oEffect <> 0) AND IsClass(oEffect,&Bleed)
            {
               iTime = GetTimeRemaining(First(i));
               iStrength = Nth(i,3);
               // The remaining damage to be dealt is a function of the bleed's 
               //strength and its remaining duration. With the given precision,
               // we can easily run into the max integer cap. Let's avoid that.
               // Also keep in mind that iStrength is negative at this point.
               iDamage = (-iStrength/100) * (iTime/100) - iHeal;

               // Record how much healing we have left. If iHeal is negative,
               // we weren't strong enough to remove the bleed effect.
               iHeal = -iDamage;

               // The heal was strong enough to remove the entire bleed effect.
               // Set it for termination.
               if iDamage <= 0
               {
                  Send(oTarget,@SetOverTimeEffect,#effect=i,#strength=0,#state=0);
               }
               // More complicated: Our heal wasn't strong enough to remove the
               // entire bleed effect. We check how much bleed damage is left and
               // set our strength, so that that exact amount of damage will be
               // dealt over the remainder of the time. We set the state to be
               // reflect the percentage of the original strength.
               else
               {
                  // Don't forget to make sure iStrength is negative.
                  iStrength = (-iDamage * 100) / (iTime / 100);
                  Send(oTarget,@SetOverTimeEffect,#effect=i,#strength=iStrength,
                        #state=100*iStrength/Nth(i,3));

                  // We're spent. No point in going any further.
                  break;
               }
            }
         }

         // Option 1: We spent all our healing on removing bleed effects.
         // Tell target and caster what we did and quit.
         if iHeal < 0
         {
            if who <> oTarget
            {
               Send(who,@MsgSendUser,#message_rsc=heal_slow_bleeding_other_rsc,
                     #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
            }

            Send(oTarget,@MsgSendUser,#message_rsc=heal_slow_bleeding_rsc);

            return TRUE;
         }
         // Option 2: We managed to remove all bleed effects, but we don't
         // have anything left to go on. Say so and get out.
         else if iHeal < 2
         {
            if who <> oTarget
            {
               Send(who,@MsgSendUser,#message_rsc=heal_stem_bleeding_other_rsc,
                     #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
            }

            Send(oTarget,@MsgSendUser,#message_rsc=heal_stem_bleeding_rsc);

            return TRUE;
         }
         // Option 3: Got healing left which means that we removed each
         // and every bleed effect our target may have had. Tell them.
         else
         {
            if who <> oTarget
            {
               Send(who,@MsgSendUser,#message_rsc=heal_stem_bleeding_other_rsc,
                     #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
            }

            Send(oTarget,@MsgSendUser,#message_rsc=heal_stem_bleeding_rsc);

            // Option 3a: We got some more healing to share, but our
            // target doesn't need it. Get out.
            if Send(oTarget,@GetHealth) >= Send(oTarget,@GetMaxHealth)
            {
               return TRUE;
            }
            // Option 3b: Got healing left, target needs it. Proceed as
            // normal but readjust our healing pool.
            else
            {
               iHeal /= 2;
            }
         }
      }

      iHeal = Send(oTarget,@GainHealth,#amount=iHeal,#precision=TRUE);

      if who <> oTarget
      {
         Send(who,@MsgSendUser,#message_rsc=vrSuccess,
               #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName),
               #parm3=iHeal/100);

         Send(oTarget,@MsgSendUser,#message_rsc=vrCastOther,
               #parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName),
               #parm3=iHeal/100);

         // Give them a little boost if they help someone of higher Karma.
         if IsClass(who,&Player)
            AND Send(who,@GetKarma) < Send(oTarget,@GetKarma)
         {
            Send(who,@AddKarma,#amount=Send(who,@CalculateKarmaChangeFromAct,
                  #karma_doer=Send(who,@GetKarma),
                  #karma_act=Send(oTarget,@GetKarma),#Swing_factor=1));
         }
      }
      else
      {
         Send(who,@MsgSendUser,#message_rsc=vrCastSelf,#parm1=iHeal/100);
      }

      return TRUE;
   }

   GetHealAmount(oTarget=$,iSpellPower=1)
   "Heal spells override this to set the heal amount on a given target."
   {
      if (oTarget = $)
      {
         Debug("Trying to get heal amount for $ target!");
      }

      return 1;
   }

   GetCombatType()
   {
      return COMBAT_ACTION_HEAL;
   }

   // Heals tend to cause aggression. Spells cause more hatred
   // when they are high level and potent. We return negative
   // values because we are helping.
   CausesAggression(iSpellpower=0)
   {
      return -viSpell_level*iSpellpower/10;
   }

end
////////////////////////////////////////////////////////////////////////////////
