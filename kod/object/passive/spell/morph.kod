// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Morph is Spell

constants:

   include blakston.khd

   MORPH_PAIN_TIME = 2000

resources:

   include morph.lkod

   morph_scream_wav = pdeath.ogg

   morph_name_rsc = "morph"
   morph_icon_rsc = imorph.bgf
   morph_desc_rsc = \
      "The touch of Riija shifts you into another beast!"
   morph_already_enchanted = "You already have been affected by %s%s."
   morph_already_affected = "You are already morphed."
   morph_on = \
      "You painfully undergo a transformation which changes you almost but "
      "not quite into %s%s."
   morph_off = "Your alternate form wears off; you return to your normal self."
   Morph_attackable = \
      "\nNOTE: While you are in the form of a monster, Shal'ille's protection "
      "will not apply to you.  You can be attacked by others freely, even in "
      "towns, but you will take the appropriate penalties for attacking other "
      "innocents."

   morph_sound = rmorph.ogg

classvars:

   vrName = morph_name_rsc
   vrIcon = morph_icon_rsc
   vrDesc = morph_desc_rsc

   vrSucceed_wav = morph_sound

   viSpell_num = SID_MORPH
   viSpell_level = 5
   viSchool = SS_RIIJA
   viMana = 20
   viSpellExertion = 4
   viCast_time = 20000
   viChance_to_increase = 35
   viMeditate_ratio = 50

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&WebMoss,3],plReagents);
      plReagents = Cons([&DragonflyEye,2],plReagents);

      return;
   }

   CanPayCosts(who = $, lTargets = $)
   {
      // Check for enchantment already applied
      if Send(who,@CheckPlayerFlag,#flag=PFLAG_MORPHED)
      {
         Send(who,@MsgSendUser,#message_rsc=morph_already_enchanted,
               #parm1=Send(self,@GetIndef),#parm2=Send(self,@GetName));

         return FALSE;
      }

      propagate;
   }

   GetTranceTime(iSpellpower=0,who=$)
   {
      local iPercent;

      if iSpellpower = 0
      {
         Debug("Bad iSpellpower passed to GetTranceTime");
      }

      // Don't eliminate the casting time for DMs since they can use this
      //  spell to transform.

      // 51% for high, 149% for low
      iPercent = 150 - iSpellPower;

      return (viCast_time * iPercent) / 100;
   }

   DoSpellEffects(who = $,lTargets = $,iIllusion_type = $, iSpellpower = 0)
   "Potion can call this directly."
   {
      local i, oIllusion, iTime, oRoom, playerHP, monsterHP, differenceHP,
            changeHP, oTarget;

      if (lTargets = $)
      {
         oTarget = who;
      }
      else
      {
         oTarget = First(lTargets);
      }

      // Are they already enchanted by Illusionary form?
      if Send(oTarget,@IsEnchanted,#byClass=&IllusionaryForm)
      {
         // Remove Illusionary form
         Send(oTarget,@RemoveEnchantmentClass,#class=&IllusionaryForm);
      }

      oRoom = Send(oTarget,@GetOwner);

      foreach i in Send(oTarget,@GetPlayerUsing)
      {
         if NOT IsClass(i,&SoldierShield)
         {
            Send(oTarget,@UnuseItem,#what=i);
         }
      }

      if iSpellPower = $
      {
         Debug("$ spellpower passed to morph DoSpellEffects.");

         return FALSE;
      }

      if iIllusion_type = $
      {
         iIllusion_type = Send(self,@CalculateIllusionType,
                               #iSpellpower=iSpellPower);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      Send(oTarget,@MsgSendUser,#message_rsc=morph_on,
            #parm1=Send(oIllusion,@GetIndef),#parm2=Send(oIllusion,@GetName));

      playerHP = Send(oTarget,@GetMaxHealth);
      monsterHP = Send(oIllusion,@GetLevel);

      // Do the random hp range here instead of relying on the template's
      // set hps.
      monsterHP = (monsterHP * Random(90,110)) / 100;
      differenceHP = ((playerHP - monsterHP) * iSpellPower) / 100;
      changeHP = Send(oTarget,@GainMaxHealth,#amount=-differenceHP);

      // Health changed, Send NewHealth.
      Send(oTarget,@NewHealth);

      // Dduration is based on spellpower, the difference between the hps of
      //  the caster and the target monster, and a slight random.
      iTime = 60 + 3*iSpellPower; 
      iTime = (iTime * playerHP) / MonsterHP;
      // Bound between 1 and 15 minutes.
      iTime = Bound((iTime * Random(80,120)) / 100, 60, 900);

      // Convert to ms.
      iTime *= 1000;

      Send(oRoom,@SomethingWaveRoom,#what=oTarget,#wave_rsc=morph_scream_wav);
      Send(oTarget,@EffectSendUserDuration,#effect=EFFECT_PAIN,
            #duration=MORPH_PAIN_TIME);

      Send(oTarget,@StartEnchantment,#what=self,#time=iTime,
            #state=[iIllusion_type,changeHP],#iSpellPower=iSpellPower);

      Send(oTarget,@SetPlayerIllusion,#what=self);

      return TRUE;
   }

   SetSpellPlayerFlag(who=$)
   {
      local iIllusion_type, oIllusion, iFX;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);

      if oIllusion <> $
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_MORPHED,#value=TRUE);
      }

      iFX = Send(oIllusion,@GetDrawingEffects);
      if iFX <> 0
      {
         Send(who,@SetPlayerDrawFX,#drawfx=iFX);
      }

      return;
   }

   TranceBlocksSay()
   {
      return TRUE;
   }

   SomethingSaidDuringTrance(who=$,string=$)
   {
      local iForm, iCount, i, iLevel, iSpellPower, bDM;

      iSpellPower = Send(self,@GetSpellPower,#who=who);
      iForm = -1;
      iCount = 1;

      bDM = IsClass(who,&DM);

      foreach i in Send(SYS,@GetMonsterTemplates)
      {
         if (StringEqual(string,Send(i,@GetName)) AND bDM)
            OR StringEqual(string,Send(i,@GetKocName))
         {
            iLevel = Send(i,@GetLevel);

            // Be sure the player deserves to be able to 'steer' to this monster
            // But, always let player select monster if they have max spellpower.
            if (iSpellPower <= (iLevel + Random(0,10))
                  AND iSpellPower < SPELLPOWER_MAXIMUM)
               AND NOT bDM
            {
               return;
            }

            // Be sure the player CAN morph to it.  Can't do some mosnters
            // because of size, special event status, etc.
            if NOT (bDM OR Send(i,@CanMorphTo))
            {
               return;
            }

            iForm = iCount;

            break;
         }

         ++iCount;
      }

      if iForm <> -1
      {
         // Use EVENT_STEER so we don't print fizzle message.
         Send(who,@BreakTrance,#event=EVENT_STEER);
         Send(self,@DoSpellEffects,#who=who,#lTargets=[who],
               #iIllusion_type=iForm,#iSpellpower=iSpellpower);
      }

      return;
   }

   CalculateIllusionType(iSpellPower = 0)
   "Returns an illusion id based on spellpower--higher spellpower gives "
   "you a better chance of being a cooler monster."
   {
      local i, iLevel, iMax, iIndex, iCount, iAmount;
            
      // Okay, someone with a spellpower of 45 has these odds on the morph
      //        monster  chance
      //        level 25    25
      //        level 35    35
      //        level 45    45
      //        level 55    25    // note the decrease is double the increase rate
      //        level 65     5
      //        level 75     1

      iMax = 0;
      foreach i in Send(SYS,@GetMonsterTemplates)
      {
         iLevel = Send(i,@GetLevel);
         if Send(i,@CanMorphTo)
         {
            iAmount = iSpellPower - iLevel;
            if iAmount < 0
            {
               iAmount = Abs(iAmount * 2);
            }

            iAmount = Bound((iSpellPower - iAmount),1,100);
            iMax += iAmount;
         }
      }

      iIndex = Random(0,iMax);
      iCount = 1;
      foreach i in Send(SYS,@GetMonsterTemplates)
      {
         iLevel = Send(i,@GetLevel);
         if Send(i,@CanMorphTo)
         {
            iAmount = iSpellPower - iLevel;
            if iAmount < 0
            {
               iAmount = Abs(iAmount * 2);
            }

            iAmount = Bound((iSpellPower - iAmount),1,100);
            iIndex -= iAmount;

            if iIndex <= 0
            {
               return iCount;
            }
         }

         ++iCount;
      }

      Debug("Shouldn't get here!");

      return;
   }

   EndEnchantment(who = $, state=$,report = TRUE)
   {
      local changeHP, oIllusion, iIllusion_type;

      changeHP = Nth(state,2);
      Send(who,@GainMaxHealth,#amount=(-changeHP));

      if report
      {
         Send(who,@MsgSendUser,#message_rsc=morph_off);
      }

      Send(who,@ResetPlayerIllusion);

      // Health could have changed, Send NewHealth.
      // This also lets us check for Mark of Dishonor, which could take
      //  our bonus hps....
      Send(who,@NewHealth);

      return;
   }

   //// Illusion callbacks

   IllusionGetIcon(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return object_icon_rsc;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);

      return Send(oIllusion,@GetIcon);
   }

   IllusionSendAnimation(who = $,animation = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         AddPacket(1,ANIMATE_NONE, 2,1);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if animation = PANM_WEAPON_ATTACK
         OR animation = PANM_FIST_ATTACK
         OR animation = PANM_MONSTER_ATTACK
      {
         Send(oIllusion,@SetAnimation,#animation=ANIM_ATTACK);
      }
      else
      {
         Send(oIllusion,@SetAnimation,#animation=ANIM_NONE);
      }

      Send(oIllusion,@SendAnimation);

      return;
   }

   IllusionSendMoveAnimation(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         AddPacket(1,ANIMATE_NONE, 2,1);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      Send(oIllusion,@SendMoveAnimation);

      return;
   }

   IllusionSendOverlays(who = $,animation = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         AddPacket(1,0);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if animation = PANM_WEAPON_ATTACK
         OR animation = PANM_FIST_ATTACK
         OR PANM_MONSTER_ATTACK
      {
         Send(oIllusion,@SetAnimation,#animation=ANIM_ATTACK);
      }
      else
      {
         Send(oIllusion,@SetAnimation,#animation=ANIM_NONE);
      }

      Send(oIllusion,@SendOverlays);

      return;
   }

   IllusionSendMoveOverlays(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         AddPacket(1,0);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      Send(oIllusion,@SendMoveOverlays);

      return;
   }

   IllusionShowDesc(who = $,iHitPoint_Percent=$)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         AddPacket(1,0);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      Send(oIllusion,@ShowDesc,#iHitPoint_Percent=iHitPoint_Percent);

      return;
   }

   IllusionGetCapDef(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return object_article_none_rsc;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if oIllusion = $
      {
         return object_article_none_rsc;
      }

      return Send(oIllusion,@GetCapDef);
   }

   IllusionGetDef(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return object_article_none_rsc;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);

      if oIllusion = $
      {
         return object_article_none_rsc;
      }

      return Send(oIllusion,@GetDef);
   }

   IllusionGetInDef(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return object_article_none_rsc;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if oIllusion = $
      {
         return object_article_none_rsc;
      }

      return Send(oIllusion,@GetInDef);
   }

   IllusionGetCapInDef(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return object_article_none_rsc;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if oIllusion = $
      {
         return object_article_none_rsc;
      }

      return Send(oIllusion,@GetCapInDef);
   }

   IllusionGetHisHer(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return object_article_none_rsc;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if oIllusion = $
      {
         return object_article_none_rsc;
      }

      return Send(oIllusion,@GetHisHer);
   }

   IllusionGetName(who = $)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         return Send(who,@GetTrueName);
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if oIllusion = $
      {
         return Send(who,@GetTrueName);
      }

      return Send(oIllusion,@GetName);
   }

   IllusionGetTemplate(who=$)
   {
      local iIllusion;

      iIllusion = First(Send(who,@GetEnchantedState,#what=self)); 
      if iIllusion = $
      {
         return $;
      }

      return Nth(Send(SYS,@GetMonsterTemplates),iIllusion);
   }

   IllusionGetLightingInformation(who=$)
   {
      local iIllusion_type, oIllusion;

      iIllusion_type = First(Send(who,@GetEnchantedState,#what=self));
      if iIllusion_type = $
      {
         // If no illusion, then send no lighting information.
         return FALSE;
      }

      oIllusion = Nth(Send(SYS,@GetMonsterTemplates),iIllusion_type);
      if oIllusion = $
      {
         // If no illusion, then send no lighting information.
         return FALSE;
      }

      // Adds the appropriate information packets.
      Send(oIllusion,@SendLightingInformation);

      // Return TRUE since we returned lighting information.
      return TRUE;
   }

   GetExtraDesc()
   {
      // Add an extra warning on PvP servers.
      if Send(SYS,@IsPKAllowed)
      {
         return Morph_attackable;
      }

      propagate;
   }

   SendTimeDesc(who=$)
   {
      local i, iDuration, iTime, oList;

      oList = Send(who,@GetEnchantmentList);

      foreach i in oList
      {
         if Nth(i,2) = self
         {
            iTime = First(i);
            if iTime = $
            {
               iDuration = 0;
            }
            else if IsTimer(iTime)
            {
               iDuration = GetTimeRemaining(iTime) / 1000;
            }
            else
            {
               // Should be an integer
               iDuration = iTime / 1000;
            }
         }
      }

      if iDuration = $
      {
         iDuration = 0;
      }

      // This message picks the appropriate resources for the duration given,
      // and sends them to the user.
      Send(self,@SendTimeRemaining,#iTime=iDuration);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
