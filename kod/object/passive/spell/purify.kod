// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Purify is Spell

constants:

   include blakston.khd

resources:

   include purify.lkod

   purify_name_rsc = "purify"
   purify_icon_rsc = ipurify.bgf
   purify_desc_rsc = \
      "Removes harmful personal enchantments on the target."
   purify_on = \
      "A bright, holy light is trying to cleanse your soul of impure effects."
   purify_not_enchanted = \
      "%s%s is not affected by any negative magical energies."
   purify_spell_intro = \
      "Shal'ille Lv. 4: Removes harmful personal enchantments on the target."
   purify_spell_self_cast_rsc = "You may only cast %s on yourself."

classvars:

   vrName = purify_name_rsc
   vrIcon = purify_icon_rsc
   vrDesc = purify_desc_rsc

   vrSpell_intro = purify_spell_intro

   viSpell_num = SID_PURIFY
   viSchool = SS_SHALILLE
   viSpell_level = 4
   viMana = 10
   viChance_To_Increase = 20
   viMeditate_ratio = 30

   viFlash = FLASH_GOOD

properties:

   pbCan_cast_on_others = FALSE

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,2],plReagents);
      plReagents = Cons([&Elderberry,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      if pbCan_cast_on_others
      {
         return 1;
      }

      // Can only cast on self, no need to target
      return 0;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local oTarget, i, oEffect;

      // If it's only self cast, spoof self as target for following code
      if NOT pbCan_Cast_on_others
      {
         lTargets = Cons(who,lTargets);
      }

      // Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      oTarget = First(lTargets);

      if NOT IsClass(oTarget,&User)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,#parm1=vrName,
                  #parm2=Send(oTarget,@GetDef),#parm3=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      // Can only cast purify on yourself, to curb massive mule abuse.
      if NOT pbCan_cast_on_others
         AND oTarget <> who
      {
         Send(who,@WaveSendUser,#wave_rsc=spell_fail_wav);
         Send(who,@MsgSendUser,#message_rsc=purify_spell_self_cast_rsc,
               #parm1=vrName);

         return FALSE;
      }

      // The target must have a debuff.
      foreach i in Send(oTarget,@GetEnchantmentList)
      {
         if IsClass(Nth(i,2),&Debuff)
         {
            propagate;
         }
      }

      // Check over time effects.
      foreach i in Send(oTarget,@GetOverTimeEffects)
      {
         oEffect = Nth(i,5);

         if (oEffect <> 0) AND IsClass(oEffect,&Debuff)
         {
            propagate;
         }
      }

      // If we get to here, we didn't have anything to remove.
      Send(who,@MsgSendUser,#message_rsc=purify_not_enchanted,
            #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

      return FALSE;
   }

   DoSpellEffects(who = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget, lInfo, oSpell, lList, lEnchantmentList;

      // If it's only self cast, spoof self as target for following code
      if NOT pbCan_Cast_on_others
      {
         lTargets = Cons(who, lTargets);
      }

      oTarget = First(lTargets);

      if oTarget <> who
      {
         Send(who,@MsgSendUser,#message_rsc=spell_cast_on_target,
               #parm1=Send(self,@GetName),#parm2=Send(oTarget,@GetDef),
               #parm3=Send(oTarget,@GetName));
      }

      Send(oTarget,@MsgSendUser,#message_rsc=purify_on);

      // keep tabs on guides/bards, but not admins.
      if IsClass(who, &DM)
      {
         if GetClass(who) = &DM
            AND who <> oTarget
         {
            Debug(Send(who,@GetTrueName)," cast purify on ",
                  Send(oTarget,@GetName));
         }

         if Send(who,@PlayerIsImmortal)
         {
            // If they're immortal, let them clear everything.
            iSpellPower = $;
         }
      }

      Send(self,@DoPurify,#who=oTarget,#iSpellPower=iSpellPower);

      return TRUE;
   }

   DoPurify(who=$, iSpellPower=$)
   "Remove negative enchantments on who with a given chance to remove each one."
   {
      local iNumEnchantments, lDebuffs, iChance, i, oSpell, bRemovedSomething;

      if who = $
      {
         return FALSE;
      }

      // Chance of $ means that we want to remove it all.
      if iSpellPower = $
      {
         Send(who,@RemoveAllPersonalEnchantments);
         Send(who,@DeleteOverTimeEffect,#clear=TRUE);

         return TRUE;
      }

      bRemovedSomething = FALSE;

      foreach i in Send(who,@GetEnchantmentList)
      {
         oSpell = Nth(i,2);
         if IsClass(oSpell,&Debuff) AND NOT IsClass(oSpell,&Poison)
         {
            lDebuffs = Cons(oSpell,lDebuffs);
         }
      }

      foreach i in Send(who,@GetOverTimeEffects)
      {
         oSpell = Nth(i,5);

         // Poison is handled afterwards.
         if IsClass(oSpell,&Debuff) AND NOT IsClass(oSpell,&Poison)
         {
            lDebuffs = Cons(oSpell,lDebuffs);
         }
      }

      iChance = Length(lDebuffs) * 20 + iSpellPower;

      foreach oSpell in lDebuffs
      {
         if iChance > Random(1,100)
         {
            Send(who,@RemoveEnchantment,#what=oSpell);
            Send(who,@DeleteOverTimeEffect,#what=oSpell,#removal=REMOVE_PLAYER);
            bRemovedSomething = TRUE;
         }

         iChance -= (125 - iSpellPower);
      }

      oSpell = Send(SYS,@FindSpellByNum,#num=SID_CURE_POISON);
      Send(oSpell,@DoCurePoison,#who=who,#iSpellPower=bound(iChance,0,99));

      return bRemovedSomething;
   }

   GetPotionClass()
   {
      return &PurifyPotion;
   }

end
////////////////////////////////////////////////////////////////////////////////
