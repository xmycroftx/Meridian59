// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Cooldown is Spell

// Cooldowns are not real player-available spells, but infrastructure to
// allow spell-like UI effects: clickable icons, descriptions with time
// counting down etc.

// They are paused on logoff and phase as PEs/debuffs are, and cannot be
// purged or purified.

// Adding a cooldown can be done by creating a new child class of
// Cooldown with a unique SID, setting the cooldown duration there and
// adding the SID to viCooldownSID in the spell you wish to have a cooldown.
// Note that these cooldowns don't interfere with the attack/spellcast timer.

constants:

   include blakston.khd

   HEADER_MESSAGE = 1
   HEADER_DESCRIPTION = 2

resources:

   include cooldown.lkod

   cooldown_look_rsc = "%r\n%r"
   cooldown_desc_rsc = "You cannot cast %s while this cooldown is in effect."
   cooldown_on_rsc = "The %r spell can be cast again in %r%r%r%r%r%r%r."
   cooldown_off_rsc = "You can now cast the %s spell again."
   cooldown_time_header_rsc = \
      "\n\nThe %s will expire in %r%r%r%r%r%r%r."

classvars:

   vrDesc = cooldown_desc_rsc
   vrCooldownOn = cooldown_on_rsc
   vrCooldownOff = cooldown_off_rsc
   viMana = 0
   viSpell_level = 50
   viSpellExertion = 0
   viSchool = SS_DM_COMMAND
   viPersonal_ench = FALSE

properties:

   // Infrastructure spell.
   pbCanBeLearned = FALSE

   // Base duration is in milliseconds, spellpower mod is multiplied
   // by spellpower and the amount subtracted from the base cooldown.
   // piSpellPowerModifier can be 0 (static cooldown duration)
   piBaseDuration = 5000
   piSpellPowerModifier = 0

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CanPayCosts(who=$, lTargets = $)
   {
      // Not intended to be cast normally.
      return FALSE;
   }

   // Overrides spell.kod's CastSpell completely.
   CastSpell(who = $, lTargets = $, oTarget = $, iSpellPower = 0, iDuration = $)
   {
      if (oTarget = $)
      {
         oTarget = First(lTargets);
         if (oTarget = $)
         {
            Debug(vrName," called with $ target!");

            return;
         }
      }

      if (iDuration = $)
      {
         iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower);
      }

      Send(self,@DoSpellEffect,#who=oTarget,#iDuration=iDuration,#oSpell=who);
      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#state=who);

      return;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = piBaseDuration - iSpellPower * piSpellPowerModifier;
      iDuration = Bound(iDuration, 0, MAX_KOD_INT);

      return iDuration;
   }

   IsPersonalEnchantment()
   {
      return FALSE;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CooldownOnMsg(parm1 = $, parm2 = $)
   "parm1 is time in ms, parm2 is spell object. parm1 can be $."
   {
      if (parm2 = $)
      {
         return FALSE;
      }

      if (parm1 <> $)
      {
         Send(self,@SendTimeRemaining,#iTime=parm1 / 1000,#parm1=HEADER_MESSAGE,
               #parm2=parm2);
      }

      return TRUE;
   }

   DoSpellEffect(who = $, iDuration = $, oSpell = $)
   {
      Send(who,@MsgSendUserCallback,#what=self,
            #sCallback=SetString($,@CooldownOnMsg),
            #parm1=iDuration,#parm2=oSpell);

      return;
   }

   UndoSpellEffect(who = $, oSpell = $)
   {
      Send(who,@MsgSendUser,#message_rsc=vrCooldownOff,
            #parm1=Send(oSpell,@GetName));

      return;
   }

   RemoveEnchantmentEffects(who = $, state = $, report = TRUE)
   {
      Send(self,@EndEnchantment,#who=who,#state=state,#report=report);

      return;
   }

   SuccessChance()
   {
      return TRUE;
   }

   EndEnchantment(who = $, state = 0, report = TRUE)
   {
      Send(self,@UndoSpellEffect,#who=who,#oSpell=state);

      return;
   }

   CanBeRemovedByPlayer()
   "Returns if a spell can be removed by normal Purge/Purify"
   {
      return FALSE;
   }

   ShowDesc(who=$)
   "Adds a warning line to the look description."
   {
      local state;

      if who = $
         OR (IsClass(who,&User)
            AND NOT Send(who,@IsEnchanted,#what=self))
      {
         AddPacket(4,vrDesc, 4,system_blank_resource, 4,system_blank_resource);

         return;
      }

      state = Send(who,@GetEnchantedState,#what=self);

      AddPacket(4, cooldown_look_rsc, 4,vrDesc, 4,Send(state,@GetName));
      Send(self,@SendTimeDesc,#who=who);

      return;
   }

   SendTimeRemainingHeader(parm1=HEADER_DESCRIPTION,parm2=$)
   {
      if (parm1 = HEADER_MESSAGE)
      {
         AddPacket(4,vrCooldownOn, 4, Send(parm2,@GetName));
      }
      else
      {
         AddPacket(4,cooldown_time_header_rsc, 4,Send(self,@GetName));
      }

      return;
   }

   SendTimeDesc(who=$)
   {
      local i, iDuration, iTime, oList;

      oList = Send(who,@GetEnchantmentList);

      iDuration = 0;

      foreach i in oList
      {
         if Nth(i,2) = self
         {
            iTime = First(i);
            if IsTimer(iTime)
            {
               iDuration = GetTimeRemaining(iTime);
            }
            else
            {
               // Should be an integer
               iDuration = iTime;
            }
         }
      }

      // If we somehow ended up with $, set iDuration to 0. This isn't
      // likely to happen, but check anyway.
      if iDuration = $
      {
         iDuration = 0;
      }

      // This message picks the appropriate resources for the duration given,
      // and sends them to the user.
      Send(self,@SendTimeRemaining,#iTime=iDuration / 1000);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
