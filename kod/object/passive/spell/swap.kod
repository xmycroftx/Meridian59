// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Swap is Spell

constants:

   include blakston.khd

resources:

   include swap.lkod

   swap_name_rsc = "swap"
   swap_icon_rsc = iswap.bgf
   swap_desc_rsc = \
      "The darker gods grant you the power to randomly exchange one "
      "item from your inventory with one from the target's."
   swap_cast_rsc ="Your %s %s yanked away to be replaced by %s%s."
   swap_failed_caster = "You point at %s%s, but nothing seems to happen."
   swap_failed_victim = "%s%s points at you, but nothing seems to happen."
   swap_no_target = "Your target is out of range."
   swap_be_sing_pres = "is"
   swap_be_plur_pres = "are"
   swap_sound = qswap.ogg

classvars:

   vrName = swap_name_rsc
   vrIcon = swap_icon_rsc
   vrDesc = swap_desc_rsc

   viSpell_num = SID_SWAP
   viSchool = SS_QOR
   viSpell_level = 5
   viMana = 9

   viChance_To_Increase = 10
   viMeditate_ratio = 50

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   viFlash = FLASH_BAD

   vrSucceed_wav = swap_sound

   viCast_time = 3000

   // in seconds, since it works off GetTime()
   viPostCast_time = 5

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DarkAngelFeather,1],plReagents);
      plReagents = Cons([&Yrxlsap,1],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local target, i;

      // Can cast spell if the first target item is an item and
      // the second is a user.
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);
      if NOT IsClass(target,&User)
         OR IsClass(target,&DM)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,
                 #parm1=vrName,#parm2=Send(target,@GetDef),
                 #parm3=Send(target,@GetName));
         }

         return FALSE;
      }

      if target = who
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_no_self_target,
                  #parm1=vrName);
         }

         return FALSE;
      }

      propagate;
   }

   DoSpellEffects(who = $, lTargets = $, iSpellPower=0)
   {
      local oItem_victim, oItem_caster, oVictim, oCaster,
            rVerb, iRepeat, oNew_item, oTempHolder;

      oCaster = who;
      if lTargets = $
      {
         Send(who,@MsgSendUser,#message_rsc=swap_no_target);

         return FALSE;
      }

      oVictim = First(lTargets);
      oItem_caster = Send(oCaster,@GetRandomItem);
      if oItem_caster = $
      {
         Send(oCaster,@MsgSendUser,#message_rsc=swap_failed_caster,
               #parm1=Send(oVictim,@GetDef),#parm2=Send(oVictim,@GetName));
         Send(oVictim,@MsgSendUser,#message_rsc=swap_failed_victim,
               #parm1=Send(oCaster,@GetCapDef),#parm2=Send(oCaster,@GetName));

         return TRUE;
      }

      oItem_victim = Send(oVictim,@GetRandomItem);
      if oItem_victim = $
      {
         Send(oCaster,@MsgSendUser,#message_rsc=swap_failed_caster,
               #parm1=Send(oVictim,@GetDef),#parm2=Send(oVictim,@GetName));
         Send(oVictim,@MsgSendUser,#message_rsc=swap_failed_victim,
               #parm1=Send(oCaster,@GetCapDef),#parm2=Send(oCaster,@GetName));

         return TRUE;
      }

      iRepeat = iSpellpower / 25;
      while iRepeat-- > 0
      {
         oNew_item = Send(oVictim,@GetRandomItem);
         if Send(oNew_item,@GetValue) > Send(oItem_victim,@GetValue)
         {
            oItem_victim = oNew_item;
         }
      }

      if NOT Send(oVictim,@ReqLeaveHold,#what=oItem_victim)
         OR NOT Send(oCaster,@ReqLeaveHold,#what=oItem_caster)
         OR NOT Send(oItem_caster,@CanSwap)
         OR NOT Send(oItem_victim,@CanSwap)
         OR NOT Send(oVictim,@CanHoldWeightAndBulk,
                     #weight=Send(oItem_caster,@GetWeight),
                     #bulk=Send(oItem_caster,@GetBulk))
         OR NOT Send(oCaster,@CanHoldWeightAndBulk,
                     #weight=Send(oItem_victim,@GetWeight),
                     #bulk=Send(oItem_victim,@GetBulk))
      {
         // Swap couldn't find an object to swap, or got a failed canswap.
         Send(oCaster,@MsgSendUser,#message_rsc=swap_failed_caster,
               #parm1=Send(oVictim,@GetDef),#parm2=Send(oVictim,@GetName));
         Send(oVictim,@MsgSendUser,#message_rsc=swap_failed_victim,
               #parm1=Send(oCaster,@GetCapDef),#parm2=Send(oCaster,@GetName));

         // Return false here, no chance to succeed.
         return FALSE;
      }

      if Send(oItem_victim,@IsStackable)
         AND Send(oItem_victim,@GetNumber) > 1
      {
         rVerb = swap_be_plur_pres;
      }
      else
      {
         rVerb = swap_be_sing_pres;
      }

      Send(oVictim,@MsgSendUser,#message_rsc=swap_cast_rsc,
            #parm1=Send(oItem_victim,@GetName),#parm2=rVerb,
            #parm3=Send(oItem_caster,@GetIndef),
            #parm4=Send(oItem_caster,@GetName));

      if Send(oItem_caster,@IsStackable)
         AND Send(oItem_caster,@GetNumber) > 1
      {
         rVerb = swap_be_plur_pres;
      }
      else
      {
         rVerb = swap_be_sing_pres;
      }

      Send(oCaster,@MsgSendUser,#message_rsc=swap_cast_rsc,
            #parm1=Send(oItem_caster,@GetName),#parm2=rVerb,
            #parm3=Send(oItem_victim,@GetIndef),
            #parm4=Send(oItem_victim,@GetName));

      oTempHolder = Create(&Holder);
      Send(oTempHolder,@NewHold,#what=oItem_victim);

      Send(oVictim,@NewHold,#what=oItem_caster);
      Send(oCaster,@NewHold,#what=oItem_victim);

      return TRUE;
   }

   SpellBannedInArena()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
