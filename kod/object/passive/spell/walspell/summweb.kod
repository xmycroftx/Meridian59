// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
SummonWeb is WallSpell

constants:

   include blakston.khd

resources:

   include summweb.lkod

   SummonWeb_name_rsc = "spider web"
   SummonWeb_icon_rsc = iweb.bgf
   SummonWeb_overlay = webov.bgf
   SummonWeb_desc_rsc = \
      "The spider webs created by this spell may hamper the ability to move "
      "for those who would happen upon them."

   SummonWeb_cast_rsc = "A sticky patch of spider webs appears before you."
   SummonWeb_sound = farenwala822m.ogg

classvars:

   vrName = SummonWeb_name_rsc
   vrIcon = SummonWeb_icon_rsc
   vrDesc = SummonWeb_desc_rsc
   vrWeb_Overlay = SummonWeb_overlay

   viSpell_num = SID_SPIDER_WEB
   viSchool = SS_FAREN
   viSpell_level = 3
   viMana = 15
   viSpellExertion = 3
   viCast_time = 3000

   vrSucceed_wav = SummonWeb_sound
   vrSuccess = SummonWeb_cast_rsc

   viChance_To_Increase = 25
   viMeditate_ratio = 30

   viHarmful = TRUE

   // Webs can't kill anyone, so don't warn about being a murderer.
   viWallCanKill = FALSE

   //// Seed parameters
   viElementDuration = 60000
   viElementSpeed = 1200
   viElementStep = 32
   viElementNoise = FINENESS_HALF

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&WebMoss,1], plReagents);

      return;
   }

   PlaceWallElements(seed = $, lTargets = $)
   {
      local oCaster, oRoom, iAngle, iStep, iSpellPower, lSeed,
         iXFineStep, iYFineStep, iXOffset, iYOffset;

      oCaster = First(seed);
      oRoom = Send(oCaster,@GetOwner);
      iSpellPower = Nth(seed,2);
      iAngle = Nth(seed,6);
      iStep = Nth(seed,7);

      iXFineStep = Send(oRoom,@GetXFineStep,#angle=iAngle);
      iYFineStep = Send(oRoom,@GetYFineStep,#angle=iAngle);

      iXOffset = -iXFineStep*iStep/(FINENESS*2);
      iYOffset = -iYFineStep*iStep/(FINENESS*2);

      iXFineStep *= 3;
      iYFineStep *= 3;

      lSeed = ListCopy(seed);
      SetNth(lSeed,4,3);
         SetNth(lSeed,5,viElementSpeed/3);
      SetNth(lSeed,9,1024);
      SetNth(lSeed,6,(512+iAngle+MAX_ANGLE/4) % MAX_ANGLE);
      Send(self,@SpawnElement,#seed=lSeed,#who=oCaster,
         #yfineoffset=iYOffset/2+iYFineStep,
         #xfineoffset=iXOffset/2+iXFineStep,
         #walltype=&Web);


      if iSpellPower > 30
      {
         lSeed = ListCopy(seed);
         SetNth(lSeed,4,7);
         SetNth(lSeed,5,viElementSpeed/7);
         SetNth(lSeed,9,512);
         SetNth(lSeed,6,(256+iAngle+MAX_ANGLE/4) % MAX_ANGLE);
         Send(self,@SpawnElement,#seed=lSeed,#who=oCaster,
            #yfineoffset=iYOffset+iYFineStep,
            #xfineoffset=iXOffset+iXFineStep,
            #walltype=&Web);
      }

      if iSpellPower > 60
      {
         lSeed = ListCopy(seed);
         SetNth(lSeed,4,15);
         SetNth(lSeed,5,viElementSpeed/15);
         SetNth(lSeed,9,256);
         SetNth(lSeed,6,(128+iAngle+MAX_ANGLE/4) % MAX_ANGLE);
         Send(self,@SpawnElement,#seed=lSeed,#who=oCaster,
            #yfineoffset=iYOffset*3+iYFineStep,
            #xfineoffset=iXOffset*3+iXFineStep,
            #walltype=&Web);
      }

      // Another layer for the venerable DMs.
      if (IsClass(oCaster,&DM) AND Send(oCaster,@PlayerIsImmortal))
      {
         lSeed = ListCopy(seed);
         SetNth(lSeed,4,23);
         SetNth(lSeed,5,viElementSpeed/23);
         SetNth(lSeed,9,171);
         SetNth(lSeed,6,(85+iAngle+MAX_ANGLE/4) % MAX_ANGLE);
         Send(self,@SpawnElement,#seed=lSeed,#who=oCaster,
            #yfineoffset=iYOffset*5+iYFineStep,
            #xfineoffset=iXOffset*5+iXFineStep,
            #walltype=&Web);
      }

      propagate;
   }

   DoHold(what = $, oTarget = $, duration = $, report=TRUE)
   "Holds target for durationsecs seconds."
   {
      local i;

      // Can cast spell if the 1 target item is a user
      if duration = $
      {
         duration = 10000;
      }

      if oTarget = $
      {
         return FALSE;
      }

      // No pestering immortals!
      if IsClass(oTarget,&DM) AND Send(oTarget,@PlayerIsImmortal)
      {
         return FALSE;
      }

      // check for enchantment already applied
      if Send(oTarget,@IsEnchanted,#what=self)
      {
         return FALSE;
      }

      Send(oTarget,@AddMovementSpeedPercent,#iSpeed=-MOVEMENTSPEED_MAX);

      Send(oTarget,@StartEnchantment,#what=self,#time=duration,
           #report=report,#state=report);

      if IsClass(oTarget,&Player)
      {
         Send(oTarget,@SetOverlay,#what=self);
         Send(oTarget,@SetPlayerFlag,#Flag=PFLAG_NO_MOVE,#value=TRUE);
      }
      else  // class is &Monster
      {
         Send(oTarget,@ResetBehaviorFlags);
      }

      return;
   }

   ModifyMonsterBehavior(mob = $)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_NOMOVE,#value=TRUE);

      return;
   }

   SetSpellPlayerFlag(who = $)
   {
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MOVE,#value=TRUE);

      return;
   }

   EndEnchantment(who = $, report = TRUE,state=$)
   {
      Send(who,@AddMovementSpeedPercent,#iSpeed=MOVEMENTSPEED_MAX);

      if IsClass(who,&Player)
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MOVE,#value=FALSE);
         Send(who,@RemoveOverlay,#what=self);
      }
      else
      {
         // Class is &Monster
         Post(who,@ResetBehaviorFlags);
      }

      return;
   }

   //// Overlay messages

   GetNumberOverlays(animation = $)
   {
      return 1;
   }

   GetItemUseType()
   "This class functions as an overlay, must have this message."
   {
      return ITEM_CANT_USE;
   }

   SendOverlayInformation()
   {
      AddPacket(4,Send(self,@GetOverlay));
      AddPacket(1,Send(self,@GetOverlayHotspot));
      Send(self,@SendOverlayAnimation);

      return;
   }

   GetOverlayHotSpot(animation = $)
   {
      return HS_LEGS;
   }

   GetOverlay(animation = $)
   {
      return vrweb_overlay;
   }

   SendOverlayAnimation(iAnimation = $)
   {
      if iAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_NONE, 2,2);

         return;
      }

      if iAnimation = PANM_BOW_FIRE
      {
         AddPacket(1,ANIMATE_NONE, 2,3);

         return;
      }

      AddPacket(1,ANIMATE_NONE, 2,1);

      return;
   }


end
////////////////////////////////////////////////////////////////////////////////
