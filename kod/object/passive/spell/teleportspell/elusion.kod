// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Elusion is TeleportationSpell

constants:

   include blakston.khd

   TRANCE_TIME = 30000

resources:

   include elusion.lkod

   Elusion_name_rsc = "elusion"
   Elusion_icon_rsc = ielusion.bgf
   Elusion_desc_rsc = \
      "Allows the caster to elude trouble and escape off to another location.  "
      "A number of destinations may be available, and the caster must call out "
      "the name of the location they wish to travel to."
   Elusion_No_Location_Given = \
      "With no location specified your elusion attempt fails."
   Elusion_Success = "The world folds in on itself."
   Elusion_Location_list = \
      "The world shimmers and secret paths are revealed, leading "
      "to %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s."
   elusion_loc_list_comma = ", "
   elusion_loc_list_and = "and "
   elusion_loc_list_blank = ""
   Elusion_fail = "That is not a valid destination."
   Elusion_cant_cast_here = \
       "You may only elude from a place you can elude to."
   Elusion_depart_to_destination = \
      "%s vanishes in an instant, leaving behind a fading shimmer of "
      "warped space."

   // Yeah, it's Illusionary wounds sound, but it fits.
   // Plus, Ill. Wounds wasn't using it anymore.
   Elusion_sound = riluswnd.ogg

classvars:

   vrName = Elusion_name_rsc
   vrIcon = Elusion_icon_rsc
   vrDesc = Elusion_desc_rsc

   viSpell_num = SID_ELUSION
   viSchool = SS_RIIJA
   viSpell_level = 6
   viMana = 20
   viSpellExertion = 15

   viChance_To_Increase = 10
   viMeditate_ratio = 50

   vrSucceed_wav = Elusion_sound
   viFlash = FLASH_GOOD

properties:

   // If true, can cast elusion from any room.  Otherwise it's limited.
   pbCanCastFromAnywhere = TRUE

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&KriipaClaw,2],plReagents);

      return;
   }

   CanPayCosts(who = $,lTargets = $,bItemCast = FALSE)
   {
      local oRoom, iRoomNum;

      // Can't cast just after attacking someone
      if Send(who,@GetLastPlayerAttackTime)
         + Send(SETTINGS_OBJECT,@TeleportAttackDelaySec)
         > GetTime()
      {
         Send(who,@MsgSendUser,#message_rsc=spell_too_soon_since_attacking);

         return FALSE;
      }

      if pbCanCastFromAnywhere
      {
         propagate;
      }

      // Can only cast from certain rooms.  This was added because being
      // able to escape from anywhere was too powerful.

      oRoom = Send(who, @GetOwner);
      iRoomNum = Send(oRoom, @GetRoomNum);

      if (iRoomNum <> RID_TOS AND iRoomNum <> RID_MARION
         AND iRoomNum <> RID_BARLOQUE AND iRoomNum <> RID_CORNOTH
         AND iRoomNum <> RID_JASPER AND iRoomNum <> RID_KOC_INN
         AND iRoomNum <> RID_RAZA)
      {
         // In your guild hall?
         if oRoom <> Send(who,@GetGuildHall)
         {
            Send(who,@MsgSendUser,#message_rsc=Elusion_cant_cast_here);

            return FALSE;
         }
      }

      propagate;
   }

   SuccessChance(who=$)
   "Steered spell, will always work."
   {
      return TRUE;
   }

   GetTranceTime(iSpellpower=0,who=$)
   {
      // Since this spell uses the trance, don't
      // scale it down depending on iSpellpower
      return viCast_time;
   }

   BeginCastingTrance(who=$,lTargets=$,iSpellpower=$)
   {
      local oTrance, oObject, oOwner, i, oTarget, lFinalTargets,
         lLocations, sLocations;

      // Get rid of the regular casting trance, we
      // need a special one put on below.
      Send(who,@BreakTrance,#event=EVENT_STEER);

      oTrance = Send(SYS,@FindSpellByNum,#num=SID_TRANCE);

      // Have to modify spellpower again here because elusion works differently
      // than most spells.
      iSpellPower = Send(self,@CheckCastPowerModifiers,#who=who,
                        #report=FALSE,#iSpellPower=iSpellPower);

      lLocations = Send(self,@GetLocations,#iSpellpower=iSpellpower,
                        #target=who);

      // User will add the protocol packet and callback SendElusionLocations
      // to send the appropriate resources.
      Send(who,@MsgSendUserCallback,#what=self,
            #sCallback=SetString($,@SendElusionLocations),
            #parm1=lLocations);

      // lTargets is of the form = [location1, location2,...]
      Send(oTrance,@BeginTrance,#what=self,#who=who,
            #lTargets=lLocations,#time=TRANCE_TIME);

      oOwner = Send(who,@GetOwner);

      // Give casting message to people nearby.
      foreach i in Send(oOwner,@GetHolderActive)
      {
         oObject = Send(oOwner,@HolderExtractObject,#data=i);
         if IsClass(oObject,&Player)
            AND (Send(who,@SquaredDistanceTo,#what=oObject)
                < FINENESS)
            AND (who <> oObject)
         {
            oTarget = $;
            if length(lTargets) > 0
            {
               oTarget = First(lTargets);
            }
         
            Send(self,@SpellMurmurMessage,#caster=who,#target=oTarget,
                 #hearer=oObject);
         }
      }

      Send(who,@WaveSendUser,#wave_rsc=spell_trance_begin_sound);

      return;
   }

   TranceBlocksSay()
   {
      return TRUE;
   }

   SomethingSaidDuringTrance(who=$,string=$,lTargets = $)
   {
      local sRoomName, bFound, oRoom, i, each_obj, oDeparture;

      // Check if string is a location.  If it is, and the caster has
      // sufficient spellpower make it the target.

      bFound = FALSE;

      oDeparture = Send(who,@GetOwner);

      foreach oRoom in lTargets
      {
         sRoomName = Send(oRoom,@GetName);
         if StringContain(string,sRoomName)
         {
            bFound = TRUE;
            Post(oRoom,@Teleport,#what=who);

            foreach i in Send(Send(who,@GetOwner),@GetHolderActive)
            {
               each_obj = First(i);
               if IsClass(each_obj,&User)
                  AND each_obj <> who
               {
                  Send(each_obj,@MsgSendUser,
                        #message_rsc=Elusion_depart_to_destination,
                        #parm1=Send(who,@GetName));
               }
            }

            break;
         }
      }

      if bFound
      {
         // Don't print fizzle message
         Send(who,@BreakTrance,#event=EVENT_STEER);
         Send(who,@MsgSendUser,#message_rsc=Elusion_success);
         Send(self,@PlaySpellSound,#room_obj=oDeparture,#what=who);
         Send(self,@ImproveAbility,#who=who);
      }
      else
      {
         Send(who,@MsgSendUser,#message_rsc=Elusion_fail);
      }

      return;
   }

   GetLocations(iSpellpower=$,target=$)
   {
      local lLocations, lAvailable, iNumLocations, oRoom, oHall;

      lLocations = [Send(SYS,@FindRoomByNum,#num=RID_TOS),
                    Send(SYS,@FindRoomByNum,#num=RID_MARION),
                    Send(SYS,@FindRoomByNum,#num=RID_BARLOQUE),
                    Send(SYS,@FindRoomByNum,#num=RID_CORNOTH),
                    Send(SYS,@FindRoomByNum,#num=RID_JASPER),
                    Send(SYS,@FindRoomByNum,#num=RID_RAZA)];

      // 84 spellpower for Island (7 locations, divide by 12)
      iNumLocations = Bound(iSpellPower/12,1,7);

      // Special bonus!  Warp to guild hall with high enough spellpower.
      // Spellpower has to be high enough that you were already going to 5
      // or more places.
      if iNumLocations >= 5
      {
         oHall = Send(target,@GetGuildHall);

         if oHall <> $
            AND Send(target,@CanPlayerPvP)
         {
            lAvailable = Cons(oHall,lAvailable);
         }
      }

      if Send(Send(target,@GetOwner),@GetRegion) = RID_KOCATAN
         OR iNumLocations = 7
      {
         lAvailable = Cons(Send(SYS,@FindRoomByNum,
                           #num=RID_KOC_INN),lAvailable);
         --iNumLocations;
      }

      while iNumLocations > 0
      {
         // Make these completely random, since we're just escaping
         // to somewhere ...anywhere... else.

         oRoom = Nth(lLocations,Random(1,Length(lLocations)));
         lAvailable = Cons(oRoom,lAvailable);
         lLocations = DelListElem(lLocations,oRoom);

         --iNumLocations;
      }

      return lAvailable;
   }

   SendElusionLocations(parm1=$)
   {
      local i, iNumRooms, iNumRsc, iCounter, lLocations;

      if parm1 = $
      {
         return FALSE;
      }

      // Add master resource.
      AddPacket(4,Elusion_Location_list);
      lLocations = parm1;

      iCounter = 0;
      iNumRsc = 0;

      iNumRooms = Length(lLocations);

      foreach i in lLocations
      {
         ++iCounter;

         if iNumRooms > 1
         {
            if iCounter = iNumRooms
            {
               iNumRsc += 2;
               AddPacket(4,elusion_loc_list_and, 4,Send(i,@GetName));
            }
            else
            {
               iNumRsc += 2;
               AddPacket(4,Send(i,@GetName), 4,elusion_loc_list_comma);
            }
         }
         else
         {
            ++iNumRsc;
            AddPacket(4,Send(i,@GetName));
         }
      }

      // If we didn't add enough location resources, make up for it
      // with blank ones.
      while iNumRsc++ < 16
      {
         AddPacket(4,elusion_loc_list_blank);
      }

      return TRUE;
   }

   DoubleCheckAfterTrance(who=$,lTargets=$)
   {
      Send(who,@MsgSendUser,#message_rsc=Elusion_No_Location_Given);

      return FALSE;
   }

   // This spell handles trance differently. Return TRUE here to allow
   // it to be canceled like other trance spells.
   GetRawTranceTime()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
