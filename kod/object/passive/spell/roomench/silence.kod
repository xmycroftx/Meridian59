// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Silence is RoomEnchantment

constants:

   include blakston.khd

resources:

   include silence.lkod

   Silence_name_rsc = "silence"
   Silence_icon_rsc = isilence.bgf
   Silence_desc_rsc = \
      "Muffles all speech preventing spell casting and communication as long "
      "as caster concentrates."
   Silence_unnecessary = "This area already is already silenced."
   Silence_on = "A curtain of silence falls across the room."
   Silence_off = "The curtain of silence is lifted."
   Silence_new_entrant = "This place is strangely quiet."
   Silence_cant_block_jala_caster = \
      "Your spell fails to silence the singing bard in the area."
   Silence_cant_block_jala_victim = \
      "Your words ring through the silence spell covering the room."
   Silence_blocked_jala_victim = "The silence spell muffles your song."
   Silence_spell_intro = \
      "Qor Level 3: Draws a curtain of Silence over the room, stirring the "
      "servants of Qor."

classvars:

   vrName = Silence_name_rsc
   vrIcon = Silence_icon_rsc
   vrDesc = Silence_desc_rsc
   vrSpell_intro = Silence_spell_intro

   vrAlreadyEnchanted = Silence_unnecessary

   viSpell_num = SID_SILENCE
   viSchool = SS_QOR
   viMana = 10
   viSpell_level = 3

   viManaDrain = 10000            // Mana drained per second (10^3)
   
   viChance_To_Increase = 10
   viMeditate_ratio = 50

   viHarmful = TRUE
   viNoNewbieOffense = TRUE

properties:

   pbAccessible = FALSE
   pbEnabled = FALSE

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DarkAngelFeather,2],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   DoSpellEffects(who = $, iSpellPower = 0)
   "Initiation point for the spell."
   {
      local oRoom, lJalaInfo, oJalaCaster, oJalaSpell, lJalaState;

      oRoom = Send(who,@GetOwner);

      // global effects of the enchantment
      Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=Silence_on,#what=self);
      Send(oRoom,@RoomStartEnchantment,#what=self,#state=[who,iSpellPower],
            #time=Send(self,@GetDuration,#iSpellPower=iSpellPower),
            #iSpellPower=iSpellPower,#lastcall=FALSE);
      Send(who,@SetTranceFlag);

      // See if there's a Jala song going on and try to kill it
      // Format of lJalaInfo is: [timer, spell object, state]
      lJalaInfo = Send(oRoom,@GetJalaInfo);

      if lJalaInfo <> $
      {
         // Format of lJalaState is: [volume, caster, spellpower]
         lJalaState = Nth(lJalaInfo,3);
         oJalaCaster = Nth(lJalaInfo,2);

         if Random(iSpellPower/2,iSpellPower) > First(lJalaState)
         {
            // We have blocked the Jala song.
            Send(oJalaCaster,@MsgSendUser,#message_rsc=Silence_blocked_jala_victim);
            Send(oRoom,@RemoveEnchantment,#what=oJalaCaster);
         }
         else
         {
            // The Jala song continues on!
            Send(who,@MsgSendUser,#message_rsc=Silence_cant_block_jala_caster);
            Send(oJalaCaster,@MsgSendUser,#message_rsc=Silence_cant_block_jala_victim);
         }
      }

      return TRUE;
   }

   StartPeriodicEnchantment(where=$, state=$)
   "Sends enchantment message to room like CastSpell for most room enchantments, "
   "but silent, and done as often as necessary"
    {
      local oCaster;

      oCaster = First(state);

      Send(where,@RoomStartEnchantment,#what=self,#time=viTickDuration,
         #state=state,#addicon=FALSE,#lastcall=FALSE);

      return;
   }

   StartEnchantmentNewOccupant(who = $)
   "Called on new occupants of the enchanted room."
   {
      Send(who,@MsgSendUser,#message_rsc=Silence_new_entrant);

      return;
   }

   BreakTrance(event=$)
   {
      if event = EVENT_ATTACK
      {
         return FALSE;
      }

      propagate;
   }

   EndSpell(where = $, state = $)
   "Called when spell expires."
   {
      Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=Silence_off,#what=self);

      return;
   }

   SpellBannedInArena()
   {
      return TRUE;
   }

   TranceEnding(who=$,location=$)
   "Allow maintained spells to do something when their trance breaks."
   {
      local oRoom;

      if location = $
      {
         oRoom = Send(who,@GetOwner);
      }
      else
      {
         oRoom = location;
      }

      Send(oRoom,@RemoveEnchantment,#what=self);

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
