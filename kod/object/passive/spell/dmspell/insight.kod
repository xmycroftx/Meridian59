// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Insight is DMSpell

constants:

   include blakston.khd

resources:

   include insight.lkod

   Insight_name_rsc = "insight"
   Insight_icon_rsc = lightnin.bgf

   allinroom_Insight_msg1 = "~b%s%s deeply Insights the soul of %s%s."
   allinroom_Insight_msg2 = "~bYou tingle as %s%s deeply Insights %s%s."

   caster_Insight_msg = "~bYou stare deeply at %s%s."
   Insightd_Insight_msg = "~b%s%s looks deeply into your eyes."
   Insight_desc_rsc = \
      "This gazes deep into a person's eyes, and judges their odds of "
      "advancing in each spell/skill.  The true percentage appears after the "
      "name of the spell or skill.  The first number after that is the "
      "intellect check, and the second is the requisite stat check.  Note "
      "that the req stat check assumes that the target will be around the "
      "same level as a fungus beast or mutant ant - when casting an offensive "
      "spell or using a combat skill, your odds go up if you fight tougher "
      "monsters."
   Insight_Message = "%s (%i):  %i total, %i initial/%i secondary chance."

classvars:

   vrName = Insight_name_rsc
   vrIcon = Insight_icon_rsc
   vrDesc = Insight_desc_rsc

   viSpell_num = SID_INSIGHT
   viMana = 0

properties:

messages:

   Constructor()
   {
      propagate;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   DoSpellEffects(who = $, lTargets = $)
   {
      local i, oRoom, each_obj, oTarget;

      oRoom = Send(who,@GetOwner);
      oTarget = First(lTargets);

      Send(who,@MsgSendUser,#message_rsc=caster_Insight_msg,
            #parm1=Send(oTarget,@GetDef),
            #parm2=Send(oTarget,@GetName));

      if (IsClass(oTarget,&Player))
      {
         Send(oTarget,@EffectSendUser,#what=self,#effect=EFFECT_INVERT);
         Send(oTarget,@MsgSendUser,#message_rsc=Insightd_Insight_msg,
               #parm1=Send(who,@GetCapIndef),#parm2=Send(who,@GetName));
         Send(self,@ComputeInsightInfo,#who=oTarget,#dmis=who);
      }

      foreach i in Send(oRoom,@GetHolderActive)
      {
         each_obj = First(i);

         if (IsClass(each_obj,&Player)
            AND (each_obj <> who)
            AND (each_obj <> oTarget))
         {
            if (IsClass(oTarget,&Battler))
            {
               Send(each_obj,@MsgSendUser,#message_rsc=allinroom_Insight_msg1,
                     #parm1=Send(who,@GetIndef),#parm2=Send(who,@GetName),
                     #parm3=Send(oTarget,@GetDef),#parm4=Send(oTarget,@GetName));
            }
            else
            {
               Send(each_obj,@MsgSendUser,#message_rsc=allinroom_Insight_msg2,
                     #parm1=Send(who,@GetIndef),#parm2=Send(who,@GetName),
                     #parm3=Send(oTarget,@GetDef),#parm4=Send(oTarget,@GetName));
            }
         }
      }

      return TRUE;
   }

   ComputeInsightInfo(who=$,dmis=$)
   {
      local iInitialchance, total_chance, increase_chance, i, num, obj;

      if dmis = $
         OR who = $
      {
         Debug("Bad data!");

         return FALSE;
      }

      foreach i in Send(who,@GetSpellList)
      {
         num = Send(who,@DecodeSpellNum,#compound=i);
         obj = Send(SYS,@FindSpellByNum,#num=num);
         iInitialChance = Send(obj,@GetInitialChance,#who=who);
         increase_chance = Send(obj,@GetSecondaryChance,#who=who,#target=$);
         total_chance = Bound((iInitialChance*increase_chance)/100,1,100);
         Send(dmis,@MsgSendUser,#message_rsc=insight_message,
              #parm1=Send(obj,@GetName),#parm2=Send(who,@GetSpellAbility,#spell_num=num),
              #parm3=total_chance,#parm4=iInitialChance,#parm5=increase_chance);
      }

      foreach i in Send(who,@GetSkillList)
      {
         num = Send(who,@DecodeSkillNum,#compound=i);
         obj = Send(SYS,@FindSkillByNum,#num=num);
         iInitialChance = Send(obj,@GetInitialChance,#who=who);
         increase_chance = Send(obj,@GetSecondaryChance,#who=who,#target=$);
         total_chance = Bound((iInitialChance*increase_chance)/100,1,100);
         Send(dmis,@MsgSendUser,#message_rsc=insight_message,
              #parm1=Send(obj,@GetName),#parm2=Send(who,@GetSkillAbility,#skill_num=num),
              #parm3=total_chance,#parm4=iInitialChance,#parm5=increase_chance);
      }

      return;
   }

   SendEffectData()
   {
      // for EFFECT_INVERT, 4 bytes of time to be inverted
      AddPacket(4,10000);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
