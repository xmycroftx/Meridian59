// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Ammo is NumberItem

constants:

   include blakston.khd

resources:

   include ammo.lkod

   ammo_name_rsc = "ammunition"
   // Generic default image.  Something strange so it is visually obvious if
   //  we didn't set something.
   ammo_icon_rsc = fireball.bgf
   ammo_desc_rsc = "This is a bit of ammunition for something or other.."

classvars:

   vrName = ammo_name_rsc
   vrIcon = ammo_icon_rsc
   vrDesc = ammo_desc_rsc

   viUse_type = ITEM_USE_QUIVER
   viUse_amount = 1

   viItem_type = ITEMTYPE_AMMO
   viAmmo_type = AMMO_ARROW

   viGround_group = 2
   viInventory_group = 1

   viMinDamage = 1
   viMaxDamage = 5

   // Projectile lighting information (none normally).
   viProjectileLightFlags = LIGHT_FLAG_NONE
   viProjectileLightIntensity = 0
   viProjectileLightColor = 0

properties:

   piNumber = 20
   piAttack_type = ATK_TYPE_PIERCE
   piSpell_type = 0

   viObject_flags = OF_GETTABLE

messages:

   ReqUseSomething(what = $)
   {
      if IsClass(what,&Ammo)
      {
         if NOT Send(poOwner,@TryUnuseItem,#what=self)
         {
            return FALSE;
         }
      }

      propagate;
   }

   GetProjectileIcon()
   {
      return vrIcon;
   }

   GetProjectileSpeed()
   {
      return 8;
   }

   SendProjectileAnimation()
   {
      Send(self,@SendAnimation);

      return;
   }

   GetProjectileLightFlags()
   {
      return viProjectileLightFlags;
   }

   GetProjectileLightIntensity()
   {
      return viProjectileLightIntensity;
   }

   GetProjectileLightColor()
   {
      return viProjectileLightColor;
   }

   GetDamage()
   {
      return Random(viMinDamage,viMaxDamage);
   }

   GetAmmoType()
   {
      return viAmmo_type;
   }

   GetMinDamage()
   {
      return viMinDamage;
   }
   
   GetMaxDamage()
   {
      return viMaxDamage;
   }

   GetMinSpecialDamage()
   {
      return 0;
   }

   GetMaxSpecialDamage()
   {
      return 0;
   }

///////////////////////////////
// Magic Arrow Stuff          //
///////////////////////////////

   GetSpellType()
   {
      return piSpell_type;
   }

   GetAttackType()
   {
      return piAttack_type;
   }

   SetTypeFlag(flag = 0, value = FALSE)
   {
      if value = True
      {
         piAttack_type = piAttack_type | flag;
      }
      else
      {
         piAttack_type = piAttack_type & ~flag;
      }

      return;
   }

   CheckTypeFlag(flag = 0)
   {
      return  (piAttack_type & flag);
   }

   SetSpellFlag(flag = 0, value = FALSE)
   {
      if value = True
      {
         piSpell_type = piSpell_type | flag;
      }
      else
      {
         piSpell_type = piSpell_type & ~flag;
      }

      return;
   }

   CheckSpellFlag(flag = 0)
   {
      return  (piSpell_type & flag);
   }

end
////////////////////////////////////////////////////////////////////////////////
