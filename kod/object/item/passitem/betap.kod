// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
BetaPotion is PassiveItem

constants:

   include blakston.khd

resources:

   include betap.lkod

   BetaPotion_icon_rsc = potion01.bgf

   BetaPotion_name_rsc = "The infamous BETA POTION!"
   BetaPotion_desc_rsc = \
      "This potion is to facilitate beta testing by allowing "
      "the testers to test the more advanced parts of the game.\n\n"
      "This potion will boost stats including your hit points and abilities. "
      "Once you drink the potion, you can select your schools of magic "
      "by saying the name of the schools and the levels you wish to recieve. "
      "You may not have both Shal'ille and Qor spells. "
      "Limited by your Intellect you will only recieve a certain amount of "
      "points before the potion effect wears off. \n\n"
   BetaPotion_gulp_sound = drkptn.ogg
   BetaPotion_drink = "You quaff the contents of the vial in a single gulp."
   BetaPotion_worked = "You suddenly feel a little taller."
   BetaPotion_select_schools = \
      "Add your schools until you are out of points.  You may only learn as "
      "much as your intellect will allow.  Say one of the following:\n"
      "~B\"[SHAL'ILLE, QOR, KRAANAN, FAREN, RIIJA, JALA, WEAPONCRAFT]\"~n "
      "followed by ~B\"LEVEL [ONE, TWO, THREE, FOUR, FIVE, SIX]\""

classvars:

   vrDesc = BetaPotion_desc_rsc
   viBulk = 20
   viWeight = 20
   viValue_average = 60
   viItem_type = ITEMTYPE_POTION | ITEMTYPE_SUNDRY
   viUse_type = ITEM_SINGLE_USE
   viPoisonPercent = 0
   viGoBadDamage = 0

properties:

   vrName = BetaPotion_name_rsc
   vrIcon = BetaPotion_icon_rsc
   piItem_flags = PT_GRAY_TO_RED
   piHealth = 150
   piHealthCap = 100
   pbGiveHealth = TRUE

messages:

   Constructor(health = 0, healthCap = 100, giveHealth = TRUE)
   {
      piHealth = health;
      piHealthCap = healthCap;
      pbGiveHealth = giveHealth;

      propagate;
   }

   ApplyPotionEffects(apply_on = $)
   {
      local HealthBoost, iBaseMaxHealth;

      if Send(Send(SYS,@GetLore),@BetaPotionsEnabled) 
            OR Send(SYS, @GetChaosNight)
      {
         iBaseMaxHealth = Send(apply_on,@GetBaseMaxHealth);
         Send(apply_on,@MsgSendUser,#message_rsc=BetaPotion_worked);
         if pbGiveHealth AND (iBaseMaxHealth < piHealthCap)
         {
            // How many hps?  Don't give them over potion max, and don't give
            //  them over stamina max.
            HealthBoost = bound(piHealth,0,(100+Send(apply_on,@GetStamina)));
            HealthBoost = bound(HealthBoost,0,(piHealthCap-iBaseMaxHealth));
            Send(apply_on,@GainBaseMaxHealth,#amount=HealthBoost);
            Send(apply_on,@ResetXPToLevel);

            // Don't use iBaseMaxHealth, because it changed.
            if (Send(apply_on,@GetBaseMaxHealth)
                  >= Send(SETTINGS_OBJECT,@GetPKillEnableHP))
               AND (NOT Send(apply_on,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE))
            {
               Send(apply_on,@PkillEnable);
            }
         }

         Send(apply_on,@MsgSendUser,#message_rsc=BetaPotion_select_schools);
         Post(apply_on,@SetPlayerFlag,#flag=PFLAG2_BETA_POTION,#value=TRUE,
               #flagset=2);
      }

      return;
   }

   //// Old Potion stuff

   ReqNewApply(what = $,apply_on = $)
   {
      if what = apply_on
      {
         return TRUE;
      }

      return FALSE;
   }

   NewApplied(what = $,apply_on = $)
   {
      local oSpell;

      if IsClass(apply_on,&User)
      {
         Send(apply_on,@WaveSendUser,#wave_rsc=BetaPotion_gulp_sound);
      }

      Send(apply_on,@MsgSendUser,#message_rsc=BetaPotion_drink);
      Send(self,@ApplyPotionEffects,#apply_on=apply_on);

      Send(self,@Delete);

      return;
   }

   IsBeverage()
   {
      return TRUE;
   }

   CanIdentify()
   {
      return TRUE;
   }

   RevealHiddenAttributes()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
