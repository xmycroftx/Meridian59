// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
TestKod is UtilityFunctions

// Benchmarking/testing class.
// WARNING: please don't edit the names of messages/parameters in this class
// unless you are also making the necessary adjustments in adminfn.c and
// possibly to reserved IDs in the server/compiler. Where possible, IDs are
// looked up via name by the admin functions vs assigning them in the compiler.

constants:

   include blakston.khd

resources:

properties:

   piStoreProperty

messages:

   Constructor()
   {
      return;
   }

   TimeEmptyLoop(iCount = 5000)
   "Runs an empty for loop iCount times."
   {
      local i;

      for (i = 0; i < iCount; ++i)
      {
      }

      return;
   }

   #region C calls changed to instructions
   TimeFirstStoreLocal(iCount = 5000)
   {
      local i, j, k;

      j = [1, 2, 3];

      for (i = 0; i < iCount; ++i)
      {
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
         k = First(j);
      }

      return;
   }

   TimeFirstStoreProperty(iCount = 5000)
   {
      local i, j, k;

      j = [1, 2, 3];

      for (i = 0; i < iCount; ++i)
      {
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
         piStoreProperty = First(j);
      }

      return;
   }

   TimeRestStoreLocal(iCount = 5000)
   {
      local i, j, k;

      j = [1, 2, 3];

      for (i = 0; i < iCount; ++i)
      {
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
         k = Rest(j);
      }

      return;
   }

   TimeRestStoreProperty(iCount = 5000)
   {
      local i, j, k;

      j = [1, 2, 3];

      for (i = 0; i < iCount; ++i)
      {
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
         piStoreProperty = Rest(j);
      }

      return;
   }

   TimeGetClassStoreLocal(iCount = 5000)
   {
      local i, j, k;

      j = self;

      for (i = 0; i < iCount; ++i)
      {
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
         k = GetClass(j);
      }

      return;
   }

   TimeGetClassStoreProperty(iCount = 5000)
   {
      local i, j, k;

      j = self;

      for (i = 0; i < iCount; ++i)
      {
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);
         piStoreProperty = GetClass(j);

      }

      return;
   }
   #endregion

end
////////////////////////////////////////////////////////////////////////////////
