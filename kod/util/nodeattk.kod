// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
NodeAttack is UtilityFunctions

constants:

   include blakston.khd

   RESPAWN_CHANCE = 10

resources:

   include nodeattk.lkod

   NodeAttack_initial_attack_rsc = \
      "~BYou have an uneasy feeling that one of your nodes is being "
      "threatened."
   NodeAttack_location_attack_rsc = "~BThe node at %s is under attack!"
   NodeAttack_attack_sound_rsc = ndanger.ogg
   NodeAttack_killed_rsc = "a Xeochicatl attack"
   NodeAttack_room_message_rsc = \
      "~BThe area shakes violently as several Xeochicatl pull themselves "
      "from the ground and attack the node!"
   NodeAttack_room_entry_rsc = \
      "~BYou notice that a mana node in the area is under attack by Xeochicatls!"

   NodeAttack_success_rsc = \
      "~BThe Xeochicatl retreat from %s.  The node has been saved!"
   NodeAttack_failure_rsc = \
      "~BThe node at %s has been drained by the attacking Xeochicatl!"
   NodeAttack_failure_sound_rsc = ndrained.ogg

   NodeAttack_loss_rsc = \
      "~BYour head aches as you feel the loss of one of your nodes."
   NodeAttack_severed_rsc = \
      "~BYour head roars with pain as the link to one of your nodes is "
      "severed!"

   NodeAttack_loss_mail_rsc = "Subject: The loss of the node\n"
      "It is with a heavy heart I report that the Xeochicatl have attacked "
      "and drained the node at %s.  Our forces were not able to repel the "
      "attacks and the node was lost to us.  As a result, you will not be "
      "able to draw mana from this node for a while."
      "\n\n"
      "I hope in the future we will know how to better repel these attacks.  "
      "We must be ever vigilant against these attacks."
   NodeAttack_severed_mail_rsc = "Subject: The severing of your node\n"
      "It is with a heavy heart I report that the Xeochicatl have attacked "
      "and drained the node at %s.  Unfortunately, the violent draining of "
      "the node severed your connection with it.  Our forces were not able to "
      "repel the attacks and the node was lost to us.  As a result, you must "
      "meld with the node again when it becomes available in the future."
      "\n\n"
      "I hope in the future we will know how to better repel these attacks.  "
      "We must be ever vigilant against these attacks."

   NodeAttack_keeper = "Alzahakar"

classvars:

properties:

   // Are there node attacks?
   pbAttackEnabled = FALSE
   // Base number of Meridian days to use when figuring frequency of attacks.
   piAttackFrequency = 24
   // Number of minutes the whole attack lasts.
   //  Divided into 1/3 time that node holders know, 2/3 time everyone knows.
   piAttackDuration = 60

   // Number of users that must be on before a node attack goes on.
   piNumIPsOnForAttack = 10
   // piAttackMin is the base number of Xeochicatl spawned during an attack,
   // with 10 IPs online. Further players online raises this number up to
   // piAttackMax.
   piAttackMin = 4
   piAttackMax = 10
   // piXeosToSpawn tracks how many xeos we need for the attack (between the
   // above min/max) and piXeosSpawnedSoFar is our progress towards that.
   piXeosToSpawn = 0
   piXeosSpawnedSoFar = 0

   // Keep track of users who have entered the attacked screen.
   plUsersEntered = $

   // Number of Meridian days a node loss lasts.
   piLossDuration = 1
   // Base percent chance to actually be severed from the node.
   piSeveredChance = 0

   // NOTE: See specific notes in Recreate() for more information.
   // The current node being attacked.
   poAttackedNode = $
   // List of all nodes (by ID) that can be attacked.
   plAttackableNodes = $
   // First piRandomNodes in plAttackable Nodes can be randomly attacked.
   piRandomNodes = 0

   // NOTE: the next three properties are lists, parallel to the list of
   //  attackable nodes.
   // This is a list of generation points for the Xeochicatl near the nodes.
   //  Structure: list parallel to plAttackable nodes, each element is a list of
   //  monster spawn locations, presented as a binary list of [Row,Col].
   plMonsterGen = $

   // This is a list of locations where we place Miriana, presented as binary
   //  lists of [Row,Col]
   plMirianaLocation = $

   // This is the number of Meridian Days the node is dead after a failure.
   plDownTime = $
   // This is the number of days to wait for an attack, start small.
   piWaitTime = 2

   // This indicates if Xeochicatl can respawn from dropped heartstones.
   pbXeoRespawn = FALSE
   // This indicates if Miriana even goes to view node attacks.
   pbMirianaAppears = FALSE
   // This indicates if Miriana gets that possessed look during attacks.
   pbMirianaPossessed = FALSE

   // Timer for the attack.
   ptAttack = $

messages:

   Constructor()
   {
      Send(self,@Recreate);

      return;
   }

   Recreate()
   "This resets everything back down to base level.  Clears all attack "
   "history, etc."
   {
      local iNode;

      plUsersEntered = $;
      poAttackedNode = $;
      plAttackableNodes = [ NODE_H9, NODE_VICTORIA, NODE_BADLANDS,
                            NODE_ORCCAVES, NODE_A5, NODE_ICECAVE1, NODE_Q
                          ];

      // First piRandomNodes in plAttackable Nodes can be randomly attacked.
      // Currently, Q's node in the Martyr's Battleground can be attacked, but it
      // Won't be randomly selected.
      piRandomNodes = 6;

      // This is a list of generation points for the Xeochicatl near the nodes.
      plMonsterGen = [ [[45,34],[45,30],[43,32]],  // NODE_H9
                       [[14,45],[12,44],[14,43]],  // NODE_VICTORIA
                       [[62,47],[63,43],[66,47]],  // NODE_BADLANDS
                       [[25,53],[23,51],[22,49]],  // NODE_ORCCAVES
                       [[20,15],[17,17],[20,18]],  // NODE_A5
                       [[23,27],[24,20],[27,20]],  // NODE_ICECAVE1
                       [[31,61],[26,64],[26,59]]   // NODE_Q
                     ];

      // This is the location where we place Miriana.
      plMirianaLocation = [ [39,36],  // NODE_H9
                            [14,41],  // NODE_VICTORIA
                            [62,35],  // NODE_BADLANDS
                            [27,52],  // NODE_ORCCAVES
                            [17,19],  // NODE_A5
                            [27,28],  // NODE_ICECAVE1
                            [30,66]   // NODE_Q
                          ];

      // This is the number of Meridian Days the node is dead after a failure.
      plDownTime = [0,0,0,0,0,0,0];

      // This is the number of days to wait for an attack, start small.
      piWaitTime = 2;

      if ptAttack <> $
      {
         DeleteTimer(ptAttack);
      }

      ptAttack = $;

      // Reset all nodes to be active.
      foreach iNode in plAttackableNodes
      {
         Send(Send(SYS,@FindNodeByNum,#num=iNode),@Activate);
      }

      Send(self,@CalcAllPlayerMana);

      return;
   }

   NewGameDay()
   {
      local iDelay, iIndex, iNodeNumber, bNodeActivated;

      // Decrease counters in plDownTime, if zero, re-activeate node
      iIndex = 1;
      bNodeActivated = FALSE;

      foreach iDelay in plDownTime
      {
         if iDelay > 0
         {
            if --iDelay = 0
            {
               iNodeNumber = Nth(plAttackableNodes,iIndex);
               Send(Send(SYS,@FindNodeByNum,#num=iNodeNumber),@Activate);
               bNodeActivated = TRUE;
            }

            SetNth(plDownTime,iIndex,iDelay);
         }

         if bNodeActivated
         {
            Send(self,@CalcAllPlayerMana);
         }

         ++iIndex;
      }

      if NOT pbAttackEnabled
      {
         return;
      }

      // Check the wait time, see if we're up for attacking the node again!
      if --piWaitTime <= 0
         AND poAttackedNode = $
         AND ptAttack = $
      {
         // Generate a wait between a minute and 4 hours
         ptAttack = CreateTimer(self,@StartAttackTimer,Random(60,14400)*1000);
         piWaitTime = piAttackFrequency;
      }

      return;
   }

   CalcAllPlayerMana()
   {
      // We take care of logged on users here.  Other users will be adjusted
      // when they log on.
      SendList(Send(SYS,@GetUsersLoggedOn),0,@ComputeMaxMana);

      return;
   }

   StartAttackTimer(timer = $)
   {
      if (timer = $
         OR timer <> ptAttack)
      {
         DeleteTimer(ptAttack);
      }
      ptAttack = $;

      if NOT Send(self,@DoNodeAttack)
      {
         // Between 1 and 2 hours
         ptAttack = CreateTimer(self,@StartAttackTimer,Random(3600,7200)*1000);
      }

      return;
   }

   DoNodeAttack(iNode=$,bOverride=FALSE,iNumIPs=0)
   {
      local i, iIndex, oRoom, oMonsters, lPosition, oItem, iNumber,
            iNumberXeos;

      // General fail conditions, not enough users, bad node, attacking an
      //  already dead node.
      if (iNumIPs <= 0)
      {
         iNumIPs = Send(SYS,@GetUniqueIPs);
      }

      if poAttackedNode <> $
         OR (iNumIPs < piNumIPsOnForAttack AND NOT bOverride)
      {
         return FALSE;
      }

      if iNode = $
      {
         iIndex = Random(1,piRandomNodes);
         iNode = Nth(plAttackableNodes,iIndex);
      }
      else
      {
         iIndex = FindListElem(plAttackableNodes,iNode);
         if NOT iIndex
         {
            Debug("NodeAttack::DoNodeAttack called with bad iNode");

            return FALSE;
         }
      }

      if Nth(plDownTime,iIndex) > 0
      {
         return FALSE;
      }

      // Setup node, get location.
      poAttackedNode = Send(SYS,@FindNodeByNum,#num=iNode);
      // TODO: Make sure node is in the room?
      oRoom = Send(poAttackedNode,@GetOwner);

      // Find Miriana, turn off wandering, move her to room.
      if pbMirianaAppears
      {
         oMonsters = First(Send(Send(SYS,@GetLibrary),@GetOccupationList,
                           #cNPC_class=&Heretic));
         lPosition = Nth(plMirianaLocation,iIndex);
         if Send(oRoom,@ReqNewHold,#what=oMonsters,#new_row=First(lPosition),
                 #new_col=Nth(lPosition,2))
         {
            Send(oMonsters,@SetWandering,#value=FALSE);
            Send(oMonsters,@SetPossessed,#bValue=pbMirianaPossessed);
            Send(oRoom,@NewHold,#what=oMonsters,#new_row=First(lPosition),
                 #new_col=Nth(lPosition,2));
         }
      }

      // Turn off Monster spawning in room, Send message to room, kill monsters.
      Send(oRoom,@SetMonsterGeneration,#bValue=FALSE);
      Send(oRoom,@Rumble,#duration=1000);

      // Turn PvP off for the duration of the node attack.
      Send(oRoom,@SetRoomFlag,#flag=ROOM_NO_PK,#value=FALSE);

      foreach i in Send(oRoom,@GetHolderActive)
      {
         oItem = First(i);

         if IsClass(oItem,&Monster)
            AND NOT Send(oItem,@IsOwnedByPlayer)
         {
            Send(oItem,@Killed,#what=self);
         }
         else if IsClass(oItem,&Player)
         {
           Send(oItem,@MsgSendUser,#message_rsc=NodeAttack_room_message_rsc);
         }
      }

      // Set the total number of xeos we will spawn based on number online.
      // We may want to modify this total number if a lot of players show
      // up, but total IPs online is probably a good metric for the kind
      // of participation that will happen (given node attacks run for 1hr).
      // Default is spawn 4 at 10 online, 5 at 15 online, 6 at 20 online up to
      // 10 at 40 IPs online.
      piXeosToSpawn = Bound(piAttackMin + (iNumIPs - 10) / 5, piAttackMin, piAttackMax);

      // Spawn Xeos around node, then in room.
      piXeosSpawnedSoFar = 0;

      iNumber = piXeosToSpawn / 4;

      foreach oItem in Nth(plMonsterGen,iIndex)
      {
         // Spawn 1 or 2 at the node.
         while iNumber-- > 0
         {
            Send(oRoom,@GenerateMonster,#oMonster=Send(self,@CreateXeo),
                  #iRow=First(oItem),#iCol=Nth(oItem,2),#bStack=TRUE);
            ++piXeosSpawnedSoFar;
         }
      }

      // Set timer for when everyone will be alerted, and send message to node
      //  holders. Convert minutes to milliseconds.
      if (ptAttack <> $)
      {
         DeleteTimer(ptAttack);
         ptAttack = $;
      }
      ptAttack = CreateTimer(self,@WarnAllTimer,(piAttackDuration*60000)/3);

      foreach oItem in Send(SYS,@GetUsersLoggedOn)
      {
         if Send(oItem,@GetNodeList) & Nth(plAttackableNodes,iIndex)
         {
            Send(oItem,@MsgSendUser,#message_rsc=NodeAttack_initial_attack_rsc);
            Send(oItem,@WaveSendUser,#wave_rsc=NodeAttack_attack_sound_rsc);
         }
      }

      return TRUE;
   }

   GetTrueName()
   "This is for killing the monsters in room at attack time, gives an "
   "appropriate string in the corpse desc"
   {
      return NodeAttack_killed_rsc;
   }

   GetOwner()
   "This is for various things that call GetOwner of a monster's killer"
   {
      if poAttackedNode = $
      {
         return $;
      }
      return Send(poAttackedNode,@GetOwner);
   }

   CreateXeo(iType = 0)
   "Creates and returns a random Xeochicatl for a node attack."
   {
      local iRandom, oXeo;

      if (iType < 1) OR (iType > 8)
      {
         iRandom = Random(1,8);
      }
      else
      {
         iRandom = iType;
      }

      switch(iRandom)
      {
         case 1: oXeo = Create(&XeoFire,#InAttack=TRUE); break;
         case 2: oXeo = Create(&XeoWater,#InAttack=TRUE); break;
         case 3: oXeo = Create(&XeoEarth,#InAttack=TRUE); break;
         case 4: oXeo = Create(&XeoAir,#InAttack=TRUE); break;
         case 5: oXeo = Create(&XeoAcid,#InAttack=TRUE); break;
         case 6: oXeo = Create(&XeoUnholy,#InAttack=TRUE); break;
         case 7: oXeo = Create(&XeoHoly,#InAttack=TRUE); break;
         default: oXeo = Create(&XeoIll,#InAttack=TRUE); break;
      }

      return oXeo;
   }

   SpawnAttackXeo(oRoom = $)
   "Used for spawning xeos mid-attack. Returns TRUE if xeo could be spawned."
   "Failure here should likely end the attack early if 0 xeos are left."
   {
      local iIndex, lCoords, lRandomCoords;

      if (oRoom = $)
      {
         oRoom = Send(poAttackedNode,@GetOwner);
      }

      iIndex = FindListElem(plAttackableNodes,Send(poAttackedNode,@GetNodeNum));
      lCoords = Nth(plMonsterGen, iIndex);
      lRandomCoords = Nth(lCoords, Random(1,Length(lCoords)));

      // This could stop the attack early if there are no more xeos.
      if (NOT Send(oRoom,@GenerateMonster,#oMonster=Send(self,@CreateXeo),
            #iRow=First(lRandomCoords),#iCol=Nth(lRandomCoords,2),#bStack=TRUE))
      {
         return FALSE;
      }

      ++piXeosSpawnedSoFar;

      return TRUE;
   }

   XeoKilled()
   "Called when a Xeochicatl that's part of an attack is killed"
   {
      local oRoom, iNumber, oHeartStone, iNumStones, Passive;

      if poAttackedNode = $
      {
         return;
      }

      oRoom = Send(poAttackedNode,@GetOwner);

      // May need to spawn another xeo!
      if (piXeosSpawnedSoFar < piXeosToSpawn)
      {
         if (Send(self,@SpawnAttackXeo,#oRoom=oRoom))
         {
            return;
         }
      }

      iNumber = Send(oRoom,@CountHoldingHowMany,#class=&Xeochicatl);
      if iNumber = 0
      {
         iNumStones = Send(oRoom,@CountHoldingHowMany,#class=&HeartStone);
         // If we have more than one stone, respawn a Xeochicatl!
         if iNumStones > 1 AND pbXeoRespawn
         {
            iNumber = 1;

            foreach Passive in Send(oRoom,@GetHolderPassive)
            {
               oHeartStone = First(Passive);
               if IsClass(oHeartStone,&HeartStone)
               {
                  // Don't respawn first in the list (this is the last one
                  //  created), and spawn the last one (this is the first one
                  //  created).  The rest have a chance to respawn.
                  if iNumber > 0
                     AND (Random(1,100) < RESPAWN_CHANCE
                          OR iNumber = iNumStones)
                  {
                     Send(oHeartStone,@RespawnXeo);
                  }

                  ++iNumber;
               }
            }
         }
         else
         {
            Send(self,@EndNodeAttack,#bFailure=FALSE);
         }
      }

      return;
   }

   // Maybe not ideal, but rooms will call this every time a user enters.
   UserEntered(who=$, where=$)
   {
      local iLevel;

      if (poAttackedNode = $
         OR where = $
         OR who = $
         OR (NOT IsClass(who,&User))
         OR (Send(poAttackedNode,@GetOwner) <> where))
      {
         return;
      }

      // User entered our attack screen. Maybe spawn a xeo.
      // Only want to consider users who could fight the xeos.
      iLevel = Send(who,@GetLevel);

      if (iLevel < 80)
      {
         return;
      }

      if (plUsersEntered = $)
      {
         plUsersEntered = Cons(who, plUsersEntered);
         Send(who,@MsgSendUser,#message_rsc=NodeAttack_room_entry_rsc);
      }
      else if (NOT FindListElem(plUsersEntered, who))
      {
         plUsersEntered = Cons(who, plUsersEntered);
         Send(who,@MsgSendUser,#message_rsc=NodeAttack_room_entry_rsc);
         Send(self,@SpawnAttackXeo,#oRoom=where);
      }

      return;
   }

   WarnAllTimer()
   {
      local oItem, rName, iTime;

      ptAttack = $;

      // Get the room name from where the node thinks it is.  Useful for nodes
      //  that disappear under certain conditions.
      rName = Send(poAttackedNode,@GetLocationName);
      foreach oItem in Send(SYS,@GetUsersLoggedOn)
      {
         Send(oItem,@MsgSendUser,#message_rsc=NodeAttack_location_attack_rsc,
              #parm1=rName);
      }

      // Convert minutes to milliseconds for timer,
      iTime = (piAttackDuration * 60000 * 2) / 3;
      ptAttack = CreateTimer(self,@EndAttackTimer,iTime);

      return;
   }

   EndAttackTimer()
   {
      ptAttack = $;
      Send(self,@EndNodeAttack,#bFailure=TRUE);

      return;
   }

   EndNodeAttack(bFailure=FALSE)
   {
      local oMonsters, oRoom, oItem, bSevered, iIndex, iNodeNumber, rRoomName;

      // Check timer
      if ptAttack <> $
      {
         DeleteTimer(ptAttack);
         ptAttack = $;
      }

      // Fix what we stopped: Miriana's wandering, monster spawning, etc.
      oMonsters = First(Send(Send(SYS,@GetLibrary),@GetOccupationList,
                        #cNPC_class=&Heretic));

      Send(oMonsters,@SetWandering,#value=TRUE);
      Send(oMonsters,@SetPossessed,#bValue=FALSE);
      oRoom = Send(poAttackedNode,@GetOwner);
      Send(oRoom,@SetMonsterGeneration,#bValue=TRUE);
      Send(oRoom,@SetRoomFlagToDefault,#flag=ROOM_NO_PK);

      // Kill the Xeo's flags about being part of a node attack
      SendListByClass(Send(oRoom,@GetHolderActive),1,&Xeochicatl,@EndAttack);

      // Get the room name from the node, where it expects to be.
      rRoomName = Send(poAttackedNode,@GetLocationName);
      if rRoomName = $
      {
         Debug("can't find location name for node",poAttackedNode);
      }

      if bFailure
      {
         // Shut off node
         Send(poAttackedNode,@Deactivate);
         iIndex = FindListElem(plAttackableNodes,
                               Send(poAttackedNode,@GetNodeNum));
         SetNth(plDownTime,iIndex,piLossDuration);

         // Run through all people melded with node, checked for severed, then
         //  give them message or mail.
         foreach oItem in Send(SYS,@GetUsers)
         {
            // Tell everyone they blew it.
            if Send(oItem,@IsLoggedOn)
            {
               Send(oItem,@MsgSendUser,#message_rsc=NodeAttack_failure_rsc,
                    #parm1=Send(oRoom,@GetName));
            }

            if (Send(oItem,@GetNodeList) & Nth(plAttackableNodes,iIndex))
               AND NOT IsClass(oItem,&DM)
            {
               bSevered = FALSE;
               if (piSeveredChance > 0)
                  AND Random(1,100) <= piSeveredChance + Send(oItem,@NumManaNodes)
               {
                  iNodeNumber = Send(poAttackedNode,@GetNodeNum);
                  Send(oItem,@RemoveNodeFromList,#node_num=iNodeNumber);
                  bSevered = TRUE;
               }

               if Send(oItem,@IsLoggedOn)
               {
                  Send(oItem,@ComputeMaxMana);
                  if bSevered
                  {
                     Send(oItem,@MsgSendUser,
                           #message_rsc=NodeAttack_severed_rsc,
                           #parm1=Send(oRoom,@GetName));
                  }
                  else
                  {
                     Send(oItem,@MsgSendUser,#message_rsc=NodeAttack_loss_rsc,
                           #parm1=Send(oRoom,@GetName));
                  }
                  Send(oItem,@WaveSendUser,#wave_rsc=NodeAttack_failure_sound_rsc);
               }
               else if rRoomName <> $
               {
                  if bSevered
                  {
                     Send(oItem,@receivenestedmail,#from=NodeAttack_keeper,
                           #dest_list=[oItem],
                           #nest_list=[4,NodeAttack_severed_mail_rsc,4,rRoomName]);
                  }
                  else
                  {
                     Send(oItem,@receivenestedmail,#from=NodeAttack_keeper,
                           #dest_list=[oItem],
                           #nest_list=[4,NodeAttack_loss_mail_rsc,4,rRoomName]);
                  }
               }
            }
         }
      }
      else
      {
         // Not a failure, players succeeded!
         foreach oItem in Send(SYS,@GetUsersLoggedOn)
         {
            Send(oItem,@MsgSendUser,#message_rsc=NodeAttack_success_rsc,
                 #parm1=Send(oRoom,@GetName));
         }
      }

      poAttackedNode = $;
      plUsersEntered = $;
      piWaitTime = piAttackFrequency;

      return;
   }

   GetAttackedNode()
   {
      return poAttackedNode;
   }

   GetRespawn()
   {
      return pbXeoRespawn;
   }

   SetAttacks(bValue=TRUE)
   {
      pbAttackEnabled = bValue;

      return;
   }

   GetAttacks()
   {
      return pbAttackEnabled;
   }

end
//////////////////////////////////////////////////////////////////////////////////
