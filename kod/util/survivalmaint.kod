// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
SurvivalRoomMaintenance is UtilityFunctions

constants:

   include blakston.khd

resources:

   include survivalmaint.lkod

   public_survival_started = \
      "%s has started a public co-op survival arena. It will begin in "
      "three minutes."
   public_ended = \
      "The public co-op survival arena has ended at level %i."
   survroom_not_found = \
      "Could not find a room to use as a base for the Survival Arena!"

properties:

   plSurvivalRooms = $

   // Are Survival Arenas active?
   piPublicSurvivalEnabled = TRUE
   piSoloSurvivalEnabled = TRUE
   piGuildSurvivalEnabled = TRUE

   // At what level multiple do these increase?
   piSurvivalTPIncreaseLevel = 8
   piSurvivalLootIncreaseLevel = 4

   // How much extra XP per level?
   piSurvivalXPPerLevel = 2

   // How much extra cash on each monster kill per level?
   piSurvivalCashPerLevel = 20

   // Only these rooms allowed (list of RIDs)
   plAllowedRooms = $

   // Default time between rounds
   piRegroupTime = 15000

   // Default time between wall blitzes (mobs walk through walls)
   piWallBlitzTime = 300000

   // Default last join level
   piLastJoinLevel = 6

   // Do we restore resources on level completion?
   pbRestoreResources = TRUE

messages:

   Constructor()
   {
      Send(self,@Recreate);

      return;
   }

   Recreate()
   {
      plAllowedRooms = [RID_BADLAND1, RID_C4, RID_C6, RID_D4, RID_D6E6, RID_H4,
                        RID_D7, RID_E2, RID_E4, RID_E7, RID_F2, RID_F3, RID_F4,
                        RID_FAROL_WEST, RID_G4, RID_G5, RID_G6, RID_H3, RID_H5,
                        RID_H6, RID_H7, RID_I3, RID_I6, RID_I7, RID_I8,
                        RID_NECROAREA1, RID_NECROAREA2, RID_NECROAREA3,
                        RID_NECROAREA4, RID_ORC_CAVE1, RID_ORC_CAVE2,
                        RID_ORC_CAVE3, RID_ORC_CAVE4, RID_ORC_CAVE6, RID_KA2];

      plAllowedRooms = Cons(RID_KA4,plAllowedRooms);
      plAllowedRooms = Cons(RID_KA5,plAllowedRooms);
      plAllowedRooms = Cons(RID_KB1,plAllowedRooms);
      plAllowedRooms = Cons(RID_KB2,plAllowedRooms);
      plAllowedRooms = Cons(RID_KB3,plAllowedRooms);
      plAllowedRooms = Cons(RID_KB4,plAllowedRooms);
      plAllowedRooms = Cons(RID_KB5,plAllowedRooms);
      plAllowedRooms = Cons(RID_KC2,plAllowedRooms);
      plAllowedRooms = Cons(RID_KC3,plAllowedRooms);
      plAllowedRooms = Cons(RID_KC4,plAllowedRooms);
      plAllowedRooms = Cons(RID_KD1,plAllowedRooms);
      plAllowedRooms = Cons(RID_KD2,plAllowedRooms);
      plAllowedRooms = Cons(RID_KD3,plAllowedRooms);
      plAllowedRooms = Cons(RID_KD4,plAllowedRooms);
      plAllowedRooms = Cons(RID_KE2,plAllowedRooms);
      plAllowedRooms = Cons(RID_KE4,plAllowedRooms);

      return;
   }

   CreateRoom(who=$,guild_survival=FALSE,iPublic=FALSE,sString=$,
              lSurvivalOptions=$,oForceBaseRoom=$)
   {
      local oRoom, oBaseRoom, iRID, i, iBaseRID, iPvP;

      if guild_survival = TRUE
         AND NOT piGuildSurvivalEnabled
      {
         return;
      }

      if iPublic = TRUE
         AND NOT piPublicSurvivalEnabled
      {
         return;
      }

      if iPublic = FALSE
         AND guild_survival = FALSE
         AND NOT piSoloSurvivalEnabled
      {
         return;
      }

      iPvP = FALSE;
      foreach i in lSurvivalOptions
      {
         if i = OPT_PVP_ON
         {
            iPvP = TRUE;
         }
      }

      // If we sent a room name, use it for the survival room if allowed.
      if sString <> $
      {
         foreach i in Send(SYS,@GetRooms)
         {
            if StringContain(sString,Send(i,@GetName))
            {
               iBaseRID = Send(i,@GetRoomNum);
               // If room not allowed, skip it.
               if (NOT IsClass(who,&DM)
                  AND NOT FindListElem(plAllowedRooms,iBaseRID))
               {
                  continue;
               }

               oBaseRoom = i;

               break;
            }
         }
      }

      if (oBaseRoom = $)
      {
         iBaseRID = Nth(plAllowedRooms,Random(1,Length(plAllowedRooms)));
         oBaseRoom = Send(SYS,@FindRoomByNum,#num=iBaseRID);
         if (oBaseRoom = $)
         {
            Send(who,@MsgSendUser,#message_rsc=survroom_not_found);

            return;
         }
      }

      iRID = Send(self,@GetNextAvailableRID);

      if iRID = 0
      {
         return;
      }

      if guild_survival
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&SurvivalRoom,
               #poGuild=Send(who,@GetGuild),#base_room=oBaseRoom,#iPvP=iPvP);
      }
      else
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&SurvivalRoom,
               #iPublic=iPublic,#base_room=oBaseRoom,#iPvP=iPvP);
      }

      oRoom = Send(SYS,@FindRoomByNum,#num=iRID);

      if oRoom <> $
      {
         plSurvivalRooms = Cons(oRoom,plSurvivalRooms);
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);
         Send(oRoom,@Teleport,#what=who);

         if iPublic
         {
            foreach i in Send(SYS,@GetUsersLoggedOn)
            {
               Send(i,@MsgSendUser,#message_rsc=public_survival_started,
                                   #parm1=Send(who,@GetTrueName));
            }
         }
      }

      return oRoom;
   }

   GetNextAvailableRID()
   {
      local iRID, i, bExists;

      iRID = RID_SURVIVAL_START;

      if plSurvivalRooms = $
      {
         return iRID;
      }

      while iRID <= RID_SURVIVAL_END
      {
         bExists = FALSE;
         foreach i in plSurvivalRooms
         {
            if Send(i,@GetRoomNum) = iRID
            {
               bExists = TRUE;
            }
         }

         if NOT bExists
         {
            return iRID;
         }

         iRID = iRID + 1;
      }

      return 0;
   }

   FindRoomByGuild(oGuild=$)
   {
      local i;

      foreach i in plSurvivalRooms
      {
         if Send(i,@GetGuildAssociation) = oGuild
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }

      return $;
   }

   FindPublicRoom()
   {
      local i;

      foreach i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus) = TRUE
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }

      return $;
   }

   RoomDeleted(what = $)
   {
      local plUsers, i;

      if plSurvivalRooms <> $
         AND FindListElem(plSurvivalRooms,what) <> 0
      {
         if Send(what,@GetPublicStatus)
         {
            plUsers = Send(SYS,@GetUsersLoggedOn);
            foreach i in plUsers
            {
               Send(i,@MsgSendUser,#message_rsc=public_ended,
                                   #parm1=Send(what,@GetLevel));
               // Keep track of highest level.
               Send(Send(SYS,@GetStatistics),@RecordPublicSurvivalLevel,
                     #iLevel=Send(what,@GetLevel));
            }
         }
         else if Send(what,@GetGuildAssociation) <> $
         {
            Send(Send(SYS,@GetStatistics),@RecordGuildSurvivalLevel,
                  #iLevel=Send(what,@GetLevel));
         }
         else
         {
            Send(Send(SYS,@GetStatistics),@RecordSoloSurvivalLevel,
                  #iLevel=Send(what,@GetLevel));
         }

         plSurvivalRooms = DelListElem(plSurvivalRooms,what);
      }

      return;
   }

   GetRegroupTime()
   {
      return piRegroupTime;
   }

   GetPublicSurvivalEnabled()
   {
      return piPublicSurvivalEnabled;
   }

   GetGuildSurvivalEnabled()
   {
      return piGuildSurvivalEnabled;
   }

   GetSoloSurvivalEnabled()
   {
      return piSoloSurvivalEnabled;
   }

   GetSurvivalXP()
   {
      return piSurvivalXPPerLevel;
   }

   GetSurvivalCash()
   {
      return piSurvivalCashPerLevel;
   }

   GetSurvivalTP()
   {
      return piSurvivalTPIncreaseLevel;
   }

   GetSurvivalLoot()
   {
      return piSurvivalLootIncreaseLevel;
   }

   GetWallBlitzTime()
   {
      return piWallBlitzTime;
   }

   GetLastJoinLevel()
   {
      return piLastJoinLevel;
   }

   GetRestoreResources()
   {
      return pbRestoreResources;
   }

   ExcludeRID(iRID=RID_MAR_SMITHY)
   {
      if FindListElem(plAllowedRooms,iRID)
      {
         plAllowedRooms = DelListElem(plAllowedRooms,iRID);

         return TRUE;
      }

      return FALSE;
   }

   AllowRID(iRID=0)
   {
      if NOT FindListElem(plAllowedRooms,iRID)
      {
         plAllowedRooms = Cons(iRID, plAllowedRooms);

         return TRUE;
      }

      return FALSE;
   }

   SurvivalStatusReport()
   {
      local i;

      // Report highest levels reached.
      Debug("Highest Public Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordPublicSurvivalLevel));
      Debug("Highest Guild Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordGuildSurvivalLevel));
      Debug("Highest Solo Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordSoloSurvivalLevel));

      if plSurvivalRooms = $
      {
         Debug("No survival arenas active.");

         return;
      }

      foreach i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus)
         {
            Debug("Public arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Public arena is on level ",Send(i,@GetLevel)," and has ",
                  Length(Send(i,@GetParticipants))," participants remaining.");
         }
         else if Send(i,@GetGuildAssociation)
         {
            Debug("Guild arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Guild arena is on level ",Send(i,@GetLevel)," and has ",
                  Length(Send(i,@GetParticipants))," participants remaining.");
         }
         else
         {
            // Must be solo.
            Debug("Solo arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Solo arena is on level ",Send(i,@GetLevel)," and was started by ",
                  Send(First(Send(i,@GetParticipants)),@GetTrueName));
         }
      }

      return plSurvivalRooms;
   }

end
////////////////////////////////////////////////////////////////////////////////
